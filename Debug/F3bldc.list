
F3bldc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003568  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080036fc  080036fc  000136fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003748  08003748  00013748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800374c  0800374c  0001374c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000054  20000000  08003750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000374  20000054  080037a4  00020054  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200003c8  080037a4  000203c8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
  9 .debug_info   00018bd4  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002fd0  00000000  00000000  00038c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000086c9  00000000  00000000  0003bc28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ae0  00000000  00000000  000442f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001020  00000000  00000000  00044dd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006a9a  00000000  00000000  00045df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000433a  00000000  00000000  0004c892  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00050bcc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002090  00000000  00000000  00050c48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000054 	.word	0x20000054
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080036e4 	.word	0x080036e4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000058 	.word	0x20000058
 80001d0:	080036e4 	.word	0x080036e4

080001d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001d4:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001d6:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <HAL_InitTick+0x24>)
{
 80001d8:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001da:	6818      	ldr	r0, [r3, #0]
 80001dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e4:	f000 f9e8 	bl	80005b8 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80001e8:	2200      	movs	r2, #0
 80001ea:	4621      	mov	r1, r4
 80001ec:	f04f 30ff 	mov.w	r0, #4294967295
 80001f0:	f000 f9a2 	bl	8000538 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80001f4:	2000      	movs	r0, #0
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000050 	.word	0x20000050

080001fc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001fc:	4a07      	ldr	r2, [pc, #28]	; (800021c <HAL_Init+0x20>)
{
 80001fe:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000200:	6813      	ldr	r3, [r2, #0]
 8000202:	f043 0310 	orr.w	r3, r3, #16
 8000206:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000208:	2003      	movs	r0, #3
 800020a:	f000 f983 	bl	8000514 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800020e:	2000      	movs	r0, #0
 8000210:	f7ff ffe0 	bl	80001d4 <HAL_InitTick>
  HAL_MspInit();
 8000214:	f003 f886 	bl	8003324 <HAL_MspInit>
}
 8000218:	2000      	movs	r0, #0
 800021a:	bd08      	pop	{r3, pc}
 800021c:	40022000 	.word	0x40022000

08000220 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000220:	4a02      	ldr	r2, [pc, #8]	; (800022c <HAL_IncTick+0xc>)
 8000222:	6813      	ldr	r3, [r2, #0]
 8000224:	3301      	adds	r3, #1
 8000226:	6013      	str	r3, [r2, #0]
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	200000c4 	.word	0x200000c4

08000230 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000230:	4b01      	ldr	r3, [pc, #4]	; (8000238 <HAL_GetTick+0x8>)
 8000232:	6818      	ldr	r0, [r3, #0]
}
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	200000c4 	.word	0x200000c4

0800023c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800023c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800023e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000240:	f7ff fff6 	bl	8000230 <HAL_GetTick>
  uint32_t wait = Delay;
 8000244:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000246:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000248:	4605      	mov	r5, r0
  {
     wait++;
 800024a:	bf18      	it	ne
 800024c:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800024e:	f7ff ffef 	bl	8000230 <HAL_GetTick>
 8000252:	1b40      	subs	r0, r0, r5
 8000254:	42a0      	cmp	r0, r4
 8000256:	d3fa      	bcc.n	800024e <HAL_Delay+0x12>
  {
  }
}
 8000258:	b003      	add	sp, #12
 800025a:	bd30      	pop	{r4, r5, pc}

0800025c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800025c:	b513      	push	{r0, r1, r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the COMP handle allocation and lock status */
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 800025e:	4604      	mov	r4, r0
 8000260:	2800      	cmp	r0, #0
 8000262:	d04e      	beq.n	8000302 <HAL_COMP_Init+0xa6>
 8000264:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8000268:	06db      	lsls	r3, r3, #27
 800026a:	d44a      	bmi.n	8000302 <HAL_COMP_Init+0xa6>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800026c:	4b26      	ldr	r3, [pc, #152]	; (8000308 <HAL_COMP_Init+0xac>)
 800026e:	699a      	ldr	r2, [r3, #24]
 8000270:	f042 0201 	orr.w	r2, r2, #1
 8000274:	619a      	str	r2, [r3, #24]
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	f003 0301 	and.w	r3, r3, #1
 800027c:	9300      	str	r3, [sp, #0]
 800027e:	9b00      	ldr	r3, [sp, #0]
    /* Init the low level hardware : SYSCFG to access comparators */
    HAL_COMP_MspInit(hcomp);
 8000280:	f003 f88e 	bl	80033a0 <HAL_COMP_MspInit>
    
    if(hcomp->State == HAL_COMP_STATE_RESET)
 8000284:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8000288:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800028c:	b90b      	cbnz	r3, 8000292 <HAL_COMP_Init+0x36>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800028e:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 8000292:	6822      	ldr	r2, [r4, #0]
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 8000294:	6861      	ldr	r1, [r4, #4]
    COMP_INIT(hcomp);
 8000296:	2000      	movs	r0, #0
 8000298:	9001      	str	r0, [sp, #4]
 800029a:	6813      	ldr	r3, [r2, #0]
 800029c:	9301      	str	r3, [sp, #4]
 800029e:	9b01      	ldr	r3, [sp, #4]
 80002a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80002a4:	430b      	orrs	r3, r1
 80002a6:	9301      	str	r3, [sp, #4]
 80002a8:	9b01      	ldr	r3, [sp, #4]
 80002aa:	68a1      	ldr	r1, [r4, #8]
 80002ac:	f023 0302 	bic.w	r3, r3, #2
 80002b0:	430b      	orrs	r3, r1
 80002b2:	9301      	str	r3, [sp, #4]
 80002b4:	9b01      	ldr	r3, [sp, #4]
 80002b6:	69a1      	ldr	r1, [r4, #24]
 80002b8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80002bc:	430b      	orrs	r3, r1
 80002be:	9301      	str	r3, [sp, #4]
 80002c0:	9901      	ldr	r1, [sp, #4]
 80002c2:	68e3      	ldr	r3, [r4, #12]
 80002c4:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 80002c8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80002cc:	430b      	orrs	r3, r1
 80002ce:	9301      	str	r3, [sp, #4]
 80002d0:	9b01      	ldr	r3, [sp, #4]
 80002d2:	6921      	ldr	r1, [r4, #16]
 80002d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80002d8:	430b      	orrs	r3, r1
 80002da:	9301      	str	r3, [sp, #4]
 80002dc:	9b01      	ldr	r3, [sp, #4]
 80002de:	6961      	ldr	r1, [r4, #20]
 80002e0:	430b      	orrs	r3, r1
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	9b01      	ldr	r3, [sp, #4]
 80002e6:	69e1      	ldr	r1, [r4, #28]
 80002e8:	430b      	orrs	r3, r1
 80002ea:	9301      	str	r3, [sp, #4]
 80002ec:	9b01      	ldr	r3, [sp, #4]
 80002ee:	6a21      	ldr	r1, [r4, #32]
 80002f0:	430b      	orrs	r3, r1
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b01      	ldr	r3, [sp, #4]
 80002f6:	6013      	str	r3, [r2, #0]

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 80002f8:	2301      	movs	r3, #1
 80002fa:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  }
  
  return status;
}
 80002fe:	b002      	add	sp, #8
 8000300:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000302:	2001      	movs	r0, #1
 8000304:	e7fb      	b.n	80002fe <HAL_COMP_Init+0xa2>
 8000306:	bf00      	nop
 8000308:	40021000 	.word	0x40021000

0800030c <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{ 
 800030c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the COMP handle allocation and lock status */
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 800030e:	b380      	cbz	r0, 8000372 <HAL_COMP_Stop+0x66>
 8000310:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8000314:	06db      	lsls	r3, r3, #27
 8000316:	d42c      	bmi.n	8000372 <HAL_COMP_Stop+0x66>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_BUSY)
 8000318:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800031c:	2b02      	cmp	r3, #2
 800031e:	d128      	bne.n	8000372 <HAL_COMP_Stop+0x66>
    {
      /* Disable the EXTI Line event mode if any */
      COMP_EXTI_DISABLE_EVENT(COMP_GET_EXTI_LINE(hcomp->Instance));
 8000320:	6803      	ldr	r3, [r0, #0]
 8000322:	4917      	ldr	r1, [pc, #92]	; (8000380 <HAL_COMP_Stop+0x74>)
 8000324:	4a17      	ldr	r2, [pc, #92]	; (8000384 <HAL_COMP_Stop+0x78>)
 8000326:	428b      	cmp	r3, r1
 8000328:	d005      	beq.n	8000336 <HAL_COMP_Stop+0x2a>
 800032a:	4c17      	ldr	r4, [pc, #92]	; (8000388 <HAL_COMP_Stop+0x7c>)
 800032c:	42a3      	cmp	r3, r4
 800032e:	d002      	beq.n	8000336 <HAL_COMP_Stop+0x2a>
 8000330:	3408      	adds	r4, #8
 8000332:	42a3      	cmp	r3, r4
 8000334:	d11f      	bne.n	8000376 <HAL_COMP_Stop+0x6a>
 8000336:	428b      	cmp	r3, r1
 8000338:	6854      	ldr	r4, [r2, #4]
 800033a:	d102      	bne.n	8000342 <HAL_COMP_Stop+0x36>
 800033c:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 8000340:	e009      	b.n	8000356 <HAL_COMP_Stop+0x4a>
 8000342:	4911      	ldr	r1, [pc, #68]	; (8000388 <HAL_COMP_Stop+0x7c>)
 8000344:	428b      	cmp	r3, r1
 8000346:	d011      	beq.n	800036c <HAL_COMP_Stop+0x60>
 8000348:	3108      	adds	r1, #8
 800034a:	428b      	cmp	r3, r1
 800034c:	bf0c      	ite	eq
 800034e:	f06f 4180 	mvneq.w	r1, #1073741824	; 0x40000000
 8000352:	f06f 0101 	mvnne.w	r1, #1
 8000356:	4021      	ands	r1, r4
 8000358:	6051      	str	r1, [r2, #4]

      /* Disable the selected comparator */
      __HAL_COMP_DISABLE(hcomp);
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	f022 0201 	bic.w	r2, r2, #1
 8000360:	601a      	str	r2, [r3, #0]

      hcomp->State = HAL_COMP_STATE_READY;
 8000362:	2301      	movs	r3, #1
 8000364:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 8000368:	2000      	movs	r0, #0
 800036a:	bd10      	pop	{r4, pc}
      COMP_EXTI_DISABLE_EVENT(COMP_GET_EXTI_LINE(hcomp->Instance));
 800036c:	f46f 0180 	mvn.w	r1, #4194304	; 0x400000
 8000370:	e7f1      	b.n	8000356 <HAL_COMP_Stop+0x4a>
    status = HAL_ERROR;
 8000372:	2001      	movs	r0, #1
    {
      status = HAL_ERROR;
    }
  }
  
  return status;
 8000374:	bd10      	pop	{r4, pc}
      COMP_EXTI_DISABLE_EVENT(COMP_GET_EXTI_LINE(hcomp->Instance));
 8000376:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000378:	f021 0101 	bic.w	r1, r1, #1
 800037c:	6251      	str	r1, [r2, #36]	; 0x24
 800037e:	e7ec      	b.n	800035a <HAL_COMP_Stop+0x4e>
 8000380:	4001001c 	.word	0x4001001c
 8000384:	40010400 	.word	0x40010400
 8000388:	40010020 	.word	0x40010020

0800038c <HAL_COMP_Start_IT>:
  * @brief  Start the comparator in Interrupt mode.
  * @param  hcomp  COMP handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_COMP_Start_IT(COMP_HandleTypeDef *hcomp)
{ 
 800038c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t extiline = 0U;
  
  /* Check the COMP handle allocation and lock status */
  if((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 800038e:	2800      	cmp	r0, #0
 8000390:	d058      	beq.n	8000444 <HAL_COMP_Start_IT+0xb8>
 8000392:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8000396:	06dd      	lsls	r5, r3, #27
 8000398:	d454      	bmi.n	8000444 <HAL_COMP_Start_IT+0xb8>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800039a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	2b01      	cmp	r3, #1
 80003a2:	d14f      	bne.n	8000444 <HAL_COMP_Start_IT+0xb8>
    {
      /* Configure the EXTI event generation */
      if((hcomp->Init.TriggerMode & (COMP_TRIGGERMODE_IT_RISING|COMP_TRIGGERMODE_IT_FALLING)) != RESET)
 80003a4:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80003a6:	07b4      	lsls	r4, r6, #30
 80003a8:	d04c      	beq.n	8000444 <HAL_COMP_Start_IT+0xb8>
      {
        /* Get the EXTI Line output configuration */
        extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 80003aa:	6804      	ldr	r4, [r0, #0]
 80003ac:	4b26      	ldr	r3, [pc, #152]	; (8000448 <HAL_COMP_Start_IT+0xbc>)
 80003ae:	429c      	cmp	r4, r3
 80003b0:	d026      	beq.n	8000400 <HAL_COMP_Start_IT+0x74>
 80003b2:	3304      	adds	r3, #4
 80003b4:	429c      	cmp	r4, r3
 80003b6:	d026      	beq.n	8000406 <HAL_COMP_Start_IT+0x7a>
 80003b8:	4a24      	ldr	r2, [pc, #144]	; (800044c <HAL_COMP_Start_IT+0xc0>)
 80003ba:	4294      	cmp	r4, r2
 80003bc:	bf0c      	ite	eq
 80003be:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 80003c2:	2201      	movne	r2, #1

        /* Configure the trigger rising edge */
        if((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_RISING) != RESET)
 80003c4:	f016 0f01 	tst.w	r6, #1
 80003c8:	f002 0501 	and.w	r5, r2, #1
 80003cc:	4b20      	ldr	r3, [pc, #128]	; (8000450 <HAL_COMP_Start_IT+0xc4>)
 80003ce:	d021      	beq.n	8000414 <HAL_COMP_Start_IT+0x88>
        {
          COMP_EXTI_RISING_ENABLE(extiline);
 80003d0:	b1e5      	cbz	r5, 800040c <HAL_COMP_Start_IT+0x80>
 80003d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80003d4:	4311      	orrs	r1, r2
        }
        else
        {
          COMP_EXTI_RISING_DISABLE(extiline);
 80003d6:	6299      	str	r1, [r3, #40]	; 0x28
        }
        /* Configure the trigger falling edge */
        if((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_FALLING) != RESET)
 80003d8:	07b1      	lsls	r1, r6, #30
 80003da:	d52b      	bpl.n	8000434 <HAL_COMP_Start_IT+0xa8>
        {
          COMP_EXTI_FALLING_ENABLE(extiline);
 80003dc:	b315      	cbz	r5, 8000424 <HAL_COMP_Start_IT+0x98>
 80003de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80003e0:	4311      	orrs	r1, r2
        }
        else
        {
          COMP_EXTI_FALLING_DISABLE(extiline);
 80003e2:	62d9      	str	r1, [r3, #44]	; 0x2c
        }

        /* Clear COMP EXTI pending bit if any */
        COMP_EXTI_CLEAR_FLAG(extiline);
 80003e4:	b30d      	cbz	r5, 800042a <HAL_COMP_Start_IT+0x9e>
 80003e6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable EXTI interrupt mode */
        COMP_EXTI_ENABLE_IT(extiline);
 80003e8:	6a19      	ldr	r1, [r3, #32]
 80003ea:	430a      	orrs	r2, r1
 80003ec:	621a      	str	r2, [r3, #32]

        /* Enable the selected comparator */
        __HAL_COMP_ENABLE(hcomp);
 80003ee:	6823      	ldr	r3, [r4, #0]
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	6023      	str	r3, [r4, #0]

        hcomp->State = HAL_COMP_STATE_BUSY;
 80003f6:	2302      	movs	r3, #2
 80003f8:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  HAL_StatusTypeDef status = HAL_OK;
 80003fc:	2000      	movs	r0, #0
 80003fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8000400:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000404:	e7de      	b.n	80003c4 <HAL_COMP_Start_IT+0x38>
 8000406:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800040a:	e7db      	b.n	80003c4 <HAL_COMP_Start_IT+0x38>
          COMP_EXTI_RISING_ENABLE(extiline);
 800040c:	6899      	ldr	r1, [r3, #8]
 800040e:	4311      	orrs	r1, r2
          COMP_EXTI_RISING_DISABLE(extiline);
 8000410:	6099      	str	r1, [r3, #8]
 8000412:	e7e1      	b.n	80003d8 <HAL_COMP_Start_IT+0x4c>
 8000414:	43d1      	mvns	r1, r2
 8000416:	b115      	cbz	r5, 800041e <HAL_COMP_Start_IT+0x92>
 8000418:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 800041a:	4039      	ands	r1, r7
 800041c:	e7db      	b.n	80003d6 <HAL_COMP_Start_IT+0x4a>
 800041e:	689f      	ldr	r7, [r3, #8]
 8000420:	4039      	ands	r1, r7
 8000422:	e7f5      	b.n	8000410 <HAL_COMP_Start_IT+0x84>
          COMP_EXTI_FALLING_ENABLE(extiline);
 8000424:	68d9      	ldr	r1, [r3, #12]
 8000426:	4311      	orrs	r1, r2
          COMP_EXTI_FALLING_DISABLE(extiline);
 8000428:	60d9      	str	r1, [r3, #12]
        COMP_EXTI_CLEAR_FLAG(extiline);
 800042a:	615a      	str	r2, [r3, #20]
        COMP_EXTI_ENABLE_IT(extiline);
 800042c:	6819      	ldr	r1, [r3, #0]
 800042e:	430a      	orrs	r2, r1
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	e7dc      	b.n	80003ee <HAL_COMP_Start_IT+0x62>
 8000434:	43d1      	mvns	r1, r2
          COMP_EXTI_FALLING_DISABLE(extiline);
 8000436:	b115      	cbz	r5, 800043e <HAL_COMP_Start_IT+0xb2>
 8000438:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800043a:	4031      	ands	r1, r6
 800043c:	e7d1      	b.n	80003e2 <HAL_COMP_Start_IT+0x56>
 800043e:	68dd      	ldr	r5, [r3, #12]
 8000440:	4029      	ands	r1, r5
 8000442:	e7f1      	b.n	8000428 <HAL_COMP_Start_IT+0x9c>
    status = HAL_ERROR;
 8000444:	2001      	movs	r0, #1
 8000446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000448:	4001001c 	.word	0x4001001c
 800044c:	40010028 	.word	0x40010028
 8000450:	40010400 	.word	0x40010400

08000454 <HAL_COMP_Stop_IT>:
HAL_StatusTypeDef HAL_COMP_Stop_IT(COMP_HandleTypeDef *hcomp)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Disable the EXTI Line interrupt mode */
  COMP_EXTI_DISABLE_IT(COMP_GET_EXTI_LINE(hcomp->Instance));
 8000454:	6803      	ldr	r3, [r0, #0]
 8000456:	4914      	ldr	r1, [pc, #80]	; (80004a8 <HAL_COMP_Stop_IT+0x54>)
 8000458:	4a14      	ldr	r2, [pc, #80]	; (80004ac <HAL_COMP_Stop_IT+0x58>)
 800045a:	428b      	cmp	r3, r1
{
 800045c:	b410      	push	{r4}
  COMP_EXTI_DISABLE_IT(COMP_GET_EXTI_LINE(hcomp->Instance));
 800045e:	d005      	beq.n	800046c <HAL_COMP_Stop_IT+0x18>
 8000460:	4c13      	ldr	r4, [pc, #76]	; (80004b0 <HAL_COMP_Stop_IT+0x5c>)
 8000462:	42a3      	cmp	r3, r4
 8000464:	d002      	beq.n	800046c <HAL_COMP_Stop_IT+0x18>
 8000466:	3408      	adds	r4, #8
 8000468:	42a3      	cmp	r3, r4
 800046a:	d118      	bne.n	800049e <HAL_COMP_Stop_IT+0x4a>
 800046c:	428b      	cmp	r3, r1
 800046e:	6814      	ldr	r4, [r2, #0]
 8000470:	d102      	bne.n	8000478 <HAL_COMP_Stop_IT+0x24>
 8000472:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8000476:	e009      	b.n	800048c <HAL_COMP_Stop_IT+0x38>
 8000478:	490d      	ldr	r1, [pc, #52]	; (80004b0 <HAL_COMP_Stop_IT+0x5c>)
 800047a:	428b      	cmp	r3, r1
 800047c:	d00c      	beq.n	8000498 <HAL_COMP_Stop_IT+0x44>
 800047e:	3108      	adds	r1, #8
 8000480:	428b      	cmp	r3, r1
 8000482:	bf0c      	ite	eq
 8000484:	f06f 4380 	mvneq.w	r3, #1073741824	; 0x40000000
 8000488:	f06f 0301 	mvnne.w	r3, #1
 800048c:	4023      	ands	r3, r4
 800048e:	6013      	str	r3, [r2, #0]
  
  status = HAL_COMP_Stop(hcomp);
  
  return status;
}
 8000490:	f85d 4b04 	ldr.w	r4, [sp], #4
  status = HAL_COMP_Stop(hcomp);
 8000494:	f7ff bf3a 	b.w	800030c <HAL_COMP_Stop>
  COMP_EXTI_DISABLE_IT(COMP_GET_EXTI_LINE(hcomp->Instance));
 8000498:	f46f 0380 	mvn.w	r3, #4194304	; 0x400000
 800049c:	e7f6      	b.n	800048c <HAL_COMP_Stop_IT+0x38>
 800049e:	6a13      	ldr	r3, [r2, #32]
 80004a0:	f023 0301 	bic.w	r3, r3, #1
 80004a4:	6213      	str	r3, [r2, #32]
 80004a6:	e7f3      	b.n	8000490 <HAL_COMP_Stop_IT+0x3c>
 80004a8:	4001001c 	.word	0x4001001c
 80004ac:	40010400 	.word	0x40010400
 80004b0:	40010020 	.word	0x40010020

080004b4 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 80004b4:	b508      	push	{r3, lr}
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 80004b6:	4a12      	ldr	r2, [pc, #72]	; (8000500 <HAL_COMP_IRQHandler+0x4c>)
 80004b8:	6803      	ldr	r3, [r0, #0]
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d010      	beq.n	80004e0 <HAL_COMP_IRQHandler+0x2c>
 80004be:	3204      	adds	r2, #4
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d010      	beq.n	80004e6 <HAL_COMP_IRQHandler+0x32>
 80004c4:	3208      	adds	r2, #8
 80004c6:	4293      	cmp	r3, r2
 80004c8:	bf0c      	ite	eq
 80004ca:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 80004ce:	2301      	movne	r3, #1
  
  /* Check COMP EXTI flag */
  if(COMP_EXTI_GET_FLAG(extiline) != RESET)
 80004d0:	f013 0f01 	tst.w	r3, #1
 80004d4:	4a0b      	ldr	r2, [pc, #44]	; (8000504 <HAL_COMP_IRQHandler+0x50>)
 80004d6:	d009      	beq.n	80004ec <HAL_COMP_IRQHandler+0x38>
 80004d8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80004da:	420b      	tst	r3, r1
 80004dc:	d10a      	bne.n	80004f4 <HAL_COMP_IRQHandler+0x40>
 80004de:	bd08      	pop	{r3, pc}
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 80004e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80004e4:	e7f4      	b.n	80004d0 <HAL_COMP_IRQHandler+0x1c>
 80004e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80004ea:	e7f1      	b.n	80004d0 <HAL_COMP_IRQHandler+0x1c>
  if(COMP_EXTI_GET_FLAG(extiline) != RESET)
 80004ec:	6951      	ldr	r1, [r2, #20]
 80004ee:	420b      	tst	r3, r1
 80004f0:	d104      	bne.n	80004fc <HAL_COMP_IRQHandler+0x48>
 80004f2:	bd08      	pop	{r3, pc}
  {
    /* Clear COMP EXTI pending bit */
    COMP_EXTI_CLEAR_FLAG(extiline);
 80004f4:	6353      	str	r3, [r2, #52]	; 0x34
  
    /* COMP trigger user callback */
    HAL_COMP_TriggerCallback(hcomp);
 80004f6:	f002 f9b7 	bl	8002868 <HAL_COMP_TriggerCallback>
 80004fa:	bd08      	pop	{r3, pc}
    COMP_EXTI_CLEAR_FLAG(extiline);
 80004fc:	6153      	str	r3, [r2, #20]
 80004fe:	e7fa      	b.n	80004f6 <HAL_COMP_IRQHandler+0x42>
 8000500:	4001001c 	.word	0x4001001c
 8000504:	40010400 	.word	0x40010400

08000508 <HAL_COMP_GetOutputLevel>:
  uint32_t level=0U;
  
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));
  
  level = READ_BIT(hcomp->Instance->CSR, COMP_CSR_COMPxOUT);
 8000508:	6803      	ldr	r3, [r0, #0]
 800050a:	6818      	ldr	r0, [r3, #0]
  if(level != 0U)
  {
    return(COMP_OUTPUTLEVEL_HIGH);
  }
  return(COMP_OUTPUTLEVEL_LOW);
}
 800050c:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 8000510:	4770      	bx	lr
	...

08000514 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000514:	4a07      	ldr	r2, [pc, #28]	; (8000534 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000516:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000518:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800051c:	041b      	lsls	r3, r3, #16
 800051e:	0c1b      	lsrs	r3, r3, #16
 8000520:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000524:	0200      	lsls	r0, r0, #8
 8000526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800052a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800052e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000530:	60d3      	str	r3, [r2, #12]
 8000532:	4770      	bx	lr
 8000534:	e000ed00 	.word	0xe000ed00

08000538 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000538:	4b17      	ldr	r3, [pc, #92]	; (8000598 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	68dc      	ldr	r4, [r3, #12]
 800053e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000542:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000546:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000548:	2b04      	cmp	r3, #4
 800054a:	bf28      	it	cs
 800054c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800054e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000550:	f04f 0501 	mov.w	r5, #1
 8000554:	fa05 f303 	lsl.w	r3, r5, r3
 8000558:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800055c:	bf8c      	ite	hi
 800055e:	3c03      	subhi	r4, #3
 8000560:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000562:	4019      	ands	r1, r3
 8000564:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000566:	fa05 f404 	lsl.w	r4, r5, r4
 800056a:	3c01      	subs	r4, #1
 800056c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800056e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000570:	ea42 0201 	orr.w	r2, r2, r1
 8000574:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000578:	bfaf      	iteee	ge
 800057a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800057e:	f000 000f 	andlt.w	r0, r0, #15
 8000582:	4b06      	ldrlt	r3, [pc, #24]	; (800059c <HAL_NVIC_SetPriority+0x64>)
 8000584:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000586:	bfa5      	ittet	ge
 8000588:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800058c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800058e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000590:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	bf00      	nop
 8000598:	e000ed00 	.word	0xe000ed00
 800059c:	e000ed14 	.word	0xe000ed14

080005a0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005a0:	0942      	lsrs	r2, r0, #5
 80005a2:	2301      	movs	r3, #1
 80005a4:	f000 001f 	and.w	r0, r0, #31
 80005a8:	fa03 f000 	lsl.w	r0, r3, r0
 80005ac:	4b01      	ldr	r3, [pc, #4]	; (80005b4 <HAL_NVIC_EnableIRQ+0x14>)
 80005ae:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005b2:	4770      	bx	lr
 80005b4:	e000e100 	.word	0xe000e100

080005b8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005b8:	3801      	subs	r0, #1
 80005ba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005be:	d20a      	bcs.n	80005d6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005c4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c6:	21f0      	movs	r1, #240	; 0xf0
 80005c8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005cc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005ce:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005d0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80005d6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	e000e010 	.word	0xe000e010
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80005e6:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80005e8:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80005ea:	bf0c      	ite	eq
 80005ec:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80005f0:	f022 0204 	bicne.w	r2, r2, #4
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	4770      	bx	lr
 80005f8:	e000e010 	.word	0xe000e010

080005fc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80005fc:	4770      	bx	lr

080005fe <HAL_SYSTICK_IRQHandler>:
{
 80005fe:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000600:	f7ff fffc 	bl	80005fc <HAL_SYSTICK_Callback>
 8000604:	bd08      	pop	{r3, pc}
	...

08000608 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000608:	6801      	ldr	r1, [r0, #0]
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <DMA_CalcBaseAndBitshift+0x34>)
 800060c:	4299      	cmp	r1, r3
{
 800060e:	b510      	push	{r4, lr}
 8000610:	f04f 0414 	mov.w	r4, #20
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000614:	d809      	bhi.n	800062a <DMA_CalcBaseAndBitshift+0x22>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <DMA_CalcBaseAndBitshift+0x38>)
 8000618:	440a      	add	r2, r1
 800061a:	fbb2 f2f4 	udiv	r2, r2, r4
 800061e:	0092      	lsls	r2, r2, #2
 8000620:	6402      	str	r2, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000622:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 8000626:	63c3      	str	r3, [r0, #60]	; 0x3c
 8000628:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <DMA_CalcBaseAndBitshift+0x3c>)
 800062c:	440b      	add	r3, r1
 800062e:	fbb3 f3f4 	udiv	r3, r3, r4
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000636:	4b04      	ldr	r3, [pc, #16]	; (8000648 <DMA_CalcBaseAndBitshift+0x40>)
 8000638:	e7f5      	b.n	8000626 <DMA_CalcBaseAndBitshift+0x1e>
 800063a:	bf00      	nop
 800063c:	40020407 	.word	0x40020407
 8000640:	bffdfff8 	.word	0xbffdfff8
 8000644:	bffdfbf8 	.word	0xbffdfbf8
 8000648:	40020400 	.word	0x40020400

0800064c <HAL_DMA_Init>:
{ 
 800064c:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 800064e:	4604      	mov	r4, r0
 8000650:	b328      	cbz	r0, 800069e <HAL_DMA_Init+0x52>
  hdma->State = HAL_DMA_STATE_BUSY;
 8000652:	2302      	movs	r3, #2
  tmp |=  hdma->Init.Direction        |
 8000654:	6885      	ldr	r5, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000656:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp |=  hdma->Init.Direction        |
 800065a:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 800065c:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 800065e:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000660:	68c5      	ldr	r5, [r0, #12]
  tmp = hdma->Instance->CCR;
 8000662:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000664:	432b      	orrs	r3, r5
 8000666:	6905      	ldr	r5, [r0, #16]
 8000668:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800066a:	6945      	ldr	r5, [r0, #20]
 800066c:	432b      	orrs	r3, r5
 800066e:	6985      	ldr	r5, [r0, #24]
 8000670:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8000672:	69c5      	ldr	r5, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000674:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8000678:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 800067c:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800067e:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8000680:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8000682:	f7ff ffc1 	bl	8000608 <DMA_CalcBaseAndBitshift>
  hdma->XferCpltCallback = NULL;
 8000686:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000688:	2301      	movs	r3, #1
  hdma->XferCpltCallback = NULL;
 800068a:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800068c:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800068e:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000690:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000692:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8000694:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8000698:	f884 0020 	strb.w	r0, [r4, #32]
  return HAL_OK;
 800069c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800069e:	2001      	movs	r0, #1
}  
 80006a0:	bd38      	pop	{r3, r4, r5, pc}

080006a2 <HAL_DMA_Start_IT>:
{
 80006a2:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80006a4:	f890 4020 	ldrb.w	r4, [r0, #32]
 80006a8:	2c01      	cmp	r4, #1
 80006aa:	d035      	beq.n	8000718 <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 80006ac:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80006b0:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80006b2:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 80006b4:	f880 4020 	strb.w	r4, [r0, #32]
 80006b8:	f04f 0600 	mov.w	r6, #0
 80006bc:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 80006c0:	d128      	bne.n	8000714 <HAL_DMA_Start_IT+0x72>
  	hdma->State = HAL_DMA_STATE_BUSY;
 80006c2:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80006c6:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80006c8:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80006ca:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80006cc:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80006ce:	f026 0601 	bic.w	r6, r6, #1
 80006d2:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80006d4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 80006d6:	40bd      	lsls	r5, r7
 80006d8:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 80006da:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80006dc:	6843      	ldr	r3, [r0, #4]
 80006de:	6805      	ldr	r5, [r0, #0]
 80006e0:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 80006e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 80006e4:	bf0b      	itete	eq
 80006e6:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 80006e8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80006ea:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 80006ec:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80006ee:	b14b      	cbz	r3, 8000704 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80006f0:	6823      	ldr	r3, [r4, #0]
 80006f2:	f043 030e 	orr.w	r3, r3, #14
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80006f6:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80006f8:	682b      	ldr	r3, [r5, #0]
 80006fa:	f043 0301 	orr.w	r3, r3, #1
 80006fe:	602b      	str	r3, [r5, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000700:	2000      	movs	r0, #0
 8000702:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000704:	6823      	ldr	r3, [r4, #0]
 8000706:	f043 030a 	orr.w	r3, r3, #10
 800070a:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800070c:	6823      	ldr	r3, [r4, #0]
 800070e:	f023 0304 	bic.w	r3, r3, #4
 8000712:	e7f0      	b.n	80006f6 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8000714:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8000718:	2002      	movs	r0, #2
} 
 800071a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800071c <HAL_DMA_IRQHandler>:
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800071c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800071e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8000720:	6803      	ldr	r3, [r0, #0]
{
 8000722:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000724:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000726:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000728:	2404      	movs	r4, #4
 800072a:	4094      	lsls	r4, r2
 800072c:	4226      	tst	r6, r4
 800072e:	d00e      	beq.n	800074e <HAL_DMA_IRQHandler+0x32>
 8000730:	f015 0f04 	tst.w	r5, #4
 8000734:	d00b      	beq.n	800074e <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	0692      	lsls	r2, r2, #26
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800073a:	bf5e      	ittt	pl
 800073c:	681a      	ldrpl	r2, [r3, #0]
 800073e:	f022 0204 	bicpl.w	r2, r2, #4
 8000742:	601a      	strpl	r2, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000744:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000746:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 8000748:	b373      	cbz	r3, 80007a8 <HAL_DMA_IRQHandler+0x8c>
}  
 800074a:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 800074c:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800074e:	2402      	movs	r4, #2
 8000750:	4094      	lsls	r4, r2
 8000752:	4226      	tst	r6, r4
 8000754:	d012      	beq.n	800077c <HAL_DMA_IRQHandler+0x60>
 8000756:	f015 0f02 	tst.w	r5, #2
 800075a:	d00f      	beq.n	800077c <HAL_DMA_IRQHandler+0x60>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	0695      	lsls	r5, r2, #26
 8000760:	d406      	bmi.n	8000770 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	f022 020a 	bic.w	r2, r2, #10
 8000768:	601a      	str	r2, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 800076a:	2301      	movs	r3, #1
 800076c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	__HAL_UNLOCK(hdma);
 8000770:	2300      	movs	r3, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000772:	604c      	str	r4, [r1, #4]
  	__HAL_UNLOCK(hdma);
 8000774:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8000778:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800077a:	e7e5      	b.n	8000748 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800077c:	2408      	movs	r4, #8
 800077e:	4094      	lsls	r4, r2
 8000780:	4234      	tst	r4, r6
 8000782:	d011      	beq.n	80007a8 <HAL_DMA_IRQHandler+0x8c>
 8000784:	072c      	lsls	r4, r5, #28
 8000786:	d50f      	bpl.n	80007a8 <HAL_DMA_IRQHandler+0x8c>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000788:	681c      	ldr	r4, [r3, #0]
 800078a:	f024 040e 	bic.w	r4, r4, #14
 800078e:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000790:	2301      	movs	r3, #1
 8000792:	fa03 f202 	lsl.w	r2, r3, r2
 8000796:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000798:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 800079a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 800079e:	2300      	movs	r3, #0
 80007a0:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 80007a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80007a6:	e7cf      	b.n	8000748 <HAL_DMA_IRQHandler+0x2c>
}  
 80007a8:	bc70      	pop	{r4, r5, r6}
 80007aa:	4770      	bx	lr

080007ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80007b0:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b4:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8000948 <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80007b8:	4a61      	ldr	r2, [pc, #388]	; (8000940 <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 80007ba:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 80007bc:	fa38 f403 	lsrs.w	r4, r8, r3
 80007c0:	d102      	bne.n	80007c8 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 80007c2:	b003      	add	sp, #12
 80007c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80007c8:	f04f 0e01 	mov.w	lr, #1
 80007cc:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 80007d0:	ea18 060e 	ands.w	r6, r8, lr
 80007d4:	f000 80a6 	beq.w	8000924 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007d8:	684c      	ldr	r4, [r1, #4]
 80007da:	f024 0710 	bic.w	r7, r4, #16
 80007de:	2f02      	cmp	r7, #2
 80007e0:	d116      	bne.n	8000810 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 80007e2:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80007e6:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007ea:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80007ee:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007f2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80007f6:	f04f 0c0f 	mov.w	ip, #15
 80007fa:	fa0c fc0b 	lsl.w	ip, ip, fp
 80007fe:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000802:	690d      	ldr	r5, [r1, #16]
 8000804:	fa05 f50b 	lsl.w	r5, r5, fp
 8000808:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 800080c:	f8ca 5020 	str.w	r5, [sl, #32]
 8000810:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000814:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000816:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800081a:	fa05 f50a 	lsl.w	r5, r5, sl
 800081e:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000820:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000824:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000828:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800082c:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800082e:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000832:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000834:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000838:	d811      	bhi.n	800085e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800083a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800083c:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000840:	68cf      	ldr	r7, [r1, #12]
 8000842:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000846:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800084a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800084c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800084e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000852:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000856:	409f      	lsls	r7, r3
 8000858:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800085c:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800085e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000860:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000862:	688f      	ldr	r7, [r1, #8]
 8000864:	fa07 f70a 	lsl.w	r7, r7, sl
 8000868:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800086a:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800086c:	00e5      	lsls	r5, r4, #3
 800086e:	d559      	bpl.n	8000924 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000870:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000874:	f045 0501 	orr.w	r5, r5, #1
 8000878:	f8c9 5018 	str.w	r5, [r9, #24]
 800087c:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000880:	f023 0703 	bic.w	r7, r3, #3
 8000884:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000888:	f005 0501 	and.w	r5, r5, #1
 800088c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000890:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000892:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000898:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800089a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800089e:	f04f 0e0f 	mov.w	lr, #15
 80008a2:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80008a6:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80008aa:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80008ae:	d03b      	beq.n	8000928 <HAL_GPIO_Init+0x17c>
 80008b0:	4d24      	ldr	r5, [pc, #144]	; (8000944 <HAL_GPIO_Init+0x198>)
 80008b2:	42a8      	cmp	r0, r5
 80008b4:	d03a      	beq.n	800092c <HAL_GPIO_Init+0x180>
 80008b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008ba:	42a8      	cmp	r0, r5
 80008bc:	d038      	beq.n	8000930 <HAL_GPIO_Init+0x184>
 80008be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008c2:	42a8      	cmp	r0, r5
 80008c4:	d036      	beq.n	8000934 <HAL_GPIO_Init+0x188>
 80008c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008ca:	42a8      	cmp	r0, r5
 80008cc:	d034      	beq.n	8000938 <HAL_GPIO_Init+0x18c>
 80008ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008d2:	42a8      	cmp	r0, r5
 80008d4:	d032      	beq.n	800093c <HAL_GPIO_Init+0x190>
 80008d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008da:	42a8      	cmp	r0, r5
 80008dc:	bf14      	ite	ne
 80008de:	2507      	movne	r5, #7
 80008e0:	2506      	moveq	r5, #6
 80008e2:	fa05 f50c 	lsl.w	r5, r5, ip
 80008e6:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80008ea:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80008ec:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80008ee:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008f0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80008f4:	bf0c      	ite	eq
 80008f6:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80008f8:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 80008fa:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80008fc:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008fe:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000902:	bf0c      	ite	eq
 8000904:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000906:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000908:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800090a:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800090c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000910:	bf0c      	ite	eq
 8000912:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000914:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8000916:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000918:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800091a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800091c:	bf54      	ite	pl
 800091e:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8000920:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8000922:	60d5      	str	r5, [r2, #12]
    position++;
 8000924:	3301      	adds	r3, #1
 8000926:	e749      	b.n	80007bc <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000928:	2500      	movs	r5, #0
 800092a:	e7da      	b.n	80008e2 <HAL_GPIO_Init+0x136>
 800092c:	2501      	movs	r5, #1
 800092e:	e7d8      	b.n	80008e2 <HAL_GPIO_Init+0x136>
 8000930:	2502      	movs	r5, #2
 8000932:	e7d6      	b.n	80008e2 <HAL_GPIO_Init+0x136>
 8000934:	2503      	movs	r5, #3
 8000936:	e7d4      	b.n	80008e2 <HAL_GPIO_Init+0x136>
 8000938:	2504      	movs	r5, #4
 800093a:	e7d2      	b.n	80008e2 <HAL_GPIO_Init+0x136>
 800093c:	2505      	movs	r5, #5
 800093e:	e7d0      	b.n	80008e2 <HAL_GPIO_Init+0x136>
 8000940:	40010400 	.word	0x40010400
 8000944:	48000400 	.word	0x48000400
 8000948:	40021000 	.word	0x40021000

0800094c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800094c:	b10a      	cbz	r2, 8000952 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800094e:	6181      	str	r1, [r0, #24]
 8000950:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000952:	6281      	str	r1, [r0, #40]	; 0x28
 8000954:	4770      	bx	lr

08000956 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8000956:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8000958:	4604      	mov	r4, r0
 800095a:	b300      	cbz	r0, 800099e <HAL_IWDG_Init+0x48>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 800095c:	6803      	ldr	r3, [r0, #0]
 800095e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8000962:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8000964:	f245 5255 	movw	r2, #21845	; 0x5555
 8000968:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800096a:	6842      	ldr	r2, [r0, #4]
 800096c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800096e:	6882      	ldr	r2, [r0, #8]
 8000970:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8000972:	f7ff fc5d 	bl	8000230 <HAL_GetTick>
 8000976:	4605      	mov	r5, r0

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8000978:	6823      	ldr	r3, [r4, #0]
 800097a:	68d8      	ldr	r0, [r3, #12]
 800097c:	b940      	cbnz	r0, 8000990 <HAL_IWDG_Init+0x3a>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 800097e:	68e2      	ldr	r2, [r4, #12]
 8000980:	6919      	ldr	r1, [r3, #16]
 8000982:	4291      	cmp	r1, r2
    hiwdg->Instance->WINR = hiwdg->Init.Window;
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000984:	bf0a      	itet	eq
 8000986:	f64a 22aa 	movweq	r2, #43690	; 0xaaaa
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800098a:	611a      	strne	r2, [r3, #16]
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800098c:	601a      	streq	r2, [r3, #0]
 800098e:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8000990:	f7ff fc4e 	bl	8000230 <HAL_GetTick>
 8000994:	1b40      	subs	r0, r0, r5
 8000996:	2830      	cmp	r0, #48	; 0x30
 8000998:	d9ee      	bls.n	8000978 <HAL_IWDG_Init+0x22>
      return HAL_TIMEOUT;
 800099a:	2003      	movs	r0, #3
  }

  /* Return function status */
  return HAL_OK;
}
 800099c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800099e:	2001      	movs	r0, #1
 80009a0:	bd38      	pop	{r3, r4, r5, pc}

080009a2 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80009a2:	6803      	ldr	r3, [r0, #0]
 80009a4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80009a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 80009aa:	2000      	movs	r0, #0
 80009ac:	4770      	bx	lr
	...

080009b0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009b0:	6803      	ldr	r3, [r0, #0]
{
 80009b2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009b6:	07df      	lsls	r7, r3, #31
{
 80009b8:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009ba:	d411      	bmi.n	80009e0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009bc:	682b      	ldr	r3, [r5, #0]
 80009be:	079e      	lsls	r6, r3, #30
 80009c0:	f100 808b 	bmi.w	8000ada <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009c4:	682b      	ldr	r3, [r5, #0]
 80009c6:	071c      	lsls	r4, r3, #28
 80009c8:	f100 80fe 	bmi.w	8000bc8 <HAL_RCC_OscConfig+0x218>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009cc:	682b      	ldr	r3, [r5, #0]
 80009ce:	0758      	lsls	r0, r3, #29
 80009d0:	f100 8147 	bmi.w	8000c62 <HAL_RCC_OscConfig+0x2b2>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009d4:	69aa      	ldr	r2, [r5, #24]
 80009d6:	2a00      	cmp	r2, #0
 80009d8:	f040 81dd 	bne.w	8000d96 <HAL_RCC_OscConfig+0x3e6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80009dc:	2000      	movs	r0, #0
 80009de:	e024      	b.n	8000a2a <HAL_RCC_OscConfig+0x7a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80009e0:	4cbd      	ldr	r4, [pc, #756]	; (8000cd8 <HAL_RCC_OscConfig+0x328>)
 80009e2:	6863      	ldr	r3, [r4, #4]
 80009e4:	f003 030c 	and.w	r3, r3, #12
 80009e8:	2b04      	cmp	r3, #4
 80009ea:	d00a      	beq.n	8000a02 <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80009ec:	6863      	ldr	r3, [r4, #4]
 80009ee:	f003 030c 	and.w	r3, r3, #12
 80009f2:	2b08      	cmp	r3, #8
 80009f4:	d11c      	bne.n	8000a30 <HAL_RCC_OscConfig+0x80>
 80009f6:	6863      	ldr	r3, [r4, #4]
 80009f8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80009fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a00:	d116      	bne.n	8000a30 <HAL_RCC_OscConfig+0x80>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a06:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a0a:	6821      	ldr	r1, [r4, #0]
 8000a0c:	fa93 f3a3 	rbit	r3, r3
 8000a10:	fab3 f383 	clz	r3, r3
 8000a14:	f003 031f 	and.w	r3, r3, #31
 8000a18:	2201      	movs	r2, #1
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	420b      	tst	r3, r1
 8000a20:	d0cc      	beq.n	80009bc <HAL_RCC_OscConfig+0xc>
 8000a22:	686b      	ldr	r3, [r5, #4]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d1c9      	bne.n	80009bc <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000a28:	2001      	movs	r0, #1
}
 8000a2a:	b002      	add	sp, #8
 8000a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a30:	686b      	ldr	r3, [r5, #4]
 8000a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a36:	d11e      	bne.n	8000a76 <HAL_RCC_OscConfig+0xc6>
 8000a38:	6823      	ldr	r3, [r4, #0]
 8000a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a3e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a40:	f7ff fbf6 	bl	8000230 <HAL_GetTick>
 8000a44:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000a48:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a4a:	2701      	movs	r7, #1
 8000a4c:	fa96 f3a6 	rbit	r3, r6
 8000a50:	6822      	ldr	r2, [r4, #0]
 8000a52:	fa96 f3a6 	rbit	r3, r6
 8000a56:	fab3 f383 	clz	r3, r3
 8000a5a:	f003 031f 	and.w	r3, r3, #31
 8000a5e:	fa07 f303 	lsl.w	r3, r7, r3
 8000a62:	4213      	tst	r3, r2
 8000a64:	d1aa      	bne.n	80009bc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a66:	f7ff fbe3 	bl	8000230 <HAL_GetTick>
 8000a6a:	eba0 0008 	sub.w	r0, r0, r8
 8000a6e:	2864      	cmp	r0, #100	; 0x64
 8000a70:	d9ec      	bls.n	8000a4c <HAL_RCC_OscConfig+0x9c>
            return HAL_TIMEOUT;
 8000a72:	2003      	movs	r0, #3
 8000a74:	e7d9      	b.n	8000a2a <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a76:	bb0b      	cbnz	r3, 8000abc <HAL_RCC_OscConfig+0x10c>
 8000a78:	6823      	ldr	r3, [r4, #0]
 8000a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a7e:	6023      	str	r3, [r4, #0]
 8000a80:	6823      	ldr	r3, [r4, #0]
 8000a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a86:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a88:	f7ff fbd2 	bl	8000230 <HAL_GetTick>
 8000a8c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000a90:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a92:	2701      	movs	r7, #1
 8000a94:	fa96 f3a6 	rbit	r3, r6
 8000a98:	6822      	ldr	r2, [r4, #0]
 8000a9a:	fa96 f3a6 	rbit	r3, r6
 8000a9e:	fab3 f383 	clz	r3, r3
 8000aa2:	f003 031f 	and.w	r3, r3, #31
 8000aa6:	fa07 f303 	lsl.w	r3, r7, r3
 8000aaa:	4213      	tst	r3, r2
 8000aac:	d086      	beq.n	80009bc <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000aae:	f7ff fbbf 	bl	8000230 <HAL_GetTick>
 8000ab2:	eba0 0008 	sub.w	r0, r0, r8
 8000ab6:	2864      	cmp	r0, #100	; 0x64
 8000ab8:	d9ec      	bls.n	8000a94 <HAL_RCC_OscConfig+0xe4>
 8000aba:	e7da      	b.n	8000a72 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ac0:	6823      	ldr	r3, [r4, #0]
 8000ac2:	d103      	bne.n	8000acc <HAL_RCC_OscConfig+0x11c>
 8000ac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ac8:	6023      	str	r3, [r4, #0]
 8000aca:	e7b5      	b.n	8000a38 <HAL_RCC_OscConfig+0x88>
 8000acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ad0:	6023      	str	r3, [r4, #0]
 8000ad2:	6823      	ldr	r3, [r4, #0]
 8000ad4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ad8:	e7b1      	b.n	8000a3e <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ada:	4c7f      	ldr	r4, [pc, #508]	; (8000cd8 <HAL_RCC_OscConfig+0x328>)
 8000adc:	6863      	ldr	r3, [r4, #4]
 8000ade:	f013 0f0c 	tst.w	r3, #12
 8000ae2:	d00a      	beq.n	8000afa <HAL_RCC_OscConfig+0x14a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ae4:	6863      	ldr	r3, [r4, #4]
 8000ae6:	f003 030c 	and.w	r3, r3, #12
 8000aea:	2b08      	cmp	r3, #8
 8000aec:	d124      	bne.n	8000b38 <HAL_RCC_OscConfig+0x188>
 8000aee:	6863      	ldr	r3, [r4, #4]
 8000af0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000af8:	d11e      	bne.n	8000b38 <HAL_RCC_OscConfig+0x188>
 8000afa:	2302      	movs	r3, #2
 8000afc:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b00:	6821      	ldr	r1, [r4, #0]
 8000b02:	fa93 f3a3 	rbit	r3, r3
 8000b06:	fab3 f383 	clz	r3, r3
 8000b0a:	f003 031f 	and.w	r3, r3, #31
 8000b0e:	2201      	movs	r2, #1
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	420b      	tst	r3, r1
 8000b16:	d002      	beq.n	8000b1e <HAL_RCC_OscConfig+0x16e>
 8000b18:	68eb      	ldr	r3, [r5, #12]
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d184      	bne.n	8000a28 <HAL_RCC_OscConfig+0x78>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b1e:	6821      	ldr	r1, [r4, #0]
 8000b20:	23f8      	movs	r3, #248	; 0xf8
 8000b22:	fa93 f3a3 	rbit	r3, r3
 8000b26:	fab3 f283 	clz	r2, r3
 8000b2a:	692b      	ldr	r3, [r5, #16]
 8000b2c:	4093      	lsls	r3, r2
 8000b2e:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000b32:	4313      	orrs	r3, r2
 8000b34:	6023      	str	r3, [r4, #0]
 8000b36:	e745      	b.n	80009c4 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b38:	68ea      	ldr	r2, [r5, #12]
 8000b3a:	2601      	movs	r6, #1
 8000b3c:	b30a      	cbz	r2, 8000b82 <HAL_RCC_OscConfig+0x1d2>
 8000b3e:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000b42:	fab3 f383 	clz	r3, r3
 8000b46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	2702      	movs	r7, #2
 8000b52:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000b54:	f7ff fb6c 	bl	8000230 <HAL_GetTick>
 8000b58:	4680      	mov	r8, r0
 8000b5a:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b5e:	6822      	ldr	r2, [r4, #0]
 8000b60:	fa97 f3a7 	rbit	r3, r7
 8000b64:	fab3 f383 	clz	r3, r3
 8000b68:	f003 031f 	and.w	r3, r3, #31
 8000b6c:	fa06 f303 	lsl.w	r3, r6, r3
 8000b70:	4213      	tst	r3, r2
 8000b72:	d1d4      	bne.n	8000b1e <HAL_RCC_OscConfig+0x16e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b74:	f7ff fb5c 	bl	8000230 <HAL_GetTick>
 8000b78:	eba0 0008 	sub.w	r0, r0, r8
 8000b7c:	2802      	cmp	r0, #2
 8000b7e:	d9ec      	bls.n	8000b5a <HAL_RCC_OscConfig+0x1aa>
 8000b80:	e777      	b.n	8000a72 <HAL_RCC_OscConfig+0xc2>
 8000b82:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000b86:	fab3 f383 	clz	r3, r3
 8000b8a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b8e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	2702      	movs	r7, #2
 8000b96:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b98:	f7ff fb4a 	bl	8000230 <HAL_GetTick>
 8000b9c:	4680      	mov	r8, r0
 8000b9e:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ba2:	6822      	ldr	r2, [r4, #0]
 8000ba4:	fa97 f3a7 	rbit	r3, r7
 8000ba8:	fab3 f383 	clz	r3, r3
 8000bac:	f003 031f 	and.w	r3, r3, #31
 8000bb0:	fa06 f303 	lsl.w	r3, r6, r3
 8000bb4:	4213      	tst	r3, r2
 8000bb6:	f43f af05 	beq.w	80009c4 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bba:	f7ff fb39 	bl	8000230 <HAL_GetTick>
 8000bbe:	eba0 0008 	sub.w	r0, r0, r8
 8000bc2:	2802      	cmp	r0, #2
 8000bc4:	d9eb      	bls.n	8000b9e <HAL_RCC_OscConfig+0x1ee>
 8000bc6:	e754      	b.n	8000a72 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bc8:	696a      	ldr	r2, [r5, #20]
 8000bca:	4e43      	ldr	r6, [pc, #268]	; (8000cd8 <HAL_RCC_OscConfig+0x328>)
 8000bcc:	4943      	ldr	r1, [pc, #268]	; (8000cdc <HAL_RCC_OscConfig+0x32c>)
 8000bce:	2401      	movs	r4, #1
 8000bd0:	b31a      	cbz	r2, 8000c1a <HAL_RCC_OscConfig+0x26a>
 8000bd2:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000bd6:	fab3 f383 	clz	r3, r3
 8000bda:	440b      	add	r3, r1
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	2702      	movs	r7, #2
 8000be0:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000be2:	f7ff fb25 	bl	8000230 <HAL_GetTick>
 8000be6:	4680      	mov	r8, r0
 8000be8:	fa97 f3a7 	rbit	r3, r7
 8000bec:	fa97 f3a7 	rbit	r3, r7
 8000bf0:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bf4:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000bf6:	fa97 f3a7 	rbit	r3, r7
 8000bfa:	fab3 f383 	clz	r3, r3
 8000bfe:	f003 031f 	and.w	r3, r3, #31
 8000c02:	fa04 f303 	lsl.w	r3, r4, r3
 8000c06:	4213      	tst	r3, r2
 8000c08:	f47f aee0 	bne.w	80009cc <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c0c:	f7ff fb10 	bl	8000230 <HAL_GetTick>
 8000c10:	eba0 0008 	sub.w	r0, r0, r8
 8000c14:	2802      	cmp	r0, #2
 8000c16:	d9e7      	bls.n	8000be8 <HAL_RCC_OscConfig+0x238>
 8000c18:	e72b      	b.n	8000a72 <HAL_RCC_OscConfig+0xc2>
 8000c1a:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000c1e:	fab3 f383 	clz	r3, r3
 8000c22:	440b      	add	r3, r1
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	2702      	movs	r7, #2
 8000c28:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c2a:	f7ff fb01 	bl	8000230 <HAL_GetTick>
 8000c2e:	4680      	mov	r8, r0
 8000c30:	fa97 f3a7 	rbit	r3, r7
 8000c34:	fa97 f3a7 	rbit	r3, r7
 8000c38:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c3c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000c3e:	fa97 f3a7 	rbit	r3, r7
 8000c42:	fab3 f383 	clz	r3, r3
 8000c46:	f003 031f 	and.w	r3, r3, #31
 8000c4a:	fa04 f303 	lsl.w	r3, r4, r3
 8000c4e:	4213      	tst	r3, r2
 8000c50:	f43f aebc 	beq.w	80009cc <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c54:	f7ff faec 	bl	8000230 <HAL_GetTick>
 8000c58:	eba0 0008 	sub.w	r0, r0, r8
 8000c5c:	2802      	cmp	r0, #2
 8000c5e:	d9e7      	bls.n	8000c30 <HAL_RCC_OscConfig+0x280>
 8000c60:	e707      	b.n	8000a72 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c62:	4c1d      	ldr	r4, [pc, #116]	; (8000cd8 <HAL_RCC_OscConfig+0x328>)
 8000c64:	69e3      	ldr	r3, [r4, #28]
 8000c66:	00d9      	lsls	r1, r3, #3
 8000c68:	d434      	bmi.n	8000cd4 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c6a:	69e3      	ldr	r3, [r4, #28]
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c70:	61e3      	str	r3, [r4, #28]
 8000c72:	69e3      	ldr	r3, [r4, #28]
 8000c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c78:	9301      	str	r3, [sp, #4]
 8000c7a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c7c:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c7e:	4f18      	ldr	r7, [pc, #96]	; (8000ce0 <HAL_RCC_OscConfig+0x330>)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	05da      	lsls	r2, r3, #23
 8000c84:	d52e      	bpl.n	8000ce4 <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c86:	68ab      	ldr	r3, [r5, #8]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d13c      	bne.n	8000d06 <HAL_RCC_OscConfig+0x356>
 8000c8c:	6a23      	ldr	r3, [r4, #32]
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000c94:	f7ff facc 	bl	8000230 <HAL_GetTick>
 8000c98:	2702      	movs	r7, #2
 8000c9a:	4682      	mov	sl, r0
 8000c9c:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c9e:	f04f 0801 	mov.w	r8, #1
 8000ca2:	fa97 f3a7 	rbit	r3, r7
 8000ca6:	fa97 f3a7 	rbit	r3, r7
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d06b      	beq.n	8000d86 <HAL_RCC_OscConfig+0x3d6>
 8000cae:	6a22      	ldr	r2, [r4, #32]
 8000cb0:	fa99 f3a9 	rbit	r3, r9
 8000cb4:	fab3 f383 	clz	r3, r3
 8000cb8:	f003 031f 	and.w	r3, r3, #31
 8000cbc:	fa08 f303 	lsl.w	r3, r8, r3
 8000cc0:	4213      	tst	r3, r2
 8000cc2:	d057      	beq.n	8000d74 <HAL_RCC_OscConfig+0x3c4>
    if(pwrclkchanged == SET)
 8000cc4:	2e00      	cmp	r6, #0
 8000cc6:	f43f ae85 	beq.w	80009d4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cca:	69e3      	ldr	r3, [r4, #28]
 8000ccc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	61e3      	str	r3, [r4, #28]
 8000cd2:	e67f      	b.n	80009d4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000cd4:	2600      	movs	r6, #0
 8000cd6:	e7d2      	b.n	8000c7e <HAL_RCC_OscConfig+0x2ce>
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	10908120 	.word	0x10908120
 8000ce0:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cea:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000cec:	f7ff faa0 	bl	8000230 <HAL_GetTick>
 8000cf0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	05db      	lsls	r3, r3, #23
 8000cf6:	d4c6      	bmi.n	8000c86 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cf8:	f7ff fa9a 	bl	8000230 <HAL_GetTick>
 8000cfc:	eba0 0008 	sub.w	r0, r0, r8
 8000d00:	2864      	cmp	r0, #100	; 0x64
 8000d02:	d9f6      	bls.n	8000cf2 <HAL_RCC_OscConfig+0x342>
 8000d04:	e6b5      	b.n	8000a72 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d06:	bb3b      	cbnz	r3, 8000d58 <HAL_RCC_OscConfig+0x3a8>
 8000d08:	6a23      	ldr	r3, [r4, #32]
 8000d0a:	f023 0301 	bic.w	r3, r3, #1
 8000d0e:	6223      	str	r3, [r4, #32]
 8000d10:	6a23      	ldr	r3, [r4, #32]
 8000d12:	f023 0304 	bic.w	r3, r3, #4
 8000d16:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000d18:	f7ff fa8a 	bl	8000230 <HAL_GetTick>
 8000d1c:	2702      	movs	r7, #2
 8000d1e:	4682      	mov	sl, r0
 8000d20:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d22:	f04f 0801 	mov.w	r8, #1
 8000d26:	fa97 f3a7 	rbit	r3, r7
 8000d2a:	fa97 f3a7 	rbit	r3, r7
 8000d2e:	b373      	cbz	r3, 8000d8e <HAL_RCC_OscConfig+0x3de>
 8000d30:	6a22      	ldr	r2, [r4, #32]
 8000d32:	fa99 f3a9 	rbit	r3, r9
 8000d36:	fab3 f383 	clz	r3, r3
 8000d3a:	f003 031f 	and.w	r3, r3, #31
 8000d3e:	fa08 f303 	lsl.w	r3, r8, r3
 8000d42:	4213      	tst	r3, r2
 8000d44:	d0be      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d46:	f7ff fa73 	bl	8000230 <HAL_GetTick>
 8000d4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d4e:	eba0 000a 	sub.w	r0, r0, sl
 8000d52:	4298      	cmp	r0, r3
 8000d54:	d9e7      	bls.n	8000d26 <HAL_RCC_OscConfig+0x376>
 8000d56:	e68c      	b.n	8000a72 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d58:	2b05      	cmp	r3, #5
 8000d5a:	6a23      	ldr	r3, [r4, #32]
 8000d5c:	d103      	bne.n	8000d66 <HAL_RCC_OscConfig+0x3b6>
 8000d5e:	f043 0304 	orr.w	r3, r3, #4
 8000d62:	6223      	str	r3, [r4, #32]
 8000d64:	e792      	b.n	8000c8c <HAL_RCC_OscConfig+0x2dc>
 8000d66:	f023 0301 	bic.w	r3, r3, #1
 8000d6a:	6223      	str	r3, [r4, #32]
 8000d6c:	6a23      	ldr	r3, [r4, #32]
 8000d6e:	f023 0304 	bic.w	r3, r3, #4
 8000d72:	e78e      	b.n	8000c92 <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d74:	f7ff fa5c 	bl	8000230 <HAL_GetTick>
 8000d78:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d7c:	eba0 000a 	sub.w	r0, r0, sl
 8000d80:	4298      	cmp	r0, r3
 8000d82:	d98e      	bls.n	8000ca2 <HAL_RCC_OscConfig+0x2f2>
 8000d84:	e675      	b.n	8000a72 <HAL_RCC_OscConfig+0xc2>
 8000d86:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d8c:	e790      	b.n	8000cb0 <HAL_RCC_OscConfig+0x300>
 8000d8e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d92:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d94:	e7cd      	b.n	8000d32 <HAL_RCC_OscConfig+0x382>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d96:	4c44      	ldr	r4, [pc, #272]	; (8000ea8 <HAL_RCC_OscConfig+0x4f8>)
 8000d98:	6863      	ldr	r3, [r4, #4]
 8000d9a:	f003 030c 	and.w	r3, r3, #12
 8000d9e:	2b08      	cmp	r3, #8
 8000da0:	f43f ae42 	beq.w	8000a28 <HAL_RCC_OscConfig+0x78>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000da4:	2a02      	cmp	r2, #2
 8000da6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000daa:	d158      	bne.n	8000e5e <HAL_RCC_OscConfig+0x4ae>
 8000dac:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000db0:	fab3 f383 	clz	r3, r3
 8000db4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000db8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000dc2:	f7ff fa35 	bl	8000230 <HAL_GetTick>
 8000dc6:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000dca:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dcc:	2601      	movs	r6, #1
 8000dce:	fa97 f3a7 	rbit	r3, r7
 8000dd2:	6822      	ldr	r2, [r4, #0]
 8000dd4:	fa97 f3a7 	rbit	r3, r7
 8000dd8:	fab3 f383 	clz	r3, r3
 8000ddc:	f003 031f 	and.w	r3, r3, #31
 8000de0:	fa06 f303 	lsl.w	r3, r6, r3
 8000de4:	4213      	tst	r3, r2
 8000de6:	d133      	bne.n	8000e50 <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000de8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000dea:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000dec:	f023 030f 	bic.w	r3, r3, #15
 8000df0:	4313      	orrs	r3, r2
 8000df2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000df4:	6862      	ldr	r2, [r4, #4]
 8000df6:	6a2b      	ldr	r3, [r5, #32]
 8000df8:	69e9      	ldr	r1, [r5, #28]
 8000dfa:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8000dfe:	430b      	orrs	r3, r1
 8000e00:	4313      	orrs	r3, r2
 8000e02:	6063      	str	r3, [r4, #4]
 8000e04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e08:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000e0c:	fab3 f383 	clz	r3, r3
 8000e10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000e1e:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000e20:	f7ff fa06 	bl	8000230 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e24:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8000e26:	4607      	mov	r7, r0
 8000e28:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e2c:	6822      	ldr	r2, [r4, #0]
 8000e2e:	fa95 f3a5 	rbit	r3, r5
 8000e32:	fab3 f383 	clz	r3, r3
 8000e36:	f003 031f 	and.w	r3, r3, #31
 8000e3a:	fa06 f303 	lsl.w	r3, r6, r3
 8000e3e:	4213      	tst	r3, r2
 8000e40:	f47f adcc 	bne.w	80009dc <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e44:	f7ff f9f4 	bl	8000230 <HAL_GetTick>
 8000e48:	1bc0      	subs	r0, r0, r7
 8000e4a:	2802      	cmp	r0, #2
 8000e4c:	d9ec      	bls.n	8000e28 <HAL_RCC_OscConfig+0x478>
 8000e4e:	e610      	b.n	8000a72 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e50:	f7ff f9ee 	bl	8000230 <HAL_GetTick>
 8000e54:	eba0 0008 	sub.w	r0, r0, r8
 8000e58:	2802      	cmp	r0, #2
 8000e5a:	d9b8      	bls.n	8000dce <HAL_RCC_OscConfig+0x41e>
 8000e5c:	e609      	b.n	8000a72 <HAL_RCC_OscConfig+0xc2>
 8000e5e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000e62:	fab3 f383 	clz	r3, r3
 8000e66:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e6a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e74:	f7ff f9dc 	bl	8000230 <HAL_GetTick>
 8000e78:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000e7c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e7e:	2601      	movs	r6, #1
 8000e80:	fa95 f3a5 	rbit	r3, r5
 8000e84:	6822      	ldr	r2, [r4, #0]
 8000e86:	fa95 f3a5 	rbit	r3, r5
 8000e8a:	fab3 f383 	clz	r3, r3
 8000e8e:	f003 031f 	and.w	r3, r3, #31
 8000e92:	fa06 f303 	lsl.w	r3, r6, r3
 8000e96:	4213      	tst	r3, r2
 8000e98:	f43f ada0 	beq.w	80009dc <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e9c:	f7ff f9c8 	bl	8000230 <HAL_GetTick>
 8000ea0:	1bc0      	subs	r0, r0, r7
 8000ea2:	2802      	cmp	r0, #2
 8000ea4:	d9ec      	bls.n	8000e80 <HAL_RCC_OscConfig+0x4d0>
 8000ea6:	e5e4      	b.n	8000a72 <HAL_RCC_OscConfig+0xc2>
 8000ea8:	40021000 	.word	0x40021000

08000eac <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000eac:	4911      	ldr	r1, [pc, #68]	; (8000ef4 <HAL_RCC_GetSysClockFreq+0x48>)
 8000eae:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000eb0:	f003 020c 	and.w	r2, r3, #12
 8000eb4:	2a08      	cmp	r2, #8
 8000eb6:	d11a      	bne.n	8000eee <HAL_RCC_GetSysClockFreq+0x42>
 8000eb8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000ebc:	fa92 f2a2 	rbit	r2, r2
 8000ec0:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000ec2:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000ec6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8000ec8:	fa90 f0a0 	rbit	r0, r0
 8000ecc:	fab0 f080 	clz	r0, r0
 8000ed0:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000ed4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000ed8:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000eda:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000edc:	4a06      	ldr	r2, [pc, #24]	; (8000ef8 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000ede:	4807      	ldr	r0, [pc, #28]	; (8000efc <HAL_RCC_GetSysClockFreq+0x50>)
 8000ee0:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000ee2:	4807      	ldr	r0, [pc, #28]	; (8000f00 <HAL_RCC_GetSysClockFreq+0x54>)
 8000ee4:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000ee8:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000eea:	4348      	muls	r0, r1
 8000eec:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8000eee:	4804      	ldr	r0, [pc, #16]	; (8000f00 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	080036fc 	.word	0x080036fc
 8000efc:	0800370c 	.word	0x0800370c
 8000f00:	007a1200 	.word	0x007a1200

08000f04 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f04:	4a5c      	ldr	r2, [pc, #368]	; (8001078 <HAL_RCC_ClockConfig+0x174>)
 8000f06:	6813      	ldr	r3, [r2, #0]
 8000f08:	f003 0307 	and.w	r3, r3, #7
 8000f0c:	428b      	cmp	r3, r1
{
 8000f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f12:	4606      	mov	r6, r0
 8000f14:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f16:	d330      	bcc.n	8000f7a <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f18:	6832      	ldr	r2, [r6, #0]
 8000f1a:	0791      	lsls	r1, r2, #30
 8000f1c:	d43a      	bmi.n	8000f94 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f1e:	07d2      	lsls	r2, r2, #31
 8000f20:	d440      	bmi.n	8000fa4 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f22:	4a55      	ldr	r2, [pc, #340]	; (8001078 <HAL_RCC_ClockConfig+0x174>)
 8000f24:	6813      	ldr	r3, [r2, #0]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	429d      	cmp	r5, r3
 8000f2c:	f0c0 8092 	bcc.w	8001054 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f30:	6832      	ldr	r2, [r6, #0]
 8000f32:	4c52      	ldr	r4, [pc, #328]	; (800107c <HAL_RCC_ClockConfig+0x178>)
 8000f34:	f012 0f04 	tst.w	r2, #4
 8000f38:	f040 8097 	bne.w	800106a <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f3c:	0713      	lsls	r3, r2, #28
 8000f3e:	d506      	bpl.n	8000f4e <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000f40:	6863      	ldr	r3, [r4, #4]
 8000f42:	6932      	ldr	r2, [r6, #16]
 8000f44:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000f48:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f4c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000f4e:	f7ff ffad 	bl	8000eac <HAL_RCC_GetSysClockFreq>
 8000f52:	6863      	ldr	r3, [r4, #4]
 8000f54:	22f0      	movs	r2, #240	; 0xf0
 8000f56:	fa92 f2a2 	rbit	r2, r2
 8000f5a:	fab2 f282 	clz	r2, r2
 8000f5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f62:	40d3      	lsrs	r3, r2
 8000f64:	4a46      	ldr	r2, [pc, #280]	; (8001080 <HAL_RCC_ClockConfig+0x17c>)
 8000f66:	5cd3      	ldrb	r3, [r2, r3]
 8000f68:	40d8      	lsrs	r0, r3
 8000f6a:	4b46      	ldr	r3, [pc, #280]	; (8001084 <HAL_RCC_ClockConfig+0x180>)
 8000f6c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f7ff f930 	bl	80001d4 <HAL_InitTick>
  return HAL_OK;
 8000f74:	2000      	movs	r0, #0
}
 8000f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f7a:	6813      	ldr	r3, [r2, #0]
 8000f7c:	f023 0307 	bic.w	r3, r3, #7
 8000f80:	430b      	orrs	r3, r1
 8000f82:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f84:	6813      	ldr	r3, [r2, #0]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d0c4      	beq.n	8000f18 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000f8e:	2001      	movs	r0, #1
 8000f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f94:	4939      	ldr	r1, [pc, #228]	; (800107c <HAL_RCC_ClockConfig+0x178>)
 8000f96:	68b0      	ldr	r0, [r6, #8]
 8000f98:	684b      	ldr	r3, [r1, #4]
 8000f9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f9e:	4303      	orrs	r3, r0
 8000fa0:	604b      	str	r3, [r1, #4]
 8000fa2:	e7bc      	b.n	8000f1e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fa4:	6872      	ldr	r2, [r6, #4]
 8000fa6:	4c35      	ldr	r4, [pc, #212]	; (800107c <HAL_RCC_ClockConfig+0x178>)
 8000fa8:	2a01      	cmp	r2, #1
 8000faa:	d128      	bne.n	8000ffe <HAL_RCC_ClockConfig+0xfa>
 8000fac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fb0:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb4:	6821      	ldr	r1, [r4, #0]
 8000fb6:	fa93 f3a3 	rbit	r3, r3
 8000fba:	fab3 f383 	clz	r3, r3
 8000fbe:	f003 031f 	and.w	r3, r3, #31
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc8:	d0e1      	beq.n	8000f8e <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fca:	6863      	ldr	r3, [r4, #4]
 8000fcc:	f023 0303 	bic.w	r3, r3, #3
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8000fd4:	f7ff f92c 	bl	8000230 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fd8:	6873      	ldr	r3, [r6, #4]
 8000fda:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000fdc:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fde:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fe2:	d11f      	bne.n	8001024 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fe4:	6863      	ldr	r3, [r4, #4]
 8000fe6:	f003 030c 	and.w	r3, r3, #12
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	d099      	beq.n	8000f22 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fee:	f7ff f91f 	bl	8000230 <HAL_GetTick>
 8000ff2:	1bc0      	subs	r0, r0, r7
 8000ff4:	4540      	cmp	r0, r8
 8000ff6:	d9f5      	bls.n	8000fe4 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ffe:	2a02      	cmp	r2, #2
 8001000:	bf0c      	ite	eq
 8001002:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001006:	2302      	movne	r3, #2
 8001008:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800100c:	6820      	ldr	r0, [r4, #0]
 800100e:	fa93 f3a3 	rbit	r3, r3
 8001012:	fab3 f383 	clz	r3, r3
 8001016:	f003 031f 	and.w	r3, r3, #31
 800101a:	2101      	movs	r1, #1
 800101c:	fa01 f303 	lsl.w	r3, r1, r3
 8001020:	4203      	tst	r3, r0
 8001022:	e7d1      	b.n	8000fc8 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001024:	2b02      	cmp	r3, #2
 8001026:	d110      	bne.n	800104a <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001028:	6863      	ldr	r3, [r4, #4]
 800102a:	f003 030c 	and.w	r3, r3, #12
 800102e:	2b08      	cmp	r3, #8
 8001030:	f43f af77 	beq.w	8000f22 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001034:	f7ff f8fc 	bl	8000230 <HAL_GetTick>
 8001038:	1bc0      	subs	r0, r0, r7
 800103a:	4540      	cmp	r0, r8
 800103c:	d9f4      	bls.n	8001028 <HAL_RCC_ClockConfig+0x124>
 800103e:	e7db      	b.n	8000ff8 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001040:	f7ff f8f6 	bl	8000230 <HAL_GetTick>
 8001044:	1bc0      	subs	r0, r0, r7
 8001046:	4540      	cmp	r0, r8
 8001048:	d8d6      	bhi.n	8000ff8 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800104a:	6863      	ldr	r3, [r4, #4]
 800104c:	f013 0f0c 	tst.w	r3, #12
 8001050:	d1f6      	bne.n	8001040 <HAL_RCC_ClockConfig+0x13c>
 8001052:	e766      	b.n	8000f22 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001054:	6813      	ldr	r3, [r2, #0]
 8001056:	f023 0307 	bic.w	r3, r3, #7
 800105a:	432b      	orrs	r3, r5
 800105c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800105e:	6813      	ldr	r3, [r2, #0]
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	429d      	cmp	r5, r3
 8001066:	d192      	bne.n	8000f8e <HAL_RCC_ClockConfig+0x8a>
 8001068:	e762      	b.n	8000f30 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800106a:	6863      	ldr	r3, [r4, #4]
 800106c:	68f1      	ldr	r1, [r6, #12]
 800106e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001072:	430b      	orrs	r3, r1
 8001074:	6063      	str	r3, [r4, #4]
 8001076:	e761      	b.n	8000f3c <HAL_RCC_ClockConfig+0x38>
 8001078:	40022000 	.word	0x40022000
 800107c:	40021000 	.word	0x40021000
 8001080:	08003737 	.word	0x08003737
 8001084:	20000050 	.word	0x20000050

08001088 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001088:	4b01      	ldr	r3, [pc, #4]	; (8001090 <HAL_RCC_GetHCLKFreq+0x8>)
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000050 	.word	0x20000050

08001094 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001094:	6803      	ldr	r3, [r0, #0]
{
 8001096:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800109a:	03dd      	lsls	r5, r3, #15
{
 800109c:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800109e:	d523      	bpl.n	80010e8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010a0:	4d8e      	ldr	r5, [pc, #568]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80010a2:	69eb      	ldr	r3, [r5, #28]
 80010a4:	00d8      	lsls	r0, r3, #3
 80010a6:	f100 80bc 	bmi.w	8001222 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	69eb      	ldr	r3, [r5, #28]
 80010ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b0:	61eb      	str	r3, [r5, #28]
 80010b2:	69eb      	ldr	r3, [r5, #28]
 80010b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b8:	9301      	str	r3, [sp, #4]
 80010ba:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80010bc:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010be:	4f88      	ldr	r7, [pc, #544]	; (80012e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	05d9      	lsls	r1, r3, #23
 80010c4:	f140 80af 	bpl.w	8001226 <HAL_RCCEx_PeriphCLKConfig+0x192>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80010c8:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80010ca:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80010ce:	f040 80bf 	bne.w	8001250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80010d2:	6a2b      	ldr	r3, [r5, #32]
 80010d4:	6862      	ldr	r2, [r4, #4]
 80010d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010da:	4313      	orrs	r3, r2
 80010dc:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80010de:	b11e      	cbz	r6, 80010e8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010e0:	69eb      	ldr	r3, [r5, #28]
 80010e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010e6:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80010e8:	6820      	ldr	r0, [r4, #0]
 80010ea:	07c5      	lsls	r5, r0, #31
 80010ec:	d506      	bpl.n	80010fc <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80010ee:	4a7b      	ldr	r2, [pc, #492]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80010f0:	68a1      	ldr	r1, [r4, #8]
 80010f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80010f4:	f023 0303 	bic.w	r3, r3, #3
 80010f8:	430b      	orrs	r3, r1
 80010fa:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80010fc:	0781      	lsls	r1, r0, #30
 80010fe:	d506      	bpl.n	800110e <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001100:	4a76      	ldr	r2, [pc, #472]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001102:	68e1      	ldr	r1, [r4, #12]
 8001104:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001106:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800110a:	430b      	orrs	r3, r1
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800110e:	0742      	lsls	r2, r0, #29
 8001110:	d506      	bpl.n	8001120 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001112:	4a72      	ldr	r2, [pc, #456]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001114:	6921      	ldr	r1, [r4, #16]
 8001116:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001118:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800111c:	430b      	orrs	r3, r1
 800111e:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001120:	0683      	lsls	r3, r0, #26
 8001122:	d506      	bpl.n	8001132 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001124:	4a6d      	ldr	r2, [pc, #436]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001126:	69e1      	ldr	r1, [r4, #28]
 8001128:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800112a:	f023 0310 	bic.w	r3, r3, #16
 800112e:	430b      	orrs	r3, r1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001132:	0387      	lsls	r7, r0, #14
 8001134:	d506      	bpl.n	8001144 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001136:	4a69      	ldr	r2, [pc, #420]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001138:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800113a:	6853      	ldr	r3, [r2, #4]
 800113c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001140:	430b      	orrs	r3, r1
 8001142:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001144:	0646      	lsls	r6, r0, #25
 8001146:	d506      	bpl.n	8001156 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001148:	4a64      	ldr	r2, [pc, #400]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800114a:	6a21      	ldr	r1, [r4, #32]
 800114c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800114e:	f023 0320 	bic.w	r3, r3, #32
 8001152:	430b      	orrs	r3, r1
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001156:	0345      	lsls	r5, r0, #13
 8001158:	d506      	bpl.n	8001168 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800115a:	4a60      	ldr	r2, [pc, #384]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800115c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800115e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001160:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001164:	430b      	orrs	r3, r1
 8001166:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001168:	0701      	lsls	r1, r0, #28
 800116a:	d506      	bpl.n	800117a <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800116c:	4a5b      	ldr	r2, [pc, #364]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800116e:	6961      	ldr	r1, [r4, #20]
 8001170:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001172:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001176:	430b      	orrs	r3, r1
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800117a:	06c2      	lsls	r2, r0, #27
 800117c:	d506      	bpl.n	800118c <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800117e:	4a57      	ldr	r2, [pc, #348]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001180:	69a1      	ldr	r1, [r4, #24]
 8001182:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001184:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001188:	430b      	orrs	r3, r1
 800118a:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800118c:	0583      	lsls	r3, r0, #22
 800118e:	d506      	bpl.n	800119e <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001190:	4a52      	ldr	r2, [pc, #328]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001192:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001194:	6853      	ldr	r3, [r2, #4]
 8001196:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800119a:	430b      	orrs	r3, r1
 800119c:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800119e:	0607      	lsls	r7, r0, #24
 80011a0:	d506      	bpl.n	80011b0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80011a2:	4a4e      	ldr	r2, [pc, #312]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80011a4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80011a6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80011a8:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80011ac:	430b      	orrs	r3, r1
 80011ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80011b0:	04c6      	lsls	r6, r0, #19
 80011b2:	d506      	bpl.n	80011c2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80011b4:	4a49      	ldr	r2, [pc, #292]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80011b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80011b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011be:	430b      	orrs	r3, r1
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80011c2:	02c5      	lsls	r5, r0, #11
 80011c4:	d506      	bpl.n	80011d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80011c6:	4a45      	ldr	r2, [pc, #276]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80011c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011d0:	430b      	orrs	r3, r1
 80011d2:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80011d4:	0281      	lsls	r1, r0, #10
 80011d6:	d506      	bpl.n	80011e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80011d8:	4a40      	ldr	r2, [pc, #256]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80011da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80011dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011de:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80011e2:	430b      	orrs	r3, r1
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80011e6:	0242      	lsls	r2, r0, #9
 80011e8:	d506      	bpl.n	80011f8 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80011ea:	4a3c      	ldr	r2, [pc, #240]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80011ec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80011ee:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80011f4:	430b      	orrs	r3, r1
 80011f6:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80011f8:	0203      	lsls	r3, r0, #8
 80011fa:	d506      	bpl.n	800120a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80011fc:	4a37      	ldr	r2, [pc, #220]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80011fe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001200:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001202:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001206:	430b      	orrs	r3, r1
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800120a:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800120e:	d01c      	beq.n	800124a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8001210:	4a32      	ldr	r2, [pc, #200]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001212:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001214:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001216:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800121a:	430b      	orrs	r3, r1
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800121e:	2000      	movs	r0, #0
 8001220:	e013      	b.n	800124a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    FlagStatus       pwrclkchanged = RESET;
 8001222:	2600      	movs	r6, #0
 8001224:	e74b      	b.n	80010be <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800122e:	f7fe ffff 	bl	8000230 <HAL_GetTick>
 8001232:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	05da      	lsls	r2, r3, #23
 8001238:	f53f af46 	bmi.w	80010c8 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800123c:	f7fe fff8 	bl	8000230 <HAL_GetTick>
 8001240:	eba0 0008 	sub.w	r0, r0, r8
 8001244:	2864      	cmp	r0, #100	; 0x64
 8001246:	d9f5      	bls.n	8001234 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
          return HAL_TIMEOUT;
 8001248:	2003      	movs	r0, #3
}
 800124a:	b002      	add	sp, #8
 800124c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001250:	6862      	ldr	r2, [r4, #4]
 8001252:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001256:	4293      	cmp	r3, r2
 8001258:	f43f af3b 	beq.w	80010d2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800125c:	6a29      	ldr	r1, [r5, #32]
 800125e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001262:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8001266:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 800126a:	f8df e078 	ldr.w	lr, [pc, #120]	; 80012e4 <HAL_RCCEx_PeriphCLKConfig+0x250>
 800126e:	fab2 f282 	clz	r2, r2
 8001272:	4472      	add	r2, lr
 8001274:	0092      	lsls	r2, r2, #2
 8001276:	2701      	movs	r7, #1
 8001278:	6017      	str	r7, [r2, #0]
 800127a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800127e:	fab3 f383 	clz	r3, r3
 8001282:	4473      	add	r3, lr
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800128a:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 800128c:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800128e:	f57f af20 	bpl.w	80010d2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8001292:	f7fe ffcd 	bl	8000230 <HAL_GetTick>
 8001296:	f04f 0802 	mov.w	r8, #2
 800129a:	4682      	mov	sl, r0
 800129c:	46c1      	mov	r9, r8
 800129e:	fa98 f3a8 	rbit	r3, r8
 80012a2:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a6:	b1a3      	cbz	r3, 80012d2 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80012a8:	6a2a      	ldr	r2, [r5, #32]
 80012aa:	fa99 f3a9 	rbit	r3, r9
 80012ae:	fab3 f383 	clz	r3, r3
 80012b2:	f003 031f 	and.w	r3, r3, #31
 80012b6:	fa07 f303 	lsl.w	r3, r7, r3
 80012ba:	4213      	tst	r3, r2
 80012bc:	f47f af09 	bne.w	80010d2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c0:	f7fe ffb6 	bl	8000230 <HAL_GetTick>
 80012c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80012c8:	eba0 000a 	sub.w	r0, r0, sl
 80012cc:	4298      	cmp	r0, r3
 80012ce:	d9e6      	bls.n	800129e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80012d0:	e7ba      	b.n	8001248 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80012d2:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80012d8:	e7e7      	b.n	80012aa <HAL_RCCEx_PeriphCLKConfig+0x216>
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40007000 	.word	0x40007000
 80012e4:	10908100 	.word	0x10908100

080012e8 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80012e8:	6803      	ldr	r3, [r0, #0]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80012f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80012f2:	6842      	ldr	r2, [r0, #4]
 80012f4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80012f8:	d10a      	bne.n	8001310 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 80012fa:	6882      	ldr	r2, [r0, #8]
 80012fc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001300:	d002      	beq.n	8001308 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001302:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001306:	d103      	bne.n	8001310 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800130e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001310:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001312:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001316:	d107      	bne.n	8001328 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001326:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001328:	2301      	movs	r3, #1
 800132a:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800132e:	2300      	movs	r3, #0
 8001330:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8001334:	2003      	movs	r0, #3
 8001336:	4770      	bx	lr

08001338 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
 8001338:	b570      	push	{r4, r5, r6, lr}
 800133a:	4605      	mov	r5, r0
 800133c:	460c      	mov	r4, r1
 800133e:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001340:	682b      	ldr	r3, [r5, #0]
 8001342:	6898      	ldr	r0, [r3, #8]
 8001344:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001348:	d00d      	beq.n	8001366 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x2e>
    if (Timeout != HAL_MAX_DELAY)
 800134a:	1c62      	adds	r2, r4, #1
 800134c:	d0f9      	beq.n	8001342 <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800134e:	b924      	cbnz	r4, 800135a <SPI_WaitFlagStateUntilTimeout.constprop.10+0x22>
 8001350:	4628      	mov	r0, r5
}
 8001352:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001356:	f7ff bfc7 	b.w	80012e8 <SPI_WaitFifoStateUntilTimeout.part.1>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800135a:	f7fe ff69 	bl	8000230 <HAL_GetTick>
 800135e:	1b80      	subs	r0, r0, r6
 8001360:	4284      	cmp	r4, r0
 8001362:	d8ed      	bhi.n	8001340 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 8001364:	e7f4      	b.n	8001350 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x18>
}
 8001366:	bd70      	pop	{r4, r5, r6, pc}

08001368 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800136a:	4606      	mov	r6, r0
 800136c:	460c      	mov	r4, r1
 800136e:	4615      	mov	r5, r2
 8001370:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8001372:	6831      	ldr	r1, [r6, #0]
 8001374:	6888      	ldr	r0, [r1, #8]
 8001376:	4020      	ands	r0, r4
 8001378:	d00e      	beq.n	8001398 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x30>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800137a:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800137e:	bf01      	itttt	eq
 8001380:	7b0a      	ldrbeq	r2, [r1, #12]
 8001382:	b2d2      	uxtbeq	r2, r2
 8001384:	f88d 2007 	strbeq.w	r2, [sp, #7]
      UNUSED(tmpreg);
 8001388:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
    if (Timeout != HAL_MAX_DELAY)
 800138c:	1c6b      	adds	r3, r5, #1
 800138e:	d0f1      	beq.n	8001374 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001390:	b925      	cbnz	r5, 800139c <SPI_WaitFifoStateUntilTimeout.constprop.11+0x34>
 8001392:	4630      	mov	r0, r6
 8001394:	f7ff ffa8 	bl	80012e8 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8001398:	b003      	add	sp, #12
 800139a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800139c:	f7fe ff48 	bl	8000230 <HAL_GetTick>
 80013a0:	1bc0      	subs	r0, r0, r7
 80013a2:	4285      	cmp	r5, r0
 80013a4:	d8e5      	bhi.n	8001372 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 80013a6:	e7f4      	b.n	8001392 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x2a>

080013a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80013a8:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80013aa:	4613      	mov	r3, r2
{
 80013ac:	460d      	mov	r5, r1
 80013ae:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80013b0:	460a      	mov	r2, r1
 80013b2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 80013b6:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80013b8:	f7ff ffd6 	bl	8001368 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 80013bc:	b128      	cbz	r0, 80013ca <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80013be:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80013c0:	f043 0320 	orr.w	r3, r3, #32
 80013c4:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 80013c6:	2003      	movs	r0, #3
 80013c8:	e00f      	b.n	80013ea <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80013ca:	4632      	mov	r2, r6
 80013cc:	4629      	mov	r1, r5
 80013ce:	4620      	mov	r0, r4
 80013d0:	f7ff ffb2 	bl	8001338 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 80013d4:	2800      	cmp	r0, #0
 80013d6:	d1f2      	bne.n	80013be <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80013d8:	4633      	mov	r3, r6
 80013da:	462a      	mov	r2, r5
 80013dc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80013e0:	4620      	mov	r0, r4
 80013e2:	f7ff ffc1 	bl	8001368 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 80013e6:	2800      	cmp	r0, #0
 80013e8:	d1e9      	bne.n	80013be <SPI_EndRxTxTransaction+0x16>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 80013ea:	bd70      	pop	{r4, r5, r6, pc}

080013ec <HAL_SPI_Init>:
{
 80013ec:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 80013ee:	4604      	mov	r4, r0
 80013f0:	2800      	cmp	r0, #0
 80013f2:	d04e      	beq.n	8001492 <HAL_SPI_Init+0xa6>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80013f8:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80013fc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001400:	b91b      	cbnz	r3, 800140a <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001402:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8001406:	f001 ffe7 	bl	80033d8 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800140a:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800140c:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800140e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001412:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001414:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8001416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800141a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800141e:	600b      	str	r3, [r1, #0]
 8001420:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001424:	d932      	bls.n	800148c <HAL_SPI_Init+0xa0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001426:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001428:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800142c:	bf18      	it	ne
 800142e:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001430:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001432:	b92b      	cbnz	r3, 8001440 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001434:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001438:	bf8c      	ite	hi
 800143a:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800143c:	2301      	movls	r3, #1
 800143e:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001440:	68a6      	ldr	r6, [r4, #8]
 8001442:	6863      	ldr	r3, [r4, #4]
 8001444:	69a5      	ldr	r5, [r4, #24]
 8001446:	4333      	orrs	r3, r6
 8001448:	6926      	ldr	r6, [r4, #16]
 800144a:	4333      	orrs	r3, r6
 800144c:	6966      	ldr	r6, [r4, #20]
 800144e:	4333      	orrs	r3, r6
 8001450:	69e6      	ldr	r6, [r4, #28]
 8001452:	4333      	orrs	r3, r6
 8001454:	6a26      	ldr	r6, [r4, #32]
 8001456:	4333      	orrs	r3, r6
 8001458:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800145a:	4333      	orrs	r3, r6
 800145c:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8001460:	4333      	orrs	r3, r6
 8001462:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001464:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001466:	431a      	orrs	r2, r3
 8001468:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800146a:	0c2d      	lsrs	r5, r5, #16
 800146c:	431a      	orrs	r2, r3
 800146e:	f005 0504 	and.w	r5, r5, #4
 8001472:	432a      	orrs	r2, r5
 8001474:	4302      	orrs	r2, r0
 8001476:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001478:	69cb      	ldr	r3, [r1, #28]
 800147a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800147e:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001480:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001482:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001484:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001486:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 800148a:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800148c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001490:	e7cc      	b.n	800142c <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8001492:	2001      	movs	r0, #1
}
 8001494:	bd70      	pop	{r4, r5, r6, pc}

08001496 <HAL_SPI_Transmit>:
{
 8001496:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800149a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 800149c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80014a0:	2b01      	cmp	r3, #1
{
 80014a2:	4604      	mov	r4, r0
 80014a4:	460d      	mov	r5, r1
 80014a6:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80014a8:	f000 80b1 	beq.w	800160e <HAL_SPI_Transmit+0x178>
 80014ac:	2301      	movs	r3, #1
 80014ae:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80014b2:	f7fe febd 	bl	8000230 <HAL_GetTick>
 80014b6:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80014b8:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80014bc:	b2c0      	uxtb	r0, r0
 80014be:	2801      	cmp	r0, #1
 80014c0:	f040 80a3 	bne.w	800160a <HAL_SPI_Transmit+0x174>
  if ((pData == NULL) || (Size == 0U))
 80014c4:	2d00      	cmp	r5, #0
 80014c6:	d057      	beq.n	8001578 <HAL_SPI_Transmit+0xe2>
 80014c8:	f1b8 0f00 	cmp.w	r8, #0
 80014cc:	d054      	beq.n	8001578 <HAL_SPI_Transmit+0xe2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80014ce:	2303      	movs	r3, #3
 80014d0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80014d8:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 80014da:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 80014de:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80014e2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 80014e6:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 80014e8:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80014ea:	68a3      	ldr	r3, [r4, #8]
 80014ec:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80014ee:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80014f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 80014f4:	bf08      	it	eq
 80014f6:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 80014f8:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_TX(hspi);
 80014fc:	bf04      	itt	eq
 80014fe:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8001502:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001504:	6803      	ldr	r3, [r0, #0]
 8001506:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8001508:	bf5e      	ittt	pl
 800150a:	6803      	ldrpl	r3, [r0, #0]
 800150c:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8001510:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001512:	68e3      	ldr	r3, [r4, #12]
 8001514:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001518:	6863      	ldr	r3, [r4, #4]
 800151a:	d93e      	bls.n	800159a <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800151c:	b11b      	cbz	r3, 8001526 <HAL_SPI_Transmit+0x90>
 800151e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001520:	b29b      	uxth	r3, r3
 8001522:	2b01      	cmp	r3, #1
 8001524:	d106      	bne.n	8001534 <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)pData);
 8001526:	f835 3b02 	ldrh.w	r3, [r5], #2
 800152a:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 800152c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800152e:	3b01      	subs	r3, #1
 8001530:	b29b      	uxth	r3, r3
 8001532:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8001534:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001536:	b29b      	uxth	r3, r3
 8001538:	b9a3      	cbnz	r3, 8001564 <HAL_SPI_Transmit+0xce>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800153a:	463a      	mov	r2, r7
 800153c:	4631      	mov	r1, r6
 800153e:	4620      	mov	r0, r4
 8001540:	f7ff ff32 	bl	80013a8 <SPI_EndRxTxTransaction>
 8001544:	2800      	cmp	r0, #0
 8001546:	d15d      	bne.n	8001604 <HAL_SPI_Transmit+0x16e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001548:	68a3      	ldr	r3, [r4, #8]
 800154a:	b933      	cbnz	r3, 800155a <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800154c:	9301      	str	r3, [sp, #4]
 800154e:	6823      	ldr	r3, [r4, #0]
 8001550:	68da      	ldr	r2, [r3, #12]
 8001552:	9201      	str	r2, [sp, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	9301      	str	r3, [sp, #4]
 8001558:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800155a:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800155c:	3000      	adds	r0, #0
 800155e:	bf18      	it	ne
 8001560:	2001      	movne	r0, #1
 8001562:	e009      	b.n	8001578 <HAL_SPI_Transmit+0xe2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001564:	6823      	ldr	r3, [r4, #0]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	0790      	lsls	r0, r2, #30
 800156a:	d503      	bpl.n	8001574 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)pData);
 800156c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	e7db      	b.n	800152c <HAL_SPI_Transmit+0x96>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001574:	b94e      	cbnz	r6, 800158a <HAL_SPI_Transmit+0xf4>
          errorcode = HAL_TIMEOUT;
 8001576:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001578:	2301      	movs	r3, #1
 800157a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800157e:	2300      	movs	r3, #0
 8001580:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8001584:	b002      	add	sp, #8
 8001586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800158a:	1c71      	adds	r1, r6, #1
 800158c:	d0d2      	beq.n	8001534 <HAL_SPI_Transmit+0x9e>
 800158e:	f7fe fe4f 	bl	8000230 <HAL_GetTick>
 8001592:	1bc0      	subs	r0, r0, r7
 8001594:	4286      	cmp	r6, r0
 8001596:	d8cd      	bhi.n	8001534 <HAL_SPI_Transmit+0x9e>
 8001598:	e7ed      	b.n	8001576 <HAL_SPI_Transmit+0xe0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800159a:	b11b      	cbz	r3, 80015a4 <HAL_SPI_Transmit+0x10e>
 800159c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800159e:	b29b      	uxth	r3, r3
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d10a      	bne.n	80015ba <HAL_SPI_Transmit+0x124>
      if (hspi->TxXferCount > 1U)
 80015a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d916      	bls.n	80015da <HAL_SPI_Transmit+0x144>
        hspi->Instance->DR = *((uint16_t *)pData);
 80015ac:	f835 3b02 	ldrh.w	r3, [r5], #2
 80015b0:	60c3      	str	r3, [r0, #12]
          hspi->TxXferCount -= 2U;
 80015b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80015b4:	3b02      	subs	r3, #2
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80015ba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80015bc:	b29b      	uxth	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0bb      	beq.n	800153a <HAL_SPI_Transmit+0xa4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80015c2:	6823      	ldr	r3, [r4, #0]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	0792      	lsls	r2, r2, #30
 80015c8:	d512      	bpl.n	80015f0 <HAL_SPI_Transmit+0x15a>
        if (hspi->TxXferCount > 1U)
 80015ca:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80015cc:	b292      	uxth	r2, r2
 80015ce:	2a01      	cmp	r2, #1
 80015d0:	d90b      	bls.n	80015ea <HAL_SPI_Transmit+0x154>
          hspi->Instance->DR = *((uint16_t *)pData);
 80015d2:	f835 2b02 	ldrh.w	r2, [r5], #2
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	e7eb      	b.n	80015b2 <HAL_SPI_Transmit+0x11c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 80015da:	782b      	ldrb	r3, [r5, #0]
 80015dc:	7303      	strb	r3, [r0, #12]
          hspi->TxXferCount--;
 80015de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80015e0:	3b01      	subs	r3, #1
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 80015e6:	3501      	adds	r5, #1
 80015e8:	e7e7      	b.n	80015ba <HAL_SPI_Transmit+0x124>
 80015ea:	782a      	ldrb	r2, [r5, #0]
 80015ec:	731a      	strb	r2, [r3, #12]
 80015ee:	e7f6      	b.n	80015de <HAL_SPI_Transmit+0x148>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80015f0:	2e00      	cmp	r6, #0
 80015f2:	d0c0      	beq.n	8001576 <HAL_SPI_Transmit+0xe0>
 80015f4:	1c73      	adds	r3, r6, #1
 80015f6:	d0e0      	beq.n	80015ba <HAL_SPI_Transmit+0x124>
 80015f8:	f7fe fe1a 	bl	8000230 <HAL_GetTick>
 80015fc:	1bc0      	subs	r0, r0, r7
 80015fe:	4286      	cmp	r6, r0
 8001600:	d8db      	bhi.n	80015ba <HAL_SPI_Transmit+0x124>
 8001602:	e7b8      	b.n	8001576 <HAL_SPI_Transmit+0xe0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001604:	2320      	movs	r3, #32
 8001606:	6623      	str	r3, [r4, #96]	; 0x60
 8001608:	e79e      	b.n	8001548 <HAL_SPI_Transmit+0xb2>
    errorcode = HAL_BUSY;
 800160a:	2002      	movs	r0, #2
 800160c:	e7b4      	b.n	8001578 <HAL_SPI_Transmit+0xe2>
  __HAL_LOCK(hspi);
 800160e:	2002      	movs	r0, #2
 8001610:	e7b8      	b.n	8001584 <HAL_SPI_Transmit+0xee>

08001612 <HAL_TIM_Base_Start>:
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001612:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001614:	2302      	movs	r3, #2
 8001616:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 800161a:	6813      	ldr	r3, [r2, #0]
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6013      	str	r3, [r2, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001622:	2301      	movs	r3, #1
 8001624:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
}
 8001628:	2000      	movs	r0, #0
 800162a:	4770      	bx	lr

0800162c <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800162c:	6803      	ldr	r3, [r0, #0]
 800162e:	68da      	ldr	r2, [r3, #12]
 8001630:	f042 0201 	orr.w	r2, r2, #1
 8001634:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	f042 0201 	orr.w	r2, r2, #1
 800163c:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 800163e:	2000      	movs	r0, #0
 8001640:	4770      	bx	lr

08001642 <HAL_TIM_OC_MspInit>:
 8001642:	4770      	bx	lr

08001644 <HAL_TIM_PWM_MspInit>:
 8001644:	4770      	bx	lr

08001646 <HAL_TIM_IC_MspInit>:
 8001646:	4770      	bx	lr

08001648 <HAL_TIM_PeriodElapsedCallback>:
 8001648:	4770      	bx	lr

0800164a <HAL_TIM_OC_DelayElapsedCallback>:
 800164a:	4770      	bx	lr

0800164c <HAL_TIM_IC_CaptureCallback>:
 800164c:	4770      	bx	lr

0800164e <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800164e:	b510      	push	{r4, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001650:	6a44      	ldr	r4, [r0, #36]	; 0x24
  
  htim->State= HAL_TIM_STATE_READY;
  
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8001652:	6a62      	ldr	r2, [r4, #36]	; 0x24
  htim->State= HAL_TIM_STATE_READY;
 8001654:	2301      	movs	r3, #1
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8001656:	4290      	cmp	r0, r2
  htim->State= HAL_TIM_STATE_READY;
 8001658:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800165c:	d106      	bne.n	800166c <TIM_DMACaptureCplt+0x1e>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800165e:	7723      	strb	r3, [r4, #28]
  }
  
  HAL_TIM_IC_CaptureCallback(htim); 
 8001660:	4620      	mov	r0, r4
 8001662:	f7ff fff3 	bl	800164c <HAL_TIM_IC_CaptureCallback>
  
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001666:	2300      	movs	r3, #0
 8001668:	7723      	strb	r3, [r4, #28]
 800166a:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800166c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800166e:	4298      	cmp	r0, r3
 8001670:	d101      	bne.n	8001676 <TIM_DMACaptureCplt+0x28>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001672:	2302      	movs	r3, #2
 8001674:	e7f3      	b.n	800165e <TIM_DMACaptureCplt+0x10>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8001676:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001678:	4298      	cmp	r0, r3
 800167a:	d101      	bne.n	8001680 <TIM_DMACaptureCplt+0x32>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800167c:	2304      	movs	r3, #4
 800167e:	e7ee      	b.n	800165e <TIM_DMACaptureCplt+0x10>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8001680:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001682:	4298      	cmp	r0, r3
 8001684:	d1ec      	bne.n	8001660 <TIM_DMACaptureCplt+0x12>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001686:	2308      	movs	r3, #8
 8001688:	e7e9      	b.n	800165e <TIM_DMACaptureCplt+0x10>

0800168a <HAL_TIM_PWM_PulseFinishedCallback>:
 800168a:	4770      	bx	lr

0800168c <HAL_TIM_TriggerCallback>:
 800168c:	4770      	bx	lr

0800168e <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800168e:	6803      	ldr	r3, [r0, #0]
 8001690:	691a      	ldr	r2, [r3, #16]
 8001692:	0791      	lsls	r1, r2, #30
{
 8001694:	b510      	push	{r4, lr}
 8001696:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001698:	d50f      	bpl.n	80016ba <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	0792      	lsls	r2, r2, #30
 800169e:	d50c      	bpl.n	80016ba <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80016a0:	f06f 0202 	mvn.w	r2, #2
 80016a4:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016a6:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016a8:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016aa:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016ac:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016ae:	f000 8085 	beq.w	80017bc <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80016b2:	f7ff ffcb 	bl	800164c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016b6:	2300      	movs	r3, #0
 80016b8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016ba:	6823      	ldr	r3, [r4, #0]
 80016bc:	691a      	ldr	r2, [r3, #16]
 80016be:	0752      	lsls	r2, r2, #29
 80016c0:	d510      	bpl.n	80016e4 <HAL_TIM_IRQHandler+0x56>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80016c2:	68da      	ldr	r2, [r3, #12]
 80016c4:	0750      	lsls	r0, r2, #29
 80016c6:	d50d      	bpl.n	80016e4 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80016c8:	f06f 0204 	mvn.w	r2, #4
 80016cc:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016ce:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016d0:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016d2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016d6:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80016d8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016da:	d075      	beq.n	80017c8 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80016dc:	f7ff ffb6 	bl	800164c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016e0:	2300      	movs	r3, #0
 80016e2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80016e4:	6823      	ldr	r3, [r4, #0]
 80016e6:	691a      	ldr	r2, [r3, #16]
 80016e8:	0711      	lsls	r1, r2, #28
 80016ea:	d50f      	bpl.n	800170c <HAL_TIM_IRQHandler+0x7e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80016ec:	68da      	ldr	r2, [r3, #12]
 80016ee:	0712      	lsls	r2, r2, #28
 80016f0:	d50c      	bpl.n	800170c <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80016f2:	f06f 0208 	mvn.w	r2, #8
 80016f6:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016f8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80016fa:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016fc:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80016fe:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001700:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001702:	d067      	beq.n	80017d4 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001704:	f7ff ffa2 	bl	800164c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001708:	2300      	movs	r3, #0
 800170a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800170c:	6823      	ldr	r3, [r4, #0]
 800170e:	691a      	ldr	r2, [r3, #16]
 8001710:	06d0      	lsls	r0, r2, #27
 8001712:	d510      	bpl.n	8001736 <HAL_TIM_IRQHandler+0xa8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	06d1      	lsls	r1, r2, #27
 8001718:	d50d      	bpl.n	8001736 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800171a:	f06f 0210 	mvn.w	r2, #16
 800171e:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001720:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001722:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001724:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001728:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800172a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800172c:	d058      	beq.n	80017e0 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800172e:	f7ff ff8d 	bl	800164c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001732:	2300      	movs	r3, #0
 8001734:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001736:	6823      	ldr	r3, [r4, #0]
 8001738:	691a      	ldr	r2, [r3, #16]
 800173a:	07d2      	lsls	r2, r2, #31
 800173c:	d508      	bpl.n	8001750 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800173e:	68da      	ldr	r2, [r3, #12]
 8001740:	07d0      	lsls	r0, r2, #31
 8001742:	d505      	bpl.n	8001750 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001744:	f06f 0201 	mvn.w	r2, #1
 8001748:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800174a:	4620      	mov	r0, r4
 800174c:	f7ff ff7c 	bl	8001648 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001750:	6823      	ldr	r3, [r4, #0]
 8001752:	691a      	ldr	r2, [r3, #16]
 8001754:	0611      	lsls	r1, r2, #24
 8001756:	d508      	bpl.n	800176a <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	0612      	lsls	r2, r2, #24
 800175c:	d505      	bpl.n	800176a <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800175e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001762:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001764:	4620      	mov	r0, r4
 8001766:	f000 fd60 	bl	800222a <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800176a:	6823      	ldr	r3, [r4, #0]
 800176c:	691a      	ldr	r2, [r3, #16]
 800176e:	05d0      	lsls	r0, r2, #23
 8001770:	d508      	bpl.n	8001784 <HAL_TIM_IRQHandler+0xf6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001772:	68da      	ldr	r2, [r3, #12]
 8001774:	0611      	lsls	r1, r2, #24
 8001776:	d505      	bpl.n	8001784 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001778:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800177c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800177e:	4620      	mov	r0, r4
 8001780:	f000 fd54 	bl	800222c <HAL_TIMEx_Break2Callback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001784:	6823      	ldr	r3, [r4, #0]
 8001786:	691a      	ldr	r2, [r3, #16]
 8001788:	0652      	lsls	r2, r2, #25
 800178a:	d508      	bpl.n	800179e <HAL_TIM_IRQHandler+0x110>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	0650      	lsls	r0, r2, #25
 8001790:	d505      	bpl.n	800179e <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001792:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001796:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001798:	4620      	mov	r0, r4
 800179a:	f7ff ff77 	bl	800168c <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800179e:	6823      	ldr	r3, [r4, #0]
 80017a0:	691a      	ldr	r2, [r3, #16]
 80017a2:	0691      	lsls	r1, r2, #26
 80017a4:	d522      	bpl.n	80017ec <HAL_TIM_IRQHandler+0x15e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80017a6:	68da      	ldr	r2, [r3, #12]
 80017a8:	0692      	lsls	r2, r2, #26
 80017aa:	d51f      	bpl.n	80017ec <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80017ac:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80017b0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80017b2:	611a      	str	r2, [r3, #16]
}
 80017b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80017b8:	f000 bd36 	b.w	8002228 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017bc:	f7ff ff45 	bl	800164a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017c0:	4620      	mov	r0, r4
 80017c2:	f7ff ff62 	bl	800168a <HAL_TIM_PWM_PulseFinishedCallback>
 80017c6:	e776      	b.n	80016b6 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017c8:	f7ff ff3f 	bl	800164a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017cc:	4620      	mov	r0, r4
 80017ce:	f7ff ff5c 	bl	800168a <HAL_TIM_PWM_PulseFinishedCallback>
 80017d2:	e785      	b.n	80016e0 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017d4:	f7ff ff39 	bl	800164a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80017d8:	4620      	mov	r0, r4
 80017da:	f7ff ff56 	bl	800168a <HAL_TIM_PWM_PulseFinishedCallback>
 80017de:	e793      	b.n	8001708 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017e0:	f7ff ff33 	bl	800164a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017e4:	4620      	mov	r0, r4
 80017e6:	f7ff ff50 	bl	800168a <HAL_TIM_PWM_PulseFinishedCallback>
 80017ea:	e7a2      	b.n	8001732 <HAL_TIM_IRQHandler+0xa4>
 80017ec:	bd10      	pop	{r4, pc}

080017ee <HAL_TIM_ErrorCallback>:
{
 80017ee:	4770      	bx	lr

080017f0 <TIM_DMAError>:
{
 80017f0:	b508      	push	{r3, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017f2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  htim->State= HAL_TIM_STATE_READY;
 80017f4:	2301      	movs	r3, #1
 80017f6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 80017fa:	f7ff fff8 	bl	80017ee <HAL_TIM_ErrorCallback>
 80017fe:	bd08      	pop	{r3, pc}

08001800 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001800:	4a26      	ldr	r2, [pc, #152]	; (800189c <TIM_Base_SetConfig+0x9c>)
  tmpcr1 = TIMx->CR1;
 8001802:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001804:	4290      	cmp	r0, r2
 8001806:	d00a      	beq.n	800181e <TIM_Base_SetConfig+0x1e>
 8001808:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800180c:	d007      	beq.n	800181e <TIM_Base_SetConfig+0x1e>
 800180e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001812:	4290      	cmp	r0, r2
 8001814:	d003      	beq.n	800181e <TIM_Base_SetConfig+0x1e>
 8001816:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800181a:	4290      	cmp	r0, r2
 800181c:	d111      	bne.n	8001842 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800181e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001824:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001826:	4a1d      	ldr	r2, [pc, #116]	; (800189c <TIM_Base_SetConfig+0x9c>)
 8001828:	4290      	cmp	r0, r2
 800182a:	d015      	beq.n	8001858 <TIM_Base_SetConfig+0x58>
 800182c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001830:	d012      	beq.n	8001858 <TIM_Base_SetConfig+0x58>
 8001832:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001836:	4290      	cmp	r0, r2
 8001838:	d00e      	beq.n	8001858 <TIM_Base_SetConfig+0x58>
 800183a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800183e:	4290      	cmp	r0, r2
 8001840:	d00a      	beq.n	8001858 <TIM_Base_SetConfig+0x58>
 8001842:	4a17      	ldr	r2, [pc, #92]	; (80018a0 <TIM_Base_SetConfig+0xa0>)
 8001844:	4290      	cmp	r0, r2
 8001846:	d007      	beq.n	8001858 <TIM_Base_SetConfig+0x58>
 8001848:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800184c:	4290      	cmp	r0, r2
 800184e:	d003      	beq.n	8001858 <TIM_Base_SetConfig+0x58>
 8001850:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001854:	4290      	cmp	r0, r2
 8001856:	d103      	bne.n	8001860 <TIM_Base_SetConfig+0x60>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001858:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800185a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800185e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001860:	694a      	ldr	r2, [r1, #20]
 8001862:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001866:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001868:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800186a:	688b      	ldr	r3, [r1, #8]
 800186c:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800186e:	680b      	ldr	r3, [r1, #0]
 8001870:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001872:	4b0a      	ldr	r3, [pc, #40]	; (800189c <TIM_Base_SetConfig+0x9c>)
 8001874:	4298      	cmp	r0, r3
 8001876:	d00b      	beq.n	8001890 <TIM_Base_SetConfig+0x90>
 8001878:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800187c:	4298      	cmp	r0, r3
 800187e:	d007      	beq.n	8001890 <TIM_Base_SetConfig+0x90>
 8001880:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001884:	4298      	cmp	r0, r3
 8001886:	d003      	beq.n	8001890 <TIM_Base_SetConfig+0x90>
 8001888:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800188c:	4298      	cmp	r0, r3
 800188e:	d101      	bne.n	8001894 <TIM_Base_SetConfig+0x94>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001890:	690b      	ldr	r3, [r1, #16]
 8001892:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001894:	2301      	movs	r3, #1
 8001896:	6143      	str	r3, [r0, #20]
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40012c00 	.word	0x40012c00
 80018a0:	40014000 	.word	0x40014000

080018a4 <HAL_TIM_Base_Init>:
{ 
 80018a4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80018a6:	4604      	mov	r4, r0
 80018a8:	b1a0      	cbz	r0, 80018d4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80018aa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80018ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018b2:	b91b      	cbnz	r3, 80018bc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80018b4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80018b8:	f001 fdb4 	bl	8003424 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80018bc:	2302      	movs	r3, #2
 80018be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80018c2:	6820      	ldr	r0, [r4, #0]
 80018c4:	1d21      	adds	r1, r4, #4
 80018c6:	f7ff ff9b 	bl	8001800 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80018ca:	2301      	movs	r3, #1
 80018cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80018d0:	2000      	movs	r0, #0
 80018d2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80018d4:	2001      	movs	r0, #1
}
 80018d6:	bd10      	pop	{r4, pc}

080018d8 <HAL_TIM_OC_Init>:
{
 80018d8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80018da:	4604      	mov	r4, r0
 80018dc:	b1a0      	cbz	r0, 8001908 <HAL_TIM_OC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80018de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80018e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018e6:	b91b      	cbnz	r3, 80018f0 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80018e8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 80018ec:	f7ff fea9 	bl	8001642 <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80018f0:	2302      	movs	r3, #2
 80018f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 80018f6:	6820      	ldr	r0, [r4, #0]
 80018f8:	1d21      	adds	r1, r4, #4
 80018fa:	f7ff ff81 	bl	8001800 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80018fe:	2301      	movs	r3, #1
 8001900:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001904:	2000      	movs	r0, #0
 8001906:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001908:	2001      	movs	r0, #1
}
 800190a:	bd10      	pop	{r4, pc}

0800190c <HAL_TIM_PWM_Init>:
{
 800190c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800190e:	4604      	mov	r4, r0
 8001910:	b1a0      	cbz	r0, 800193c <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001912:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001916:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800191a:	b91b      	cbnz	r3, 8001924 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800191c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001920:	f7ff fe90 	bl	8001644 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001924:	2302      	movs	r3, #2
 8001926:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800192a:	6820      	ldr	r0, [r4, #0]
 800192c:	1d21      	adds	r1, r4, #4
 800192e:	f7ff ff67 	bl	8001800 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001932:	2301      	movs	r3, #1
 8001934:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001938:	2000      	movs	r0, #0
 800193a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800193c:	2001      	movs	r0, #1
}
 800193e:	bd10      	pop	{r4, pc}

08001940 <HAL_TIM_IC_Init>:
{
 8001940:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001942:	4604      	mov	r4, r0
 8001944:	b1a0      	cbz	r0, 8001970 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001946:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800194a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800194e:	b91b      	cbnz	r3, 8001958 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001950:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8001954:	f7ff fe77 	bl	8001646 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY; 
 8001958:	2302      	movs	r3, #2
 800195a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800195e:	6820      	ldr	r0, [r4, #0]
 8001960:	1d21      	adds	r1, r4, #4
 8001962:	f7ff ff4d 	bl	8001800 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001966:	2301      	movs	r3, #1
 8001968:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800196c:	2000      	movs	r0, #0
 800196e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001970:	2001      	movs	r0, #1
}
 8001972:	bd10      	pop	{r4, pc}

08001974 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001974:	6a03      	ldr	r3, [r0, #32]
 8001976:	f023 0301 	bic.w	r3, r3, #1
 800197a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800197c:	6a03      	ldr	r3, [r0, #32]
{
 800197e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001980:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001982:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001984:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001986:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800198a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800198e:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001990:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001992:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001996:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001998:	4d17      	ldr	r5, [pc, #92]	; (80019f8 <TIM_OC1_SetConfig+0x84>)
 800199a:	42a8      	cmp	r0, r5
 800199c:	d00b      	beq.n	80019b6 <TIM_OC1_SetConfig+0x42>
 800199e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80019a2:	42a8      	cmp	r0, r5
 80019a4:	d007      	beq.n	80019b6 <TIM_OC1_SetConfig+0x42>
 80019a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019aa:	42a8      	cmp	r0, r5
 80019ac:	d003      	beq.n	80019b6 <TIM_OC1_SetConfig+0x42>
 80019ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019b2:	42a8      	cmp	r0, r5
 80019b4:	d11a      	bne.n	80019ec <TIM_OC1_SetConfig+0x78>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80019b6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80019b8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80019bc:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80019be:	4d0e      	ldr	r5, [pc, #56]	; (80019f8 <TIM_OC1_SetConfig+0x84>)
 80019c0:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80019c2:	f023 0304 	bic.w	r3, r3, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80019c6:	d00b      	beq.n	80019e0 <TIM_OC1_SetConfig+0x6c>
 80019c8:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80019cc:	42a8      	cmp	r0, r5
 80019ce:	d007      	beq.n	80019e0 <TIM_OC1_SetConfig+0x6c>
 80019d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019d4:	42a8      	cmp	r0, r5
 80019d6:	d003      	beq.n	80019e0 <TIM_OC1_SetConfig+0x6c>
 80019d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019dc:	42a8      	cmp	r0, r5
 80019de:	d105      	bne.n	80019ec <TIM_OC1_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80019e0:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80019e4:	698e      	ldr	r6, [r1, #24]
 80019e6:	694c      	ldr	r4, [r1, #20]
 80019e8:	4334      	orrs	r4, r6
 80019ea:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80019ec:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80019ee:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80019f0:	684a      	ldr	r2, [r1, #4]
 80019f2:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80019f4:	6203      	str	r3, [r0, #32]
 80019f6:	bd70      	pop	{r4, r5, r6, pc}
 80019f8:	40012c00 	.word	0x40012c00

080019fc <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019fc:	6a03      	ldr	r3, [r0, #32]
 80019fe:	f023 0310 	bic.w	r3, r3, #16
 8001a02:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a04:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001a06:	6842      	ldr	r2, [r0, #4]
{
 8001a08:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001a0a:	6984      	ldr	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a0c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001a0e:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8001a12:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a16:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001a1a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001a1c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001a20:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001a24:	4d10      	ldr	r5, [pc, #64]	; (8001a68 <TIM_OC2_SetConfig+0x6c>)
 8001a26:	42a8      	cmp	r0, r5
 8001a28:	d10e      	bne.n	8001a48 <TIM_OC2_SetConfig+0x4c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001a2a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001a30:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001a38:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001a3a:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001a3c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001a40:	4335      	orrs	r5, r6
 8001a42:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8001a46:	e009      	b.n	8001a5c <TIM_OC2_SetConfig+0x60>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001a48:	4d08      	ldr	r5, [pc, #32]	; (8001a6c <TIM_OC2_SetConfig+0x70>)
 8001a4a:	42a8      	cmp	r0, r5
 8001a4c:	d0f4      	beq.n	8001a38 <TIM_OC2_SetConfig+0x3c>
 8001a4e:	4d08      	ldr	r5, [pc, #32]	; (8001a70 <TIM_OC2_SetConfig+0x74>)
 8001a50:	42a8      	cmp	r0, r5
 8001a52:	d0f1      	beq.n	8001a38 <TIM_OC2_SetConfig+0x3c>
 8001a54:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a58:	42a8      	cmp	r0, r5
 8001a5a:	d0ed      	beq.n	8001a38 <TIM_OC2_SetConfig+0x3c>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a5c:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001a5e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001a60:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001a62:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001a64:	6203      	str	r3, [r0, #32]
}
 8001a66:	bd70      	pop	{r4, r5, r6, pc}
 8001a68:	40012c00 	.word	0x40012c00
 8001a6c:	40014000 	.word	0x40014000
 8001a70:	40014400 	.word	0x40014400

08001a74 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001a74:	6a03      	ldr	r3, [r0, #32]
 8001a76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a7a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a7c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001a7e:	6842      	ldr	r2, [r0, #4]
{
 8001a80:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001a82:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a84:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001a86:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8001a8a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001a8e:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001a90:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001a92:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001a96:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001a9a:	4d11      	ldr	r5, [pc, #68]	; (8001ae0 <TIM_OC3_SetConfig+0x6c>)
 8001a9c:	42a8      	cmp	r0, r5
 8001a9e:	d10e      	bne.n	8001abe <TIM_OC3_SetConfig+0x4a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001aa0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001aa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001aa6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001aaa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001aae:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ab0:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001ab2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ab6:	4335      	orrs	r5, r6
 8001ab8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8001abc:	e009      	b.n	8001ad2 <TIM_OC3_SetConfig+0x5e>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001abe:	4d09      	ldr	r5, [pc, #36]	; (8001ae4 <TIM_OC3_SetConfig+0x70>)
 8001ac0:	42a8      	cmp	r0, r5
 8001ac2:	d0f4      	beq.n	8001aae <TIM_OC3_SetConfig+0x3a>
 8001ac4:	4d08      	ldr	r5, [pc, #32]	; (8001ae8 <TIM_OC3_SetConfig+0x74>)
 8001ac6:	42a8      	cmp	r0, r5
 8001ac8:	d0f1      	beq.n	8001aae <TIM_OC3_SetConfig+0x3a>
 8001aca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ace:	42a8      	cmp	r0, r5
 8001ad0:	d0ed      	beq.n	8001aae <TIM_OC3_SetConfig+0x3a>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ad2:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001ad4:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001ad6:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001ad8:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001ada:	6203      	str	r3, [r0, #32]
}
 8001adc:	bd70      	pop	{r4, r5, r6, pc}
 8001ade:	bf00      	nop
 8001ae0:	40012c00 	.word	0x40012c00
 8001ae4:	40014000 	.word	0x40014000
 8001ae8:	40014400 	.word	0x40014400

08001aec <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001aec:	6a03      	ldr	r3, [r0, #32]
 8001aee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001af2:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001af4:	6a02      	ldr	r2, [r0, #32]
{
 8001af6:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001af8:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001afa:	69c3      	ldr	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001afc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b02:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b06:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001b0a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001b0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001b10:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001b14:	4d0c      	ldr	r5, [pc, #48]	; (8001b48 <TIM_OC4_SetConfig+0x5c>)
 8001b16:	42a8      	cmp	r0, r5
 8001b18:	d00b      	beq.n	8001b32 <TIM_OC4_SetConfig+0x46>
 8001b1a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001b1e:	42a8      	cmp	r0, r5
 8001b20:	d007      	beq.n	8001b32 <TIM_OC4_SetConfig+0x46>
 8001b22:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b26:	42a8      	cmp	r0, r5
 8001b28:	d003      	beq.n	8001b32 <TIM_OC4_SetConfig+0x46>
 8001b2a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b2e:	42a8      	cmp	r0, r5
 8001b30:	d104      	bne.n	8001b3c <TIM_OC4_SetConfig+0x50>
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001b32:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001b34:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001b38:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b3c:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001b3e:	61c3      	str	r3, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001b40:	684b      	ldr	r3, [r1, #4]
 8001b42:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001b44:	6202      	str	r2, [r0, #32]
 8001b46:	bd30      	pop	{r4, r5, pc}
 8001b48:	40012c00 	.word	0x40012c00

08001b4c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001b4c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b4e:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001b50:	4e14      	ldr	r6, [pc, #80]	; (8001ba4 <TIM_TI1_SetConfig+0x58>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b52:	f024 0401 	bic.w	r4, r4, #1
 8001b56:	6204      	str	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001b58:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8001b5a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001b5c:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001b5e:	d00e      	beq.n	8001b7e <TIM_TI1_SetConfig+0x32>
 8001b60:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b64:	d00b      	beq.n	8001b7e <TIM_TI1_SetConfig+0x32>
 8001b66:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8001b6a:	42b0      	cmp	r0, r6
 8001b6c:	d007      	beq.n	8001b7e <TIM_TI1_SetConfig+0x32>
 8001b6e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001b72:	42b0      	cmp	r0, r6
 8001b74:	d003      	beq.n	8001b7e <TIM_TI1_SetConfig+0x32>
 8001b76:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8001b7a:	42b0      	cmp	r0, r6
 8001b7c:	d10f      	bne.n	8001b9e <TIM_TI1_SetConfig+0x52>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001b7e:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8001b82:	4322      	orrs	r2, r4
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001b84:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b86:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001b8a:	b2db      	uxtb	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001b8c:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001b90:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001b94:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001b96:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001b98:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001b9a:	6201      	str	r1, [r0, #32]
}
 8001b9c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001b9e:	f044 0201 	orr.w	r2, r4, #1
 8001ba2:	e7ef      	b.n	8001b84 <TIM_TI1_SetConfig+0x38>
 8001ba4:	40012c00 	.word	0x40012c00

08001ba8 <HAL_TIM_IC_ConfigChannel>:
{
 8001ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001baa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001bae:	2b01      	cmp	r3, #1
{
 8001bb0:	4604      	mov	r4, r0
 8001bb2:	460d      	mov	r5, r1
 8001bb4:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001bb8:	d019      	beq.n	8001bee <HAL_TIM_IC_ConfigChannel+0x46>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 8001bc4:	b9a2      	cbnz	r2, 8001bf0 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8001bc6:	68cb      	ldr	r3, [r1, #12]
 8001bc8:	6820      	ldr	r0, [r4, #0]
 8001bca:	c906      	ldmia	r1, {r1, r2}
 8001bcc:	f7ff ffbe 	bl	8001b4c <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001bd0:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001bd2:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001bd4:	699a      	ldr	r2, [r3, #24]
 8001bd6:	f022 020c 	bic.w	r2, r2, #12
 8001bda:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001bdc:	699a      	ldr	r2, [r3, #24]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001be2:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001be4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001be6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001bea:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8001bf0:	2a04      	cmp	r2, #4
 8001bf2:	688e      	ldr	r6, [r1, #8]
 8001bf4:	6823      	ldr	r3, [r4, #0]
 8001bf6:	68e8      	ldr	r0, [r5, #12]
 8001bf8:	c982      	ldmia	r1, {r1, r7}
 8001bfa:	d11f      	bne.n	8001c3c <HAL_TIM_IC_ConfigChannel+0x94>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bfc:	6a1a      	ldr	r2, [r3, #32]
 8001bfe:	f022 0210 	bic.w	r2, r2, #16
 8001c02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c04:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8001c06:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001c08:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001c0c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001c10:	0300      	lsls	r0, r0, #12
 8001c12:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c14:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001c18:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001c1a:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001c1c:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c20:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001c24:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c28:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001c2a:	699a      	ldr	r2, [r3, #24]
 8001c2c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001c30:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001c32:	699a      	ldr	r2, [r3, #24]
 8001c34:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001c38:	619e      	str	r6, [r3, #24]
 8001c3a:	e7d2      	b.n	8001be2 <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8001c3c:	2a08      	cmp	r2, #8
{
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c3e:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8001c40:	d11c      	bne.n	8001c7c <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c46:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001c48:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001c4a:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001c4c:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 8001c50:	433a      	orrs	r2, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001c52:	0100      	lsls	r0, r0, #4
 8001c54:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001c56:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001c5a:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001c5c:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001c5e:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001c62:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001c66:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001c68:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001c6a:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001c6c:	69da      	ldr	r2, [r3, #28]
 8001c6e:	f022 020c 	bic.w	r2, r2, #12
 8001c72:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001c74:	69da      	ldr	r2, [r3, #28]
 8001c76:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001c78:	61de      	str	r6, [r3, #28]
 8001c7a:	e7b2      	b.n	8001be2 <HAL_TIM_IC_ConfigChannel+0x3a>
{
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c7c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c80:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001c82:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001c84:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001c86:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001c8a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001c8e:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001c90:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001c94:	b280      	uxth	r0, r0

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001c96:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001c98:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001c9a:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001c9e:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001ca2:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001ca4:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001ca6:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001ca8:	69da      	ldr	r2, [r3, #28]
 8001caa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001cae:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001cb0:	69da      	ldr	r2, [r3, #28]
 8001cb2:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001cb6:	e7df      	b.n	8001c78 <HAL_TIM_IC_ConfigChannel+0xd0>

08001cb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001cb8:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8001cba:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001cbc:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cbe:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001cc2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001cc6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001cc8:	6083      	str	r3, [r0, #8]
 8001cca:	bd10      	pop	{r4, pc}

08001ccc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001ccc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001cd0:	2b01      	cmp	r3, #1
{
 8001cd2:	b570      	push	{r4, r5, r6, lr}
 8001cd4:	4604      	mov	r4, r0
 8001cd6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001cda:	d01a      	beq.n	8001d12 <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8001cdc:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001ce0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001ce8:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cea:	4b52      	ldr	r3, [pc, #328]	; (8001e34 <HAL_TIM_ConfigClockSource+0x168>)
 8001cec:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8001cee:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001cf0:	680b      	ldr	r3, [r1, #0]
 8001cf2:	2b40      	cmp	r3, #64	; 0x40
 8001cf4:	d075      	beq.n	8001de2 <HAL_TIM_ConfigClockSource+0x116>
 8001cf6:	d818      	bhi.n	8001d2a <HAL_TIM_ConfigClockSource+0x5e>
 8001cf8:	2b10      	cmp	r3, #16
 8001cfa:	f000 808f 	beq.w	8001e1c <HAL_TIM_ConfigClockSource+0x150>
 8001cfe:	d809      	bhi.n	8001d14 <HAL_TIM_ConfigClockSource+0x48>
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f000 8085 	beq.w	8001e10 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 8001d06:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001d08:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001d0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001d0e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001d12:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001d14:	2b20      	cmp	r3, #32
 8001d16:	f000 8087 	beq.w	8001e28 <HAL_TIM_ConfigClockSource+0x15c>
 8001d1a:	2b30      	cmp	r3, #48	; 0x30
 8001d1c:	d1f3      	bne.n	8001d06 <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 8001d1e:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d24:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8001d28:	e033      	b.n	8001d92 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8001d2a:	2b70      	cmp	r3, #112	; 0x70
 8001d2c:	d033      	beq.n	8001d96 <HAL_TIM_ConfigClockSource+0xca>
 8001d2e:	d81b      	bhi.n	8001d68 <HAL_TIM_ConfigClockSource+0x9c>
 8001d30:	2b50      	cmp	r3, #80	; 0x50
 8001d32:	d03f      	beq.n	8001db4 <HAL_TIM_ConfigClockSource+0xe8>
 8001d34:	2b60      	cmp	r3, #96	; 0x60
 8001d36:	d1e6      	bne.n	8001d06 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001d38:	684d      	ldr	r5, [r1, #4]
 8001d3a:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d3c:	6a01      	ldr	r1, [r0, #32]
 8001d3e:	f021 0110 	bic.w	r1, r1, #16
 8001d42:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d44:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001d46:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d48:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d50:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d54:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001d58:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001d5a:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001d5c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d62:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001d66:	e014      	b.n	8001d92 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8001d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d6c:	d00c      	beq.n	8001d88 <HAL_TIM_ConfigClockSource+0xbc>
 8001d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d72:	d1c8      	bne.n	8001d06 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8001d74:	68cb      	ldr	r3, [r1, #12]
 8001d76:	684a      	ldr	r2, [r1, #4]
 8001d78:	6889      	ldr	r1, [r1, #8]
 8001d7a:	f7ff ff9d 	bl	8001cb8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d7e:	6822      	ldr	r2, [r4, #0]
 8001d80:	6893      	ldr	r3, [r2, #8]
 8001d82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d86:	e013      	b.n	8001db0 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001d88:	6883      	ldr	r3, [r0, #8]
 8001d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d8e:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8001d92:	6083      	str	r3, [r0, #8]
 8001d94:	e7b7      	b.n	8001d06 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8001d96:	68cb      	ldr	r3, [r1, #12]
 8001d98:	684a      	ldr	r2, [r1, #4]
 8001d9a:	6889      	ldr	r1, [r1, #8]
 8001d9c:	f7ff ff8c 	bl	8001cb8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001da0:	6822      	ldr	r2, [r4, #0]
 8001da2:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001dac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001db0:	6093      	str	r3, [r2, #8]
    break;
 8001db2:	e7a8      	b.n	8001d06 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001db4:	684a      	ldr	r2, [r1, #4]
 8001db6:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001db8:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dba:	6a05      	ldr	r5, [r0, #32]
 8001dbc:	f025 0501 	bic.w	r5, r5, #1
 8001dc0:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001dc2:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001dc4:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001dc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001dcc:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001dd0:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001dd2:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001dd4:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001dd6:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001ddc:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8001de0:	e7d7      	b.n	8001d92 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001de2:	684a      	ldr	r2, [r1, #4]
 8001de4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001de6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001de8:	6a05      	ldr	r5, [r0, #32]
 8001dea:	f025 0501 	bic.w	r5, r5, #1
 8001dee:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001df0:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001df2:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001df6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001dfa:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001dfe:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001e00:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e02:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001e04:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e0a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001e0e:	e7c0      	b.n	8001d92 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001e10:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e16:	f043 0307 	orr.w	r3, r3, #7
 8001e1a:	e7ba      	b.n	8001d92 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001e1c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e22:	f043 0317 	orr.w	r3, r3, #23
 8001e26:	e7b4      	b.n	8001d92 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001e28:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e2e:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8001e32:	e7ae      	b.n	8001d92 <HAL_TIM_ConfigClockSource+0xc6>
 8001e34:	fffe0088 	.word	0xfffe0088

08001e38 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001e38:	6a03      	ldr	r3, [r0, #32]
{
 8001e3a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001e3c:	2401      	movs	r4, #1
 8001e3e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001e40:	ea23 0304 	bic.w	r3, r3, r4
 8001e44:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001e46:	6a03      	ldr	r3, [r0, #32]
 8001e48:	408a      	lsls	r2, r1
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	6202      	str	r2, [r0, #32]
 8001e4e:	bd10      	pop	{r4, pc}

08001e50 <HAL_TIM_PWM_Start>:
{
 8001e50:	b510      	push	{r4, lr}
 8001e52:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e54:	2201      	movs	r2, #1
 8001e56:	6800      	ldr	r0, [r0, #0]
 8001e58:	f7ff ffee 	bl	8001e38 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8001e5c:	6823      	ldr	r3, [r4, #0]
 8001e5e:	4a0c      	ldr	r2, [pc, #48]	; (8001e90 <HAL_TIM_PWM_Start+0x40>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d00b      	beq.n	8001e7c <HAL_TIM_PWM_Start+0x2c>
 8001e64:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d007      	beq.n	8001e7c <HAL_TIM_PWM_Start+0x2c>
 8001e6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d003      	beq.n	8001e7c <HAL_TIM_PWM_Start+0x2c>
 8001e74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d103      	bne.n	8001e84 <HAL_TIM_PWM_Start+0x34>
    __HAL_TIM_MOE_ENABLE(htim);
 8001e7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e82:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]
} 
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	bd10      	pop	{r4, pc}
 8001e90:	40012c00 	.word	0x40012c00

08001e94 <HAL_TIM_IC_Start_DMA>:
{
 8001e94:	b538      	push	{r3, r4, r5, lr}
 8001e96:	4604      	mov	r4, r0
  if((htim->State == HAL_TIM_STATE_BUSY))
 8001e98:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8001e9c:	b2c0      	uxtb	r0, r0
 8001e9e:	2802      	cmp	r0, #2
{
 8001ea0:	460d      	mov	r5, r1
  if((htim->State == HAL_TIM_STATE_BUSY))
 8001ea2:	d02d      	beq.n	8001f00 <HAL_TIM_IC_Start_DMA+0x6c>
  else if((htim->State == HAL_TIM_STATE_READY))
 8001ea4:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8001ea8:	b2c0      	uxtb	r0, r0
 8001eaa:	2801      	cmp	r0, #1
 8001eac:	d104      	bne.n	8001eb8 <HAL_TIM_IC_Start_DMA+0x24>
    if((pData == 0U ) && (Length > 0U)) 
 8001eae:	b902      	cbnz	r2, 8001eb2 <HAL_TIM_IC_Start_DMA+0x1e>
 8001eb0:	bb33      	cbnz	r3, 8001f00 <HAL_TIM_IC_Start_DMA+0x6c>
      htim->State = HAL_TIM_STATE_BUSY;
 8001eb2:	2102      	movs	r1, #2
 8001eb4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  switch (Channel)
 8001eb8:	2d0c      	cmp	r5, #12
 8001eba:	d816      	bhi.n	8001eea <HAL_TIM_IC_Start_DMA+0x56>
 8001ebc:	e8df f005 	tbb	[pc, r5]
 8001ec0:	15151507 	.word	0x15151507
 8001ec4:	15151521 	.word	0x15151521
 8001ec8:	1515152f 	.word	0x1515152f
 8001ecc:	3d          	.byte	0x3d
 8001ecd:	00          	.byte	0x00
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8001ece:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001ed0:	4921      	ldr	r1, [pc, #132]	; (8001f58 <HAL_TIM_IC_Start_DMA+0xc4>)
 8001ed2:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001ed4:	4921      	ldr	r1, [pc, #132]	; (8001f5c <HAL_TIM_IC_Start_DMA+0xc8>)
 8001ed6:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length); 
 8001ed8:	6821      	ldr	r1, [r4, #0]
 8001eda:	3134      	adds	r1, #52	; 0x34
 8001edc:	f7fe fbe1 	bl	80006a2 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001ee0:	6822      	ldr	r2, [r4, #0]
 8001ee2:	68d3      	ldr	r3, [r2, #12]
 8001ee4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8001ee8:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001eea:	2201      	movs	r2, #1
 8001eec:	6820      	ldr	r0, [r4, #0]
 8001eee:	4629      	mov	r1, r5
 8001ef0:	f7ff ffa2 	bl	8001e38 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim); 
 8001ef4:	6822      	ldr	r2, [r4, #0]
 8001ef6:	6813      	ldr	r3, [r2, #0]
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001efe:	2000      	movs	r0, #0
}
 8001f00:	bd38      	pop	{r3, r4, r5, pc}
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8001f02:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001f04:	4914      	ldr	r1, [pc, #80]	; (8001f58 <HAL_TIM_IC_Start_DMA+0xc4>)
 8001f06:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001f08:	4914      	ldr	r1, [pc, #80]	; (8001f5c <HAL_TIM_IC_Start_DMA+0xc8>)
 8001f0a:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length);
 8001f0c:	6821      	ldr	r1, [r4, #0]
 8001f0e:	3138      	adds	r1, #56	; 0x38
 8001f10:	f7fe fbc7 	bl	80006a2 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001f14:	6822      	ldr	r2, [r4, #0]
 8001f16:	68d3      	ldr	r3, [r2, #12]
 8001f18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f1c:	e7e4      	b.n	8001ee8 <HAL_TIM_IC_Start_DMA+0x54>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8001f1e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001f20:	490d      	ldr	r1, [pc, #52]	; (8001f58 <HAL_TIM_IC_Start_DMA+0xc4>)
 8001f22:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8001f24:	490d      	ldr	r1, [pc, #52]	; (8001f5c <HAL_TIM_IC_Start_DMA+0xc8>)
 8001f26:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length);
 8001f28:	6821      	ldr	r1, [r4, #0]
 8001f2a:	313c      	adds	r1, #60	; 0x3c
 8001f2c:	f7fe fbb9 	bl	80006a2 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8001f30:	6822      	ldr	r2, [r4, #0]
 8001f32:	68d3      	ldr	r3, [r2, #12]
 8001f34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f38:	e7d6      	b.n	8001ee8 <HAL_TIM_IC_Start_DMA+0x54>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8001f3a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001f3c:	4906      	ldr	r1, [pc, #24]	; (8001f58 <HAL_TIM_IC_Start_DMA+0xc4>)
 8001f3e:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8001f40:	4906      	ldr	r1, [pc, #24]	; (8001f5c <HAL_TIM_IC_Start_DMA+0xc8>)
 8001f42:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length);
 8001f44:	6821      	ldr	r1, [r4, #0]
 8001f46:	3140      	adds	r1, #64	; 0x40
 8001f48:	f7fe fbab 	bl	80006a2 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8001f4c:	6822      	ldr	r2, [r4, #0]
 8001f4e:	68d3      	ldr	r3, [r2, #12]
 8001f50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f54:	e7c8      	b.n	8001ee8 <HAL_TIM_IC_Start_DMA+0x54>
 8001f56:	bf00      	nop
 8001f58:	0800164f 	.word	0x0800164f
 8001f5c:	080017f1 	.word	0x080017f1

08001f60 <TIM_CCxNChannelCmd>:
  uint32_t tmp = 0U;

  tmp = TIM_CCER_CC1NE << Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8001f60:	6a03      	ldr	r3, [r0, #32]
{
 8001f62:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1NE << Channel;
 8001f64:	2404      	movs	r4, #4
 8001f66:	408c      	lsls	r4, r1
  TIMx->CCER &=  ~tmp;
 8001f68:	ea23 0304 	bic.w	r3, r3, r4
 8001f6c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 8001f6e:	6a03      	ldr	r3, [r0, #32]
 8001f70:	408a      	lsls	r2, r1
 8001f72:	431a      	orrs	r2, r3
 8001f74:	6202      	str	r2, [r0, #32]
 8001f76:	bd10      	pop	{r4, pc}

08001f78 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001f78:	6a03      	ldr	r3, [r0, #32]
 8001f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f7e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f80:	6a02      	ldr	r2, [r0, #32]
{
 8001f82:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001f84:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001f86:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f88:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8001f92:	432b      	orrs	r3, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001f94:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8001f96:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001f9a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001f9e:	4d0d      	ldr	r5, [pc, #52]	; (8001fd4 <TIM_OC5_SetConfig+0x5c>)
 8001fa0:	42a8      	cmp	r0, r5
 8001fa2:	d00b      	beq.n	8001fbc <TIM_OC5_SetConfig+0x44>
 8001fa4:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001fa8:	42a8      	cmp	r0, r5
 8001faa:	d007      	beq.n	8001fbc <TIM_OC5_SetConfig+0x44>
 8001fac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001fb0:	42a8      	cmp	r0, r5
 8001fb2:	d003      	beq.n	8001fbc <TIM_OC5_SetConfig+0x44>
 8001fb4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001fb8:	42a8      	cmp	r0, r5
 8001fba:	d104      	bne.n	8001fc6 <TIM_OC5_SetConfig+0x4e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001fbc:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001fbe:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001fc2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fc6:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001fc8:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001fca:	684b      	ldr	r3, [r1, #4]
 8001fcc:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001fce:	6202      	str	r2, [r0, #32]
 8001fd0:	bd30      	pop	{r4, r5, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40012c00 	.word	0x40012c00

08001fd8 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001fd8:	6a03      	ldr	r3, [r0, #32]
 8001fda:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001fde:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fe0:	6a02      	ldr	r2, [r0, #32]
{
 8001fe2:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001fe4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001fe6:	6d43      	ldr	r3, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fe8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001fea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ff2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001ff6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001ff8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001ffc:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002000:	4d0c      	ldr	r5, [pc, #48]	; (8002034 <TIM_OC6_SetConfig+0x5c>)
 8002002:	42a8      	cmp	r0, r5
 8002004:	d00b      	beq.n	800201e <TIM_OC6_SetConfig+0x46>
 8002006:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800200a:	42a8      	cmp	r0, r5
 800200c:	d007      	beq.n	800201e <TIM_OC6_SetConfig+0x46>
 800200e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002012:	42a8      	cmp	r0, r5
 8002014:	d003      	beq.n	800201e <TIM_OC6_SetConfig+0x46>
 8002016:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800201a:	42a8      	cmp	r0, r5
 800201c:	d104      	bne.n	8002028 <TIM_OC6_SetConfig+0x50>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800201e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002020:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002024:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002028:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800202a:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800202c:	684b      	ldr	r3, [r1, #4]
 800202e:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002030:	6202      	str	r2, [r0, #32]
 8002032:	bd30      	pop	{r4, r5, pc}
 8002034:	40012c00 	.word	0x40012c00

08002038 <HAL_TIMEx_PWMN_Start>:
{
 8002038:	b510      	push	{r4, lr}
 800203a:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800203c:	2204      	movs	r2, #4
 800203e:	6800      	ldr	r0, [r0, #0]
 8002040:	f7ff ff8e 	bl	8001f60 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8002044:	6823      	ldr	r3, [r4, #0]
 8002046:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002048:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800204c:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	f042 0201 	orr.w	r2, r2, #1
 8002054:	601a      	str	r2, [r3, #0]
} 
 8002056:	2000      	movs	r0, #0
 8002058:	bd10      	pop	{r4, pc}

0800205a <HAL_TIM_PWM_ConfigChannel>:
{
 800205a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800205c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002060:	2b01      	cmp	r3, #1
{
 8002062:	4604      	mov	r4, r0
 8002064:	460d      	mov	r5, r1
 8002066:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800206a:	d010      	beq.n	800208e <HAL_TIM_PWM_ConfigChannel+0x34>
 800206c:	2301      	movs	r3, #1
  switch (Channel)
 800206e:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8002070:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002074:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8002078:	d043      	beq.n	8002102 <HAL_TIM_PWM_ConfigChannel+0xa8>
 800207a:	d809      	bhi.n	8002090 <HAL_TIM_PWM_ConfigChannel+0x36>
 800207c:	b1fa      	cbz	r2, 80020be <HAL_TIM_PWM_ConfigChannel+0x64>
 800207e:	2a04      	cmp	r2, #4
 8002080:	d02e      	beq.n	80020e0 <HAL_TIM_PWM_ConfigChannel+0x86>
  htim->State = HAL_TIM_STATE_READY;
 8002082:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002084:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002086:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800208a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800208e:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8002090:	2a10      	cmp	r2, #16
 8002092:	d047      	beq.n	8002124 <HAL_TIM_PWM_ConfigChannel+0xca>
 8002094:	2a14      	cmp	r2, #20
 8002096:	d056      	beq.n	8002146 <HAL_TIM_PWM_ConfigChannel+0xec>
 8002098:	2a0c      	cmp	r2, #12
 800209a:	d1f2      	bne.n	8002082 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800209c:	6820      	ldr	r0, [r4, #0]
 800209e:	f7ff fd25 	bl	8001aec <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80020a2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80020a4:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80020a6:	69da      	ldr	r2, [r3, #28]
 80020a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80020ae:	69da      	ldr	r2, [r3, #28]
 80020b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80020b6:	69da      	ldr	r2, [r3, #28]
 80020b8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80020bc:	e030      	b.n	8002120 <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80020be:	6820      	ldr	r0, [r4, #0]
 80020c0:	f7ff fc58 	bl	8001974 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020c4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020c6:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020c8:	699a      	ldr	r2, [r3, #24]
 80020ca:	f042 0208 	orr.w	r2, r2, #8
 80020ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80020d0:	699a      	ldr	r2, [r3, #24]
 80020d2:	f022 0204 	bic.w	r2, r2, #4
 80020d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020d8:	699a      	ldr	r2, [r3, #24]
 80020da:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020dc:	619a      	str	r2, [r3, #24]
    break;
 80020de:	e7d0      	b.n	8002082 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020e0:	6820      	ldr	r0, [r4, #0]
 80020e2:	f7ff fc8b 	bl	80019fc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020e6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020e8:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020ea:	699a      	ldr	r2, [r3, #24]
 80020ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020f0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020f2:	699a      	ldr	r2, [r3, #24]
 80020f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020f8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020fa:	699a      	ldr	r2, [r3, #24]
 80020fc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002100:	e7ec      	b.n	80020dc <HAL_TIM_PWM_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002102:	6820      	ldr	r0, [r4, #0]
 8002104:	f7ff fcb6 	bl	8001a74 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002108:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800210a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800210c:	69da      	ldr	r2, [r3, #28]
 800210e:	f042 0208 	orr.w	r2, r2, #8
 8002112:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002114:	69da      	ldr	r2, [r3, #28]
 8002116:	f022 0204 	bic.w	r2, r2, #4
 800211a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800211c:	69da      	ldr	r2, [r3, #28]
 800211e:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002120:	61da      	str	r2, [r3, #28]
    break;
 8002122:	e7ae      	b.n	8002082 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002124:	6820      	ldr	r0, [r4, #0]
 8002126:	f7ff ff27 	bl	8001f78 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800212a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 800212c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800212e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002130:	f042 0208 	orr.w	r2, r2, #8
 8002134:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002136:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002138:	f022 0204 	bic.w	r2, r2, #4
 800213c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 800213e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002140:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8002142:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8002144:	e79d      	b.n	8002082 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002146:	6820      	ldr	r0, [r4, #0]
 8002148:	f7ff ff46 	bl	8001fd8 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800214c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 800214e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002150:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002152:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002156:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800215a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800215e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8002160:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002162:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002166:	e7ec      	b.n	8002142 <HAL_TIM_PWM_ConfigChannel+0xe8>

08002168 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8002168:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800216c:	2b01      	cmp	r3, #1
{
 800216e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002170:	d018      	beq.n	80021a4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  tmpcr2 = htim->Instance->CR2;
 8002172:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002174:	4d0c      	ldr	r5, [pc, #48]	; (80021a8 <HAL_TIMEx_MasterConfigSynchronization+0x40>)
  tmpcr2 = htim->Instance->CR2;
 8002176:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002178:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800217a:	42aa      	cmp	r2, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800217c:	bf02      	ittt	eq
 800217e:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002180:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002184:	432b      	orreq	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002186:	680d      	ldr	r5, [r1, #0]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002188:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800218a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800218e:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002190:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  htim->Instance->CR2 = tmpcr2;
 8002194:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002196:	4321      	orrs	r1, r4
  __HAL_UNLOCK(htim);
 8002198:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 800219a:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 800219c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80021a0:	4618      	mov	r0, r3
 80021a2:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80021a4:	2002      	movs	r0, #2
} 
 80021a6:	bd30      	pop	{r4, r5, pc}
 80021a8:	40012c00 	.word	0x40012c00

080021ac <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 80021ac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80021b0:	2b01      	cmp	r3, #1
{
 80021b2:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80021b4:	d034      	beq.n	8002220 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80021b6:	68cb      	ldr	r3, [r1, #12]
 80021b8:	688a      	ldr	r2, [r1, #8]
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80021ba:	4c1a      	ldr	r4, [pc, #104]	; (8002224 <HAL_TIMEx_ConfigBreakDeadTime+0x78>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80021bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021c0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80021c2:	684a      	ldr	r2, [r1, #4]
 80021c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021c8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80021ca:	680a      	ldr	r2, [r1, #0]
 80021cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021d0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80021d2:	690a      	ldr	r2, [r1, #16]
 80021d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021d8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80021da:	694a      	ldr	r2, [r1, #20]
 80021dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021e0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80021e2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80021e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80021e8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 80021ea:	698a      	ldr	r2, [r1, #24]
 80021ec:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80021f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80021f4:	6802      	ldr	r2, [r0, #0]
 80021f6:	42a2      	cmp	r2, r4
 80021f8:	d10c      	bne.n	8002214 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 80021fa:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80021fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002200:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002204:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002206:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002208:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800220c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800220e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002212:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8002214:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8002216:	2300      	movs	r3, #0
 8002218:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800221c:	4618      	mov	r0, r3
 800221e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8002220:	2002      	movs	r0, #2
}
 8002222:	bd10      	pop	{r4, pc}
 8002224:	40012c00 	.word	0x40012c00

08002228 <HAL_TIMEx_CommutationCallback>:
 8002228:	4770      	bx	lr

0800222a <HAL_TIMEx_BreakCallback>:
 800222a:	4770      	bx	lr

0800222c <HAL_TIMEx_Break2Callback>:
{
 800222c:	4770      	bx	lr

0800222e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800222e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002232:	680a      	ldr	r2, [r1, #0]
 8002234:	fa92 f4a2 	rbit	r4, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002238:	f04f 0e01 	mov.w	lr, #1
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800223c:	fab4 f484 	clz	r4, r4
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002240:	2503      	movs	r5, #3
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002242:	270f      	movs	r7, #15
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002244:	fa32 f304 	lsrs.w	r3, r2, r4
 8002248:	d10d      	bne.n	8002266 <LL_GPIO_Init+0x38>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800224a:	684b      	ldr	r3, [r1, #4]
 800224c:	3b01      	subs	r3, #1
 800224e:	2b01      	cmp	r3, #1
 8002250:	d806      	bhi.n	8002260 <LL_GPIO_Init+0x32>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002252:	6843      	ldr	r3, [r0, #4]
 8002254:	68c9      	ldr	r1, [r1, #12]
 8002256:	ea23 0302 	bic.w	r3, r3, r2
 800225a:	434a      	muls	r2, r1
 800225c:	431a      	orrs	r2, r3
 800225e:	6042      	str	r2, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8002260:	2001      	movs	r0, #1
 8002262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002266:	fa0e f304 	lsl.w	r3, lr, r4
    if (currentpin)
 800226a:	4013      	ands	r3, r2
 800226c:	d069      	beq.n	8002342 <LL_GPIO_Init+0x114>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800226e:	f8d1 8004 	ldr.w	r8, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002272:	f8d0 9000 	ldr.w	r9, [r0]
 8002276:	fa93 fca3 	rbit	ip, r3
 800227a:	fabc fc8c 	clz	ip, ip
 800227e:	fa93 f6a3 	rbit	r6, r3
 8002282:	fab6 f686 	clz	r6, r6
 8002286:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800228a:	fa05 fc0c 	lsl.w	ip, r5, ip
 800228e:	0076      	lsls	r6, r6, #1
 8002290:	ea29 0c0c 	bic.w	ip, r9, ip
 8002294:	fa08 f606 	lsl.w	r6, r8, r6
 8002298:	ea4c 0606 	orr.w	r6, ip, r6
 800229c:	6006      	str	r6, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800229e:	f108 36ff 	add.w	r6, r8, #4294967295
 80022a2:	2e01      	cmp	r6, #1
 80022a4:	d816      	bhi.n	80022d4 <LL_GPIO_Init+0xa6>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80022a6:	6886      	ldr	r6, [r0, #8]
 80022a8:	fa93 fca3 	rbit	ip, r3
 80022ac:	fabc fc8c 	clz	ip, ip
 80022b0:	fa93 f9a3 	rbit	r9, r3
 80022b4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80022b8:	fa05 fc0c 	lsl.w	ip, r5, ip
 80022bc:	ea26 0c0c 	bic.w	ip, r6, ip
 80022c0:	fab9 f989 	clz	r9, r9
 80022c4:	688e      	ldr	r6, [r1, #8]
 80022c6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80022ca:	fa06 f609 	lsl.w	r6, r6, r9
 80022ce:	ea4c 0606 	orr.w	r6, ip, r6
 80022d2:	6086      	str	r6, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80022d4:	68c6      	ldr	r6, [r0, #12]
 80022d6:	fa93 fca3 	rbit	ip, r3
 80022da:	fabc fc8c 	clz	ip, ip
 80022de:	fa93 f9a3 	rbit	r9, r3
 80022e2:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80022e6:	fa05 fc0c 	lsl.w	ip, r5, ip
 80022ea:	ea26 0c0c 	bic.w	ip, r6, ip
 80022ee:	fab9 f989 	clz	r9, r9
 80022f2:	690e      	ldr	r6, [r1, #16]
 80022f4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80022f8:	fa06 f609 	lsl.w	r6, r6, r9
 80022fc:	ea4c 0606 	orr.w	r6, ip, r6
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002300:	f1b8 0f02 	cmp.w	r8, #2
 8002304:	60c6      	str	r6, [r0, #12]
 8002306:	d11c      	bne.n	8002342 <LL_GPIO_Init+0x114>
 8002308:	fa93 f6a3 	rbit	r6, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800230c:	fab6 f686 	clz	r6, r6
 8002310:	2e07      	cmp	r6, #7
 8002312:	f8d1 c014 	ldr.w	ip, [r1, #20]
 8002316:	dc16      	bgt.n	8002346 <LL_GPIO_Init+0x118>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002318:	f8d0 8020 	ldr.w	r8, [r0, #32]
 800231c:	fa93 f6a3 	rbit	r6, r3
 8002320:	fab6 f686 	clz	r6, r6
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	fab3 f383 	clz	r3, r3
 800232c:	00b6      	lsls	r6, r6, #2
 800232e:	fa07 f606 	lsl.w	r6, r7, r6
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	ea28 0606 	bic.w	r6, r8, r6
 8002338:	fa0c fc03 	lsl.w	ip, ip, r3
 800233c:	ea46 060c 	orr.w	r6, r6, ip
 8002340:	6206      	str	r6, [r0, #32]
    pinpos++;
 8002342:	3401      	adds	r4, #1
 8002344:	e77e      	b.n	8002244 <LL_GPIO_Init+0x16>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002346:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
 800234a:	0a1b      	lsrs	r3, r3, #8
 800234c:	fa93 f6a3 	rbit	r6, r3
 8002350:	fab6 f686 	clz	r6, r6
 8002354:	fa93 f3a3 	rbit	r3, r3
 8002358:	fab3 f383 	clz	r3, r3
 800235c:	00b6      	lsls	r6, r6, #2
 800235e:	fa07 f606 	lsl.w	r6, r7, r6
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	ea28 0606 	bic.w	r6, r8, r6
 8002368:	fa0c f303 	lsl.w	r3, ip, r3
 800236c:	4333      	orrs	r3, r6
 800236e:	6243      	str	r3, [r0, #36]	; 0x24
 8002370:	e7e7      	b.n	8002342 <LL_GPIO_Init+0x114>
	...

08002374 <LL_AHB1_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <LL_AHB1_GRP1_EnableClock+0x18>)
 8002376:	695a      	ldr	r2, [r3, #20]
 8002378:	4302      	orrs	r2, r0
 800237a:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800237c:	695b      	ldr	r3, [r3, #20]
{
 800237e:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002380:	4018      	ands	r0, r3
 8002382:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8002384:	9b01      	ldr	r3, [sp, #4]
}
 8002386:	b002      	add	sp, #8
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	40021000 	.word	0x40021000

08002390 <LL_GPIO_SetPinMode>:
{
 8002390:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002392:	6803      	ldr	r3, [r0, #0]
 8002394:	fa91 f4a1 	rbit	r4, r1
 8002398:	fab4 f484 	clz	r4, r4
 800239c:	fa91 f1a1 	rbit	r1, r1
 80023a0:	2503      	movs	r5, #3
 80023a2:	fab1 f181 	clz	r1, r1
 80023a6:	0064      	lsls	r4, r4, #1
 80023a8:	fa05 f404 	lsl.w	r4, r5, r4
 80023ac:	0049      	lsls	r1, r1, #1
 80023ae:	ea23 0304 	bic.w	r3, r3, r4
 80023b2:	fa02 f101 	lsl.w	r1, r2, r1
 80023b6:	4319      	orrs	r1, r3
 80023b8:	6001      	str	r1, [r0, #0]
 80023ba:	bd30      	pop	{r4, r5, pc}

080023bc <DRV8323_writeSpi>:
                                

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void DRV8323_writeSpi(uint8_t regAdr, uint16_t regVal)
{
 80023bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint16_t controlword = (regAdr & 0x7) << 11 | (regVal & 0x7ff); //MSbit =0 for write, address is 3 bits (MSbit is always 0), data is 11 bits
 80023be:	02c0      	lsls	r0, r0, #11
 80023c0:	ac02      	add	r4, sp, #8
 80023c2:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80023c6:	f400 5060 	and.w	r0, r0, #14336	; 0x3800
 80023ca:	4308      	orrs	r0, r1

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80023cc:	4d0a      	ldr	r5, [pc, #40]	; (80023f8 <DRV8323_writeSpi+0x3c>)
	uint16_t controlword = (regAdr & 0x7) << 11 | (regVal & 0x7ff); //MSbit =0 for write, address is 3 bits (MSbit is always 0), data is 11 bits
 80023ce:	f824 0d02 	strh.w	r0, [r4, #-2]!
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80023d2:	2200      	movs	r2, #0
 80023d4:	4628      	mov	r0, r5
 80023d6:	2104      	movs	r1, #4
 80023d8:	f7fe fab8 	bl	800094c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t*)(&controlword), 1, 1000);
 80023dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023e0:	4621      	mov	r1, r4
 80023e2:	2201      	movs	r2, #1
 80023e4:	4805      	ldr	r0, [pc, #20]	; (80023fc <DRV8323_writeSpi+0x40>)
 80023e6:	f7ff f856 	bl	8001496 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80023ea:	2201      	movs	r2, #1
 80023ec:	2104      	movs	r1, #4
 80023ee:	4628      	mov	r0, r5
 80023f0:	f7fe faac 	bl	800094c <HAL_GPIO_WritePin>
	return;
}
 80023f4:	b003      	add	sp, #12
 80023f6:	bd30      	pop	{r4, r5, pc}
 80023f8:	48000c00 	.word	0x48000c00
 80023fc:	20000194 	.word	0x20000194

08002400 <DRV8323_setupSpi>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
	return (0x7ff&recbuff);
}

void DRV8323_setupSpi()
{
 8002400:	b508      	push	{r3, lr}
//    volatile uint16_t temp;
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); //PC5 is enable to motor controller
 8002402:	2201      	movs	r2, #1
 8002404:	2120      	movs	r1, #32
 8002406:	4818      	ldr	r0, [pc, #96]	; (8002468 <DRV8323_setupSpi+0x68>)
 8002408:	f7fe faa0 	bl	800094c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800240c:	2001      	movs	r0, #1
 800240e:	f7fd ff15 	bl	800023c <HAL_Delay>
	DRV8323_writeSpi(ADR_DRV_CTRL, DRV8323regDrvCtrl);
 8002412:	4b16      	ldr	r3, [pc, #88]	; (800246c <DRV8323_setupSpi+0x6c>)
 8002414:	2002      	movs	r0, #2
 8002416:	8819      	ldrh	r1, [r3, #0]
 8002418:	f7ff ffd0 	bl	80023bc <DRV8323_writeSpi>
	HAL_Delay(1);
 800241c:	2001      	movs	r0, #1
 800241e:	f7fd ff0d 	bl	800023c <HAL_Delay>
	DRV8323_writeSpi(ADR_GATE_DRV_HS, DRV8323regGateDrvHS);
 8002422:	4b13      	ldr	r3, [pc, #76]	; (8002470 <DRV8323_setupSpi+0x70>)
 8002424:	2003      	movs	r0, #3
 8002426:	8819      	ldrh	r1, [r3, #0]
 8002428:	f7ff ffc8 	bl	80023bc <DRV8323_writeSpi>
	HAL_Delay(2);
 800242c:	2002      	movs	r0, #2
 800242e:	f7fd ff05 	bl	800023c <HAL_Delay>
	DRV8323_writeSpi(ADR_GATE_DRV_LS, DRV8323regGateDrvLS);
 8002432:	4b10      	ldr	r3, [pc, #64]	; (8002474 <DRV8323_setupSpi+0x74>)
 8002434:	2004      	movs	r0, #4
 8002436:	8819      	ldrh	r1, [r3, #0]
 8002438:	f7ff ffc0 	bl	80023bc <DRV8323_writeSpi>
	HAL_Delay(2);
 800243c:	2002      	movs	r0, #2
 800243e:	f7fd fefd 	bl	800023c <HAL_Delay>
	DRV8323_writeSpi(ADR_OCP_CTRL, DRV8323regOcpCtrl);
 8002442:	4b0d      	ldr	r3, [pc, #52]	; (8002478 <DRV8323_setupSpi+0x78>)
 8002444:	2005      	movs	r0, #5
 8002446:	8819      	ldrh	r1, [r3, #0]
 8002448:	f7ff ffb8 	bl	80023bc <DRV8323_writeSpi>
	HAL_Delay(2);
 800244c:	2002      	movs	r0, #2
 800244e:	f7fd fef5 	bl	800023c <HAL_Delay>
	DRV8323_writeSpi(ADR_CSA_CTRL, DRV8323regCsaCtrl);
 8002452:	4b0a      	ldr	r3, [pc, #40]	; (800247c <DRV8323_setupSpi+0x7c>)
 8002454:	2006      	movs	r0, #6
 8002456:	8819      	ldrh	r1, [r3, #0]
 8002458:	f7ff ffb0 	bl	80023bc <DRV8323_writeSpi>
	HAL_Delay(2);
 800245c:	2002      	movs	r0, #2
 //   temp = DRV8323_readSpi(ADR_GATE_DRV_HS);
//    temp = DRV8323_readSpi(ADR_GATE_DRV_LS);
 //   temp = DRV8323_readSpi(ADR_OCP_CTRL);
//    temp = DRV8323_readSpi(ADR_CSA_CTRL);
	return;
}
 800245e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(2);
 8002462:	f7fd beeb 	b.w	800023c <HAL_Delay>
 8002466:	bf00      	nop
 8002468:	48000800 	.word	0x48000800
 800246c:	20000070 	.word	0x20000070
 8002470:	20000002 	.word	0x20000002
 8002474:	20000004 	.word	0x20000004
 8002478:	20000006 	.word	0x20000006
 800247c:	20000000 	.word	0x20000000

08002480 <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 8002480:	b530      	push	{r4, r5, lr}
 8002482:	4288      	cmp	r0, r1
		x = in_min;
	}
	if (x > in_max){
		x = in_max;
	}
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002484:	9c03      	ldr	r4, [sp, #12]
 8002486:	bfb8      	it	lt
 8002488:	4608      	movlt	r0, r1
 800248a:	4282      	cmp	r2, r0
 800248c:	bfd4      	ite	le
 800248e:	ebc1 0502 	rsble	r5, r1, r2
 8002492:	ebc1 0500 	rsbgt	r5, r1, r0
 8002496:	1ae0      	subs	r0, r4, r3
 8002498:	4368      	muls	r0, r5
 800249a:	1a52      	subs	r2, r2, r1
 800249c:	fb90 f0f2 	sdiv	r0, r0, r2

}
 80024a0:	4418      	add	r0, r3
 80024a2:	bd30      	pop	{r4, r5, pc}

080024a4 <phaseA>:


/* PhaseA() B and C.
 * Sets the pin mode for the PWM output depending on the phase.
 */
void phaseA(int newPhase) {
 80024a4:	b538      	push	{r3, r4, r5, lr}
	if (newPhase == pwm) {
 80024a6:	4b26      	ldr	r3, [pc, #152]	; (8002540 <phaseA+0x9c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4283      	cmp	r3, r0
void phaseA(int newPhase) {
 80024ac:	4604      	mov	r4, r0
	if (newPhase == pwm) {
 80024ae:	d112      	bne.n	80024d6 <phaseA+0x32>
		if(!slow_decay){
 80024b0:	4b24      	ldr	r3, [pc, #144]	; (8002544 <phaseA+0xa0>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d13b      	bne.n	8002530 <phaseA+0x8c>
			LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_7, LL_GPIO_MODE_OUTPUT);
 80024b8:	2201      	movs	r2, #1
 80024ba:	2180      	movs	r1, #128	; 0x80
 80024bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024c0:	f7ff ff66 	bl	8002390 <LL_GPIO_SetPinMode>
			GPIOA->BRR = GPIO_PIN_7;
 80024c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024c8:	2280      	movs	r2, #128	; 0x80
 80024ca:	629a      	str	r2, [r3, #40]	; 0x28
		}else{
			LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_7, LL_GPIO_MODE_ALTERNATE); // low
		}
		LL_GPIO_SetPinMode(GPIOC, GPIO_PIN_0, LL_GPIO_MODE_ALTERNATE);  // high
 80024cc:	2202      	movs	r2, #2
 80024ce:	2101      	movs	r1, #1
 80024d0:	481d      	ldr	r0, [pc, #116]	; (8002548 <phaseA+0xa4>)
 80024d2:	f7ff ff5d 	bl	8002390 <LL_GPIO_SetPinMode>

	}

	if (newPhase == floating) {
 80024d6:	4b1d      	ldr	r3, [pc, #116]	; (800254c <phaseA+0xa8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	429c      	cmp	r4, r3
 80024dc:	d111      	bne.n	8002502 <phaseA+0x5e>
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_7, LL_GPIO_MODE_OUTPUT);
 80024de:	2201      	movs	r2, #1
 80024e0:	2180      	movs	r1, #128	; 0x80
 80024e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e6:	f7ff ff53 	bl	8002390 <LL_GPIO_SetPinMode>
		GPIOA->BRR = GPIO_PIN_7;
 80024ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024ee:	2280      	movs	r2, #128	; 0x80
		LL_GPIO_SetPinMode(GPIOC, GPIO_PIN_0, LL_GPIO_MODE_OUTPUT);
 80024f0:	4d15      	ldr	r5, [pc, #84]	; (8002548 <phaseA+0xa4>)
		GPIOA->BRR = GPIO_PIN_7;
 80024f2:	629a      	str	r2, [r3, #40]	; 0x28
		LL_GPIO_SetPinMode(GPIOC, GPIO_PIN_0, LL_GPIO_MODE_OUTPUT);
 80024f4:	2201      	movs	r2, #1
 80024f6:	4611      	mov	r1, r2
 80024f8:	4628      	mov	r0, r5
 80024fa:	f7ff ff49 	bl	8002390 <LL_GPIO_SetPinMode>
		GPIOC->BRR = GPIO_PIN_0;
 80024fe:	2301      	movs	r3, #1
 8002500:	62ab      	str	r3, [r5, #40]	; 0x28
	}

	if (newPhase == lowside) {          // low mosfet on
 8002502:	4b13      	ldr	r3, [pc, #76]	; (8002550 <phaseA+0xac>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	429c      	cmp	r4, r3
 8002508:	d111      	bne.n	800252e <phaseA+0x8a>
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_7, LL_GPIO_MODE_OUTPUT);
 800250a:	2201      	movs	r2, #1
 800250c:	2180      	movs	r1, #128	; 0x80
 800250e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002512:	f7ff ff3d 	bl	8002390 <LL_GPIO_SetPinMode>
		GPIOA->BSRR = GPIO_PIN_7;
 8002516:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800251a:	2280      	movs	r2, #128	; 0x80
		LL_GPIO_SetPinMode(GPIOC, GPIO_PIN_0, LL_GPIO_MODE_OUTPUT);
 800251c:	4c0a      	ldr	r4, [pc, #40]	; (8002548 <phaseA+0xa4>)
		GPIOA->BSRR = GPIO_PIN_7;
 800251e:	619a      	str	r2, [r3, #24]
		LL_GPIO_SetPinMode(GPIOC, GPIO_PIN_0, LL_GPIO_MODE_OUTPUT);
 8002520:	2201      	movs	r2, #1
 8002522:	4611      	mov	r1, r2
 8002524:	4620      	mov	r0, r4
 8002526:	f7ff ff33 	bl	8002390 <LL_GPIO_SetPinMode>
		GPIOC->BRR = GPIO_PIN_0;
 800252a:	2301      	movs	r3, #1
 800252c:	62a3      	str	r3, [r4, #40]	; 0x28
 800252e:	bd38      	pop	{r3, r4, r5, pc}
			LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_7, LL_GPIO_MODE_ALTERNATE); // low
 8002530:	2202      	movs	r2, #2
 8002532:	2180      	movs	r1, #128	; 0x80
 8002534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002538:	f7ff ff2a 	bl	8002390 <LL_GPIO_SetPinMode>
 800253c:	e7c6      	b.n	80024cc <phaseA+0x28>
 800253e:	bf00      	nop
 8002540:	2000002c 	.word	0x2000002c
 8002544:	2000003c 	.word	0x2000003c
 8002548:	48000800 	.word	0x48000800
 800254c:	20000018 	.word	0x20000018
 8002550:	20000024 	.word	0x20000024

08002554 <phaseB>:
	}

}

void phaseB(int newPhase) {
 8002554:	b538      	push	{r3, r4, r5, lr}

	if (newPhase == pwm) {
 8002556:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <phaseB+0x8c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4283      	cmp	r3, r0
void phaseB(int newPhase) {
 800255c:	4604      	mov	r4, r0
	if (newPhase == pwm) {
 800255e:	d110      	bne.n	8002582 <phaseB+0x2e>
		if(!slow_decay){
 8002560:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <phaseB+0x90>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d135      	bne.n	80025d4 <phaseB+0x80>
			LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_0, LL_GPIO_MODE_OUTPUT);
 8002568:	4d1f      	ldr	r5, [pc, #124]	; (80025e8 <phaseB+0x94>)
 800256a:	2201      	movs	r2, #1
 800256c:	4611      	mov	r1, r2
 800256e:	4628      	mov	r0, r5
 8002570:	f7ff ff0e 	bl	8002390 <LL_GPIO_SetPinMode>
			GPIOB->BRR = GPIO_PIN_0;
 8002574:	2301      	movs	r3, #1
 8002576:	62ab      	str	r3, [r5, #40]	; 0x28
		}else{
			LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_0, LL_GPIO_MODE_ALTERNATE);
		}
		LL_GPIO_SetPinMode(GPIOC, GPIO_PIN_1, LL_GPIO_MODE_ALTERNATE);
 8002578:	2202      	movs	r2, #2
 800257a:	4611      	mov	r1, r2
 800257c:	481b      	ldr	r0, [pc, #108]	; (80025ec <phaseB+0x98>)
 800257e:	f7ff ff07 	bl	8002390 <LL_GPIO_SetPinMode>

	}

	if (newPhase == floating) {            // floating
 8002582:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <phaseB+0x9c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	429c      	cmp	r4, r3
 8002588:	d10f      	bne.n	80025aa <phaseB+0x56>
		LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_0, LL_GPIO_MODE_OUTPUT);
 800258a:	4d17      	ldr	r5, [pc, #92]	; (80025e8 <phaseB+0x94>)
 800258c:	2201      	movs	r2, #1
 800258e:	4628      	mov	r0, r5
 8002590:	4611      	mov	r1, r2
 8002592:	f7ff fefd 	bl	8002390 <LL_GPIO_SetPinMode>
		GPIOB->BRR = GPIO_PIN_0;
 8002596:	2201      	movs	r2, #1
 8002598:	62aa      	str	r2, [r5, #40]	; 0x28
		LL_GPIO_SetPinMode(GPIOC, GPIO_PIN_1, LL_GPIO_MODE_OUTPUT);
 800259a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800259e:	2102      	movs	r1, #2
 80025a0:	4628      	mov	r0, r5
 80025a2:	f7ff fef5 	bl	8002390 <LL_GPIO_SetPinMode>
		GPIOC->BRR = GPIO_PIN_1;
 80025a6:	2302      	movs	r3, #2
 80025a8:	62ab      	str	r3, [r5, #40]	; 0x28
	}

	if (newPhase == lowside) {              // lowside
 80025aa:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <phaseB+0xa0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	429c      	cmp	r4, r3
 80025b0:	d10f      	bne.n	80025d2 <phaseB+0x7e>
		LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_0, LL_GPIO_MODE_OUTPUT);
 80025b2:	4c0d      	ldr	r4, [pc, #52]	; (80025e8 <phaseB+0x94>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	4620      	mov	r0, r4
 80025b8:	4611      	mov	r1, r2
 80025ba:	f7ff fee9 	bl	8002390 <LL_GPIO_SetPinMode>
		GPIOB->BSRR = GPIO_PIN_0;
 80025be:	2201      	movs	r2, #1
 80025c0:	61a2      	str	r2, [r4, #24]
		LL_GPIO_SetPinMode(GPIOC, GPIO_PIN_1, LL_GPIO_MODE_OUTPUT);
 80025c2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80025c6:	2102      	movs	r1, #2
 80025c8:	4620      	mov	r0, r4
 80025ca:	f7ff fee1 	bl	8002390 <LL_GPIO_SetPinMode>
		GPIOC->BRR = GPIO_PIN_1;
 80025ce:	2302      	movs	r3, #2
 80025d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80025d2:	bd38      	pop	{r3, r4, r5, pc}
			LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_0, LL_GPIO_MODE_ALTERNATE);
 80025d4:	2202      	movs	r2, #2
 80025d6:	2101      	movs	r1, #1
 80025d8:	4803      	ldr	r0, [pc, #12]	; (80025e8 <phaseB+0x94>)
 80025da:	f7ff fed9 	bl	8002390 <LL_GPIO_SetPinMode>
 80025de:	e7cb      	b.n	8002578 <phaseB+0x24>
 80025e0:	2000002c 	.word	0x2000002c
 80025e4:	2000003c 	.word	0x2000003c
 80025e8:	48000400 	.word	0x48000400
 80025ec:	48000800 	.word	0x48000800
 80025f0:	20000018 	.word	0x20000018
 80025f4:	20000024 	.word	0x20000024

080025f8 <phaseC>:
	}
}

void phaseC(int newPhase) {
 80025f8:	b538      	push	{r3, r4, r5, lr}
	if (newPhase == pwm) {
 80025fa:	4b23      	ldr	r3, [pc, #140]	; (8002688 <phaseC+0x90>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4283      	cmp	r3, r0
void phaseC(int newPhase) {
 8002600:	4604      	mov	r4, r0
	if (newPhase == pwm) {
 8002602:	d110      	bne.n	8002626 <phaseC+0x2e>
		if(!slow_decay){
 8002604:	4b21      	ldr	r3, [pc, #132]	; (800268c <phaseC+0x94>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d137      	bne.n	800267c <phaseC+0x84>
			LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_1, LL_GPIO_MODE_OUTPUT);
 800260c:	4d20      	ldr	r5, [pc, #128]	; (8002690 <phaseC+0x98>)
 800260e:	2201      	movs	r2, #1
 8002610:	2102      	movs	r1, #2
 8002612:	4628      	mov	r0, r5
 8002614:	f7ff febc 	bl	8002390 <LL_GPIO_SetPinMode>
			GPIOB->BRR = GPIO_PIN_1;
 8002618:	2302      	movs	r3, #2
 800261a:	62ab      	str	r3, [r5, #40]	; 0x28
		}else{
			LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_1, LL_GPIO_MODE_ALTERNATE);
		}
		LL_GPIO_SetPinMode(GPIOC, GPIO_PIN_2, LL_GPIO_MODE_ALTERNATE);
 800261c:	2202      	movs	r2, #2
 800261e:	2104      	movs	r1, #4
 8002620:	481c      	ldr	r0, [pc, #112]	; (8002694 <phaseC+0x9c>)
 8002622:	f7ff feb5 	bl	8002390 <LL_GPIO_SetPinMode>

	}

	if (newPhase == floating) {
 8002626:	4b1c      	ldr	r3, [pc, #112]	; (8002698 <phaseC+0xa0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	429c      	cmp	r4, r3
 800262c:	d110      	bne.n	8002650 <phaseC+0x58>
		LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_1, LL_GPIO_MODE_OUTPUT);
 800262e:	4d18      	ldr	r5, [pc, #96]	; (8002690 <phaseC+0x98>)
 8002630:	2201      	movs	r2, #1
 8002632:	4628      	mov	r0, r5
 8002634:	2102      	movs	r1, #2
 8002636:	f7ff feab 	bl	8002390 <LL_GPIO_SetPinMode>
		GPIOB->BRR = GPIO_PIN_1;
 800263a:	2302      	movs	r3, #2
 800263c:	62ab      	str	r3, [r5, #40]	; 0x28
		LL_GPIO_SetPinMode(GPIOC, GPIO_PIN_2, LL_GPIO_MODE_OUTPUT);
 800263e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002642:	2201      	movs	r2, #1
 8002644:	2104      	movs	r1, #4
 8002646:	4628      	mov	r0, r5
 8002648:	f7ff fea2 	bl	8002390 <LL_GPIO_SetPinMode>
		GPIOC->BRR = GPIO_PIN_2;
 800264c:	2304      	movs	r3, #4
 800264e:	62ab      	str	r3, [r5, #40]	; 0x28
	}

	if (newPhase == lowside) {
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <phaseC+0xa4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	429c      	cmp	r4, r3
 8002656:	d110      	bne.n	800267a <phaseC+0x82>
		LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_1, LL_GPIO_MODE_OUTPUT);
 8002658:	4c0d      	ldr	r4, [pc, #52]	; (8002690 <phaseC+0x98>)
 800265a:	2201      	movs	r2, #1
 800265c:	4620      	mov	r0, r4
 800265e:	2102      	movs	r1, #2
 8002660:	f7ff fe96 	bl	8002390 <LL_GPIO_SetPinMode>
		GPIOB->BSRR = GPIO_PIN_1;
 8002664:	2302      	movs	r3, #2
 8002666:	61a3      	str	r3, [r4, #24]
		LL_GPIO_SetPinMode(GPIOC, GPIO_PIN_2, LL_GPIO_MODE_OUTPUT);
 8002668:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800266c:	2201      	movs	r2, #1
 800266e:	2104      	movs	r1, #4
 8002670:	4620      	mov	r0, r4
 8002672:	f7ff fe8d 	bl	8002390 <LL_GPIO_SetPinMode>
		GPIOC->BRR = GPIO_PIN_2;
 8002676:	2304      	movs	r3, #4
 8002678:	62a3      	str	r3, [r4, #40]	; 0x28
 800267a:	bd38      	pop	{r3, r4, r5, pc}
			LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_1, LL_GPIO_MODE_ALTERNATE);
 800267c:	2202      	movs	r2, #2
 800267e:	4611      	mov	r1, r2
 8002680:	4803      	ldr	r0, [pc, #12]	; (8002690 <phaseC+0x98>)
 8002682:	f7ff fe85 	bl	8002390 <LL_GPIO_SetPinMode>
 8002686:	e7c9      	b.n	800261c <phaseC+0x24>
 8002688:	2000002c 	.word	0x2000002c
 800268c:	2000003c 	.word	0x2000003c
 8002690:	48000400 	.word	0x48000400
 8002694:	48000800 	.word	0x48000800
 8002698:	20000018 	.word	0x20000018
 800269c:	20000024 	.word	0x20000024

080026a0 <comStep>:
/*
 * sets phase A , B , C to either pwm , low or floating depending on the drive step
 */
void comStep(int newStep) {

	if (newStep == 1) {			//A-B
 80026a0:	2801      	cmp	r0, #1
void comStep(int newStep) {
 80026a2:	b508      	push	{r3, lr}
	if (newStep == 1) {			//A-B
 80026a4:	d10c      	bne.n	80026c0 <comStep+0x20>
		phaseA(pwm);
 80026a6:	4b25      	ldr	r3, [pc, #148]	; (800273c <comStep+0x9c>)
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	f7ff fefb 	bl	80024a4 <phaseA>
		phaseB(lowside);
 80026ae:	4b24      	ldr	r3, [pc, #144]	; (8002740 <comStep+0xa0>)
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	f7ff ff4f 	bl	8002554 <phaseB>
		phaseC(floating);
 80026b6:	4b23      	ldr	r3, [pc, #140]	; (8002744 <comStep+0xa4>)
	}

	if (newStep == 2) {			// C-B
		phaseA(floating);
		phaseB(lowside);
		phaseC(pwm);
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	f7ff ff9d 	bl	80025f8 <phaseC>
 80026be:	bd08      	pop	{r3, pc}
	if (newStep == 2) {			// C-B
 80026c0:	2802      	cmp	r0, #2
 80026c2:	d109      	bne.n	80026d8 <comStep+0x38>
		phaseA(floating);
 80026c4:	4b1f      	ldr	r3, [pc, #124]	; (8002744 <comStep+0xa4>)
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	f7ff feec 	bl	80024a4 <phaseA>
		phaseB(lowside);
 80026cc:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <comStep+0xa0>)
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	f7ff ff40 	bl	8002554 <phaseB>
		phaseC(pwm);
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <comStep+0x9c>)
 80026d6:	e7ef      	b.n	80026b8 <comStep+0x18>
	}

	if (newStep == 3) {		// C-A
 80026d8:	2803      	cmp	r0, #3
 80026da:	d10d      	bne.n	80026f8 <comStep+0x58>
		phaseA(lowside);
 80026dc:	4b18      	ldr	r3, [pc, #96]	; (8002740 <comStep+0xa0>)
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	f7ff fee0 	bl	80024a4 <phaseA>
		phaseB(floating);
 80026e4:	4b17      	ldr	r3, [pc, #92]	; (8002744 <comStep+0xa4>)
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	f7ff ff34 	bl	8002554 <phaseB>
		phaseC(pwm);
 80026ec:	4b13      	ldr	r3, [pc, #76]	; (800273c <comStep+0x9c>)
	}

	if (newStep == 6) {       // A-C
		phaseA(pwm);
		phaseB(floating);
		phaseC(lowside);
 80026ee:	6818      	ldr	r0, [r3, #0]
	}

}
 80026f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		phaseC(lowside);
 80026f4:	f7ff bf80 	b.w	80025f8 <phaseC>
	if (newStep == 4) {    // B-A
 80026f8:	2804      	cmp	r0, #4
 80026fa:	d109      	bne.n	8002710 <comStep+0x70>
		phaseA(lowside);
 80026fc:	4b10      	ldr	r3, [pc, #64]	; (8002740 <comStep+0xa0>)
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	f7ff fed0 	bl	80024a4 <phaseA>
		phaseB(pwm);
 8002704:	4b0d      	ldr	r3, [pc, #52]	; (800273c <comStep+0x9c>)
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	f7ff ff24 	bl	8002554 <phaseB>
		phaseC(floating);
 800270c:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <comStep+0xa4>)
 800270e:	e7ee      	b.n	80026ee <comStep+0x4e>
	if (newStep == 5) {          // B-C
 8002710:	2805      	cmp	r0, #5
 8002712:	d109      	bne.n	8002728 <comStep+0x88>
		phaseA(floating);
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <comStep+0xa4>)
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	f7ff fec4 	bl	80024a4 <phaseA>
		phaseB(pwm);
 800271c:	4b07      	ldr	r3, [pc, #28]	; (800273c <comStep+0x9c>)
		phaseB(floating);
 800271e:	6818      	ldr	r0, [r3, #0]
 8002720:	f7ff ff18 	bl	8002554 <phaseB>
		phaseC(lowside);
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <comStep+0xa0>)
 8002726:	e7e2      	b.n	80026ee <comStep+0x4e>
	if (newStep == 6) {       // A-C
 8002728:	2806      	cmp	r0, #6
 800272a:	d105      	bne.n	8002738 <comStep+0x98>
		phaseA(pwm);
 800272c:	4b03      	ldr	r3, [pc, #12]	; (800273c <comStep+0x9c>)
 800272e:	6818      	ldr	r0, [r3, #0]
 8002730:	f7ff feb8 	bl	80024a4 <phaseA>
		phaseB(floating);
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <comStep+0xa4>)
 8002736:	e7f2      	b.n	800271e <comStep+0x7e>
 8002738:	bd08      	pop	{r3, pc}
 800273a:	bf00      	nop
 800273c:	2000002c 	.word	0x2000002c
 8002740:	20000024 	.word	0x20000024
 8002744:	20000018 	.word	0x20000018

08002748 <allOff>:

void allOff() {          // all motor pwm output low
 8002748:	b510      	push	{r4, lr}
	phaseA(floating);
 800274a:	4c06      	ldr	r4, [pc, #24]	; (8002764 <allOff+0x1c>)
 800274c:	6820      	ldr	r0, [r4, #0]
 800274e:	f7ff fea9 	bl	80024a4 <phaseA>
	phaseB(floating);
 8002752:	6820      	ldr	r0, [r4, #0]
 8002754:	f7ff fefe 	bl	8002554 <phaseB>
	phaseC(floating);
 8002758:	6820      	ldr	r0, [r4, #0]
}
 800275a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	phaseC(floating);
 800275e:	f7ff bf4b 	b.w	80025f8 <phaseC>
 8002762:	bf00      	nop
 8002764:	20000018 	.word	0x20000018

08002768 <fullBrake>:

void fullBrake(){               // turns on lower mosfets to short motor windings and brake
 8002768:	b510      	push	{r4, lr}
	phaseA(lowside);
 800276a:	4c06      	ldr	r4, [pc, #24]	; (8002784 <fullBrake+0x1c>)
 800276c:	6820      	ldr	r0, [r4, #0]
 800276e:	f7ff fe99 	bl	80024a4 <phaseA>
	phaseB(lowside);
 8002772:	6820      	ldr	r0, [r4, #0]
 8002774:	f7ff feee 	bl	8002554 <phaseB>
	phaseC(lowside);
 8002778:	6820      	ldr	r0, [r4, #0]
}
 800277a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	phaseC(lowside);
 800277e:	f7ff bf3b 	b.w	80025f8 <phaseC>
 8002782:	bf00      	nop
 8002784:	20000024 	.word	0x20000024

08002788 <changeCompInput>:


/*
 * Sets the comparator input to the correct one for the current step.
 */
void changeCompInput() {
 8002788:	b508      	push	{r3, lr}


	if (step == 1 || step == 4) {   // c floating
 800278a:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <changeCompInput+0x48>)
 800278c:	4a11      	ldr	r2, [pc, #68]	; (80027d4 <changeCompInput+0x4c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d001      	beq.n	8002798 <changeCompInput+0x10>
 8002794:	2b04      	cmp	r3, #4
 8002796:	d101      	bne.n	800279c <changeCompInput+0x14>
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH2;
 8002798:	2150      	movs	r1, #80	; 0x50
 800279a:	6051      	str	r1, [r2, #4]
	}

	if (step == 2 || step == 5) {     // a floating
 800279c:	2b02      	cmp	r3, #2
 800279e:	d001      	beq.n	80027a4 <changeCompInput+0x1c>
 80027a0:	2b05      	cmp	r3, #5
 80027a2:	d101      	bne.n	80027a8 <changeCompInput+0x20>
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_IO1;
 80027a4:	2160      	movs	r1, #96	; 0x60
 80027a6:	6051      	str	r1, [r2, #4]
	}

	if (step == 3 || step == 6) {      // b floating
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d001      	beq.n	80027b0 <changeCompInput+0x28>
 80027ac:	2b06      	cmp	r3, #6
 80027ae:	d101      	bne.n	80027b4 <changeCompInput+0x2c>
		hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 80027b0:	2340      	movs	r3, #64	; 0x40
 80027b2:	6053      	str	r3, [r2, #4]
	}
	if (rising){
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <changeCompInput+0x50>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	b133      	cbz	r3, 80027c8 <changeCompInput+0x40>
		hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_FALLING;   // polarity of comp output is reversed
 80027ba:	2302      	movs	r3, #2
	}else{                          // falling bemf
		hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
	}

	if (HAL_COMP_Init(&hcomp1) != HAL_OK) {
 80027bc:	4805      	ldr	r0, [pc, #20]	; (80027d4 <changeCompInput+0x4c>)
		hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 80027be:	6253      	str	r3, [r2, #36]	; 0x24
	if (HAL_COMP_Init(&hcomp1) != HAL_OK) {
 80027c0:	f7fd fd4c 	bl	800025c <HAL_COMP_Init>
 80027c4:	b110      	cbz	r0, 80027cc <changeCompInput+0x44>
 80027c6:	e7fe      	b.n	80027c6 <changeCompInput+0x3e>
		hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e7f7      	b.n	80027bc <changeCompInput+0x34>
 80027cc:	bd08      	pop	{r3, pc}
 80027ce:	bf00      	nop
 80027d0:	20000048 	.word	0x20000048
 80027d4:	20000128 	.word	0x20000128
 80027d8:	20000034 	.word	0x20000034

080027dc <commutate>:

/* commutate increments and changes the current commutation step and comparator input
 *  there are 6 steps for bldc drive per electrical revolution.
 */

void commutate() {
 80027dc:	b508      	push	{r3, lr}

	if (forward == 1){
 80027de:	4b1f      	ldr	r3, [pc, #124]	; (800285c <commutate+0x80>)
 80027e0:	4a1f      	ldr	r2, [pc, #124]	; (8002860 <commutate+0x84>)
 80027e2:	6819      	ldr	r1, [r3, #0]
 80027e4:	2901      	cmp	r1, #1
 80027e6:	d11e      	bne.n	8002826 <commutate+0x4a>
		step++;
 80027e8:	6813      	ldr	r3, [r2, #0]
 80027ea:	3301      	adds	r3, #1
 80027ec:	2b06      	cmp	r3, #6
 80027ee:	bfc8      	it	gt
 80027f0:	460b      	movgt	r3, r1
		if (step > 6) {
			step = 1;
		}
		if (step == 1 || step == 3 || step == 5) {
 80027f2:	f023 0102 	bic.w	r1, r3, #2
 80027f6:	2901      	cmp	r1, #1
		step++;
 80027f8:	6013      	str	r3, [r2, #0]
		if (step == 1 || step == 3 || step == 5) {
 80027fa:	d001      	beq.n	8002800 <commutate+0x24>
 80027fc:	2b05      	cmp	r3, #5
 80027fe:	d102      	bne.n	8002806 <commutate+0x2a>
			rising = 1;
 8002800:	4918      	ldr	r1, [pc, #96]	; (8002864 <commutate+0x88>)
 8002802:	2001      	movs	r0, #1
 8002804:	6008      	str	r0, [r1, #0]
		}
		if (step == 2 || step == 4 || step == 6) {
 8002806:	f023 0104 	bic.w	r1, r3, #4
 800280a:	2902      	cmp	r1, #2
 800280c:	d001      	beq.n	8002812 <commutate+0x36>
 800280e:	2b04      	cmp	r3, #4
 8002810:	d102      	bne.n	8002818 <commutate+0x3c>
			rising = 0;
 8002812:	2100      	movs	r1, #0
		}
		if (step == 1 || step == 3 || step == 5) {
			rising = 0;
		}
		if (step == 2 || step == 4 || step == 6) {
			rising = 1;
 8002814:	4b13      	ldr	r3, [pc, #76]	; (8002864 <commutate+0x88>)
 8002816:	6019      	str	r1, [r3, #0]
		}
	}
	comStep(step);
 8002818:	6810      	ldr	r0, [r2, #0]
 800281a:	f7ff ff41 	bl	80026a0 <comStep>
	changeCompInput();
}
 800281e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	changeCompInput();
 8002822:	f7ff bfb1 	b.w	8002788 <changeCompInput>
	if (forward == 0){
 8002826:	2900      	cmp	r1, #0
 8002828:	d1f6      	bne.n	8002818 <commutate+0x3c>
		step--;
 800282a:	6813      	ldr	r3, [r2, #0]
 800282c:	3b01      	subs	r3, #1
		if (step < 1) {
 800282e:	2b00      	cmp	r3, #0
			step = 6;
 8002830:	bfd8      	it	le
 8002832:	2306      	movle	r3, #6
 8002834:	6013      	str	r3, [r2, #0]
		if (step == 1 || step == 3 || step == 5) {
 8002836:	6813      	ldr	r3, [r2, #0]
 8002838:	f023 0102 	bic.w	r1, r3, #2
 800283c:	2901      	cmp	r1, #1
 800283e:	d001      	beq.n	8002844 <commutate+0x68>
 8002840:	2b05      	cmp	r3, #5
 8002842:	d102      	bne.n	800284a <commutate+0x6e>
			rising = 0;
 8002844:	4907      	ldr	r1, [pc, #28]	; (8002864 <commutate+0x88>)
 8002846:	2000      	movs	r0, #0
 8002848:	6008      	str	r0, [r1, #0]
		if (step == 2 || step == 4 || step == 6) {
 800284a:	f023 0104 	bic.w	r1, r3, #4
 800284e:	2902      	cmp	r1, #2
 8002850:	d001      	beq.n	8002856 <commutate+0x7a>
 8002852:	2b04      	cmp	r3, #4
 8002854:	d1e0      	bne.n	8002818 <commutate+0x3c>
			rising = 1;
 8002856:	2101      	movs	r1, #1
 8002858:	e7dc      	b.n	8002814 <commutate+0x38>
 800285a:	bf00      	nop
 800285c:	2000001c 	.word	0x2000001c
 8002860:	20000048 	.word	0x20000048
 8002864:	20000034 	.word	0x20000034

08002868 <HAL_COMP_TriggerCallback>:




void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 8002868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (TIM3->CNT < commutation_interval>>1){
 800286c:	4b45      	ldr	r3, [pc, #276]	; (8002984 <HAL_COMP_TriggerCallback+0x11c>)
 800286e:	4f46      	ldr	r7, [pc, #280]	; (8002988 <HAL_COMP_TriggerCallback+0x120>)
 8002870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002872:	6839      	ldr	r1, [r7, #0]
 8002874:	ebb2 0f61 	cmp.w	r2, r1, asr #1
 8002878:	f0c0 8082 	bcc.w	8002980 <HAL_COMP_TriggerCallback+0x118>
//	}else{

		timestamp = TIM3->CNT;
	//	GPIOA->BSRR = GPIO_PIN_15;

	if (compit > 200){
 800287c:	4d43      	ldr	r5, [pc, #268]	; (800298c <HAL_COMP_TriggerCallback+0x124>)
		timestamp = TIM3->CNT;
 800287e:	4e44      	ldr	r6, [pc, #272]	; (8002990 <HAL_COMP_TriggerCallback+0x128>)
	if (compit > 200){
 8002880:	682a      	ldr	r2, [r5, #0]
		timestamp = TIM3->CNT;
 8002882:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002884:	6031      	str	r1, [r6, #0]
	if (compit > 200){
 8002886:	2ac8      	cmp	r2, #200	; 0xc8
 8002888:	dd07      	ble.n	800289a <HAL_COMP_TriggerCallback+0x32>
		HAL_COMP_Stop_IT(&hcomp1);
 800288a:	4842      	ldr	r0, [pc, #264]	; (8002994 <HAL_COMP_TriggerCallback+0x12c>)
 800288c:	f7fd fde2 	bl	8000454 <HAL_COMP_Stop_IT>
		error = 1;
 8002890:	4b41      	ldr	r3, [pc, #260]	; (8002998 <HAL_COMP_TriggerCallback+0x130>)
 8002892:	2201      	movs	r2, #1
 8002894:	701a      	strb	r2, [r3, #0]
		return;
 8002896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}
	compit +=1;
 800289a:	3201      	adds	r2, #1
 800289c:	602a      	str	r2, [r5, #0]
	while (TIM3->CNT - timestamp < filter_delay){
 800289e:	4a3f      	ldr	r2, [pc, #252]	; (800299c <HAL_COMP_TriggerCallback+0x134>)
 80028a0:	6810      	ldr	r0, [r2, #0]
 80028a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028a4:	1a52      	subs	r2, r2, r1
 80028a6:	4282      	cmp	r2, r0
 80028a8:	d3fb      	bcc.n	80028a2 <HAL_COMP_TriggerCallback+0x3a>

	}

	if (rising){
 80028aa:	4b3d      	ldr	r3, [pc, #244]	; (80029a0 <HAL_COMP_TriggerCallback+0x138>)
 80028ac:	f8df 8118 	ldr.w	r8, [pc, #280]	; 80029c8 <HAL_COMP_TriggerCallback+0x160>
 80028b0:	681c      	ldr	r4, [r3, #0]
 80028b2:	b964      	cbnz	r4, 80028ce <HAL_COMP_TriggerCallback+0x66>


	}else{
	//	advancedivisor = advancedivisordown;
		for (int i = 0; i < filter_level; i++){
		if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_LOW){
 80028b4:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8002994 <HAL_COMP_TriggerCallback+0x12c>
		for (int i = 0; i < filter_level; i++){
 80028b8:	f8d8 3000 	ldr.w	r3, [r8]
 80028bc:	429c      	cmp	r4, r3
 80028be:	da0d      	bge.n	80028dc <HAL_COMP_TriggerCallback+0x74>
		if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_LOW){
 80028c0:	4648      	mov	r0, r9
 80028c2:	f7fd fe21 	bl	8000508 <HAL_COMP_GetOutputLevel>
 80028c6:	2800      	cmp	r0, #0
 80028c8:	d05a      	beq.n	8002980 <HAL_COMP_TriggerCallback+0x118>
		for (int i = 0; i < filter_level; i++){
 80028ca:	3401      	adds	r4, #1
 80028cc:	e7f4      	b.n	80028b8 <HAL_COMP_TriggerCallback+0x50>
		if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_HIGH){
 80028ce:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8002994 <HAL_COMP_TriggerCallback+0x12c>
 80028d2:	2400      	movs	r4, #0
		for (int i = 0; i < filter_level; i++){
 80028d4:	f8d8 3000 	ldr.w	r3, [r8]
 80028d8:	429c      	cmp	r4, r3
 80028da:	db37      	blt.n	800294c <HAL_COMP_TriggerCallback+0xe4>
			return;
		}
		}

	}
	thiszctime = timestamp;
 80028dc:	6832      	ldr	r2, [r6, #0]
	TIM3->CNT = TIM3->CNT - timestamp;
 80028de:	4e29      	ldr	r6, [pc, #164]	; (8002984 <HAL_COMP_TriggerCallback+0x11c>)
	thiszctime = timestamp;
 80028e0:	4c30      	ldr	r4, [pc, #192]	; (80029a4 <HAL_COMP_TriggerCallback+0x13c>)
	TIM3->CNT = TIM3->CNT - timestamp;
 80028e2:	6a73      	ldr	r3, [r6, #36]	; 0x24
	thiszctime = timestamp;
 80028e4:	6022      	str	r2, [r4, #0]
	TIM3->CNT = TIM3->CNT - timestamp;
 80028e6:	1a9b      	subs	r3, r3, r2
 80028e8:	6273      	str	r3, [r6, #36]	; 0x24

	HAL_COMP_Stop_IT(&hcomp1);
 80028ea:	482a      	ldr	r0, [pc, #168]	; (8002994 <HAL_COMP_TriggerCallback+0x12c>)
 80028ec:	f7fd fdb2 	bl	8000454 <HAL_COMP_Stop_IT>

	zctimeout = 0;
 80028f0:	4b2d      	ldr	r3, [pc, #180]	; (80029a8 <HAL_COMP_TriggerCallback+0x140>)

				commutation_interval = ((5 *commutation_interval) + thiszctime) / 6;    // TEST!   divide by two when tracking up down time independant
	//			bad_commutation = 0;
//			}
			advance = commutation_interval / advancedivisor;
 80028f2:	492e      	ldr	r1, [pc, #184]	; (80029ac <HAL_COMP_TriggerCallback+0x144>)
			waitTime = commutation_interval /2   - advance ;
			blanktime = commutation_interval / 10;
 80028f4:	482e      	ldr	r0, [pc, #184]	; (80029b0 <HAL_COMP_TriggerCallback+0x148>)
			advance = commutation_interval / advancedivisor;
 80028f6:	7809      	ldrb	r1, [r1, #0]
	zctimeout = 0;
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
				commutation_interval = ((5 *commutation_interval) + thiszctime) / 6;    // TEST!   divide by two when tracking up down time independant
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	6822      	ldr	r2, [r4, #0]
 8002900:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002904:	4413      	add	r3, r2
 8002906:	2206      	movs	r2, #6
 8002908:	fb93 f2f2 	sdiv	r2, r3, r2
 800290c:	603a      	str	r2, [r7, #0]
			advance = commutation_interval / advancedivisor;
 800290e:	fb92 f2f1 	sdiv	r2, r2, r1
 8002912:	4928      	ldr	r1, [pc, #160]	; (80029b4 <HAL_COMP_TriggerCallback+0x14c>)
			waitTime = commutation_interval /2   - advance ;
 8002914:	4f28      	ldr	r7, [pc, #160]	; (80029b8 <HAL_COMP_TriggerCallback+0x150>)
			advance = commutation_interval / advancedivisor;
 8002916:	600a      	str	r2, [r1, #0]
			waitTime = commutation_interval /2   - advance ;
 8002918:	210c      	movs	r1, #12
 800291a:	fb93 f1f1 	sdiv	r1, r3, r1
 800291e:	1a8a      	subs	r2, r1, r2
			blanktime = commutation_interval / 10;
 8002920:	213c      	movs	r1, #60	; 0x3c
 8002922:	fb93 f1f1 	sdiv	r1, r3, r1

//		if(tempbrake){
//				HAL_COMP_Stop_IT(&hcomp1);
//				return;
//		}
		if (sensorless){
 8002926:	4b25      	ldr	r3, [pc, #148]	; (80029bc <HAL_COMP_TriggerCallback+0x154>)
			blanktime = commutation_interval / 10;
 8002928:	6001      	str	r1, [r0, #0]
		if (sensorless){
 800292a:	6819      	ldr	r1, [r3, #0]
			waitTime = commutation_interval /2   - advance ;
 800292c:	603a      	str	r2, [r7, #0]
 800292e:	4633      	mov	r3, r6
 8002930:	4606      	mov	r6, r0
		if (sensorless){
 8002932:	b999      	cbnz	r1, 800295c <HAL_COMP_TriggerCallback+0xf4>
			commutate();
			while (TIM3->CNT  < waitTime + blanktime){
			}
		}

		lastzctime = thiszctime;
 8002934:	4b22      	ldr	r3, [pc, #136]	; (80029c0 <HAL_COMP_TriggerCallback+0x158>)
 8002936:	6822      	ldr	r2, [r4, #0]
 8002938:	601a      	str	r2, [r3, #0]
		if (bemf_counts < 200){
 800293a:	4a22      	ldr	r2, [pc, #136]	; (80029c4 <HAL_COMP_TriggerCallback+0x15c>)
 800293c:	6813      	ldr	r3, [r2, #0]
 800293e:	2bc7      	cmp	r3, #199	; 0xc7
 8002940:	dd1b      	ble.n	800297a <HAL_COMP_TriggerCallback+0x112>
		}


//	}
//	GPIOA->BSRR = GPIO_PIN_15;
	if (HAL_COMP_Start_IT(&hcomp1) != HAL_OK) {
 8002942:	4814      	ldr	r0, [pc, #80]	; (8002994 <HAL_COMP_TriggerCallback+0x12c>)
 8002944:	f7fd fd22 	bl	800038c <HAL_COMP_Start_IT>
 8002948:	b1d0      	cbz	r0, 8002980 <HAL_COMP_TriggerCallback+0x118>
 800294a:	e7fe      	b.n	800294a <HAL_COMP_TriggerCallback+0xe2>
		if (HAL_COMP_GetOutputLevel(&hcomp1) == COMP_OUTPUTLEVEL_HIGH){
 800294c:	4648      	mov	r0, r9
 800294e:	f7fd fddb 	bl	8000508 <HAL_COMP_GetOutputLevel>
 8002952:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002956:	d013      	beq.n	8002980 <HAL_COMP_TriggerCallback+0x118>
		for (int i = 0; i < filter_level; i++){
 8002958:	3401      	adds	r4, #1
 800295a:	e7bb      	b.n	80028d4 <HAL_COMP_TriggerCallback+0x6c>
			while (TIM3->CNT  < waitTime){
 800295c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800295e:	4291      	cmp	r1, r2
 8002960:	d3fc      	bcc.n	800295c <HAL_COMP_TriggerCallback+0xf4>
			compit = 0;
 8002962:	2300      	movs	r3, #0
 8002964:	602b      	str	r3, [r5, #0]
			commutate();
 8002966:	f7ff ff39 	bl	80027dc <commutate>
			while (TIM3->CNT  < waitTime + blanktime){
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	6832      	ldr	r2, [r6, #0]
 800296e:	4905      	ldr	r1, [pc, #20]	; (8002984 <HAL_COMP_TriggerCallback+0x11c>)
 8002970:	4413      	add	r3, r2
 8002972:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8002974:	429a      	cmp	r2, r3
 8002976:	d3fc      	bcc.n	8002972 <HAL_COMP_TriggerCallback+0x10a>
 8002978:	e7dc      	b.n	8002934 <HAL_COMP_TriggerCallback+0xcc>
        bemf_counts++;
 800297a:	3301      	adds	r3, #1
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	e7e0      	b.n	8002942 <HAL_COMP_TriggerCallback+0xda>
 8002980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002984:	40000400 	.word	0x40000400
 8002988:	20000084 	.word	0x20000084
 800298c:	2000033c 	.word	0x2000033c
 8002990:	200000cc 	.word	0x200000cc
 8002994:	20000128 	.word	0x20000128
 8002998:	2000008c 	.word	0x2000008c
 800299c:	20000340 	.word	0x20000340
 80029a0:	20000034 	.word	0x20000034
 80029a4:	200000b8 	.word	0x200000b8
 80029a8:	200000c0 	.word	0x200000c0
 80029ac:	20000008 	.word	0x20000008
 80029b0:	2000000c 	.word	0x2000000c
 80029b4:	20000074 	.word	0x20000074
 80029b8:	200000bc 	.word	0x200000bc
 80029bc:	200000a4 	.word	0x200000a4
 80029c0:	20000098 	.word	0x20000098
 80029c4:	200001f8 	.word	0x200001f8
 80029c8:	20000124 	.word	0x20000124

080029cc <playStartupTune>:
	}
//	GPIOA->BRR = GPIO_PIN_15;
}


void playStartupTune(){    // Sets the prescaler of PWM timer to 75 to put the frequency in the audible range
 80029cc:	b510      	push	{r4, lr}
	TIM1->PSC = 75;
 80029ce:	4c0e      	ldr	r4, [pc, #56]	; (8002a08 <playStartupTune+0x3c>)
 80029d0:	234b      	movs	r3, #75	; 0x4b
 80029d2:	62a3      	str	r3, [r4, #40]	; 0x28
	TIM1->CCR1 = 5;        // keep the duty cycle low
 80029d4:	2305      	movs	r3, #5
 80029d6:	6363      	str	r3, [r4, #52]	; 0x34
	TIM1->CCR2 = 5;
	TIM1->CCR3 = 5;
	comStep(1);            // put it on step one
 80029d8:	2001      	movs	r0, #1
	TIM1->CCR2 = 5;
 80029da:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM1->CCR3 = 5;
 80029dc:	63e3      	str	r3, [r4, #60]	; 0x3c
	comStep(1);            // put it on step one
 80029de:	f7ff fe5f 	bl	80026a0 <comStep>
	HAL_Delay(100);
 80029e2:	2064      	movs	r0, #100	; 0x64
 80029e4:	f7fd fc2a 	bl	800023c <HAL_Delay>
	TIM1->PSC = 50;        // change pitch by changing prescaler
 80029e8:	2332      	movs	r3, #50	; 0x32
 80029ea:	62a3      	str	r3, [r4, #40]	; 0x28
	HAL_Delay(100);
 80029ec:	2064      	movs	r0, #100	; 0x64
 80029ee:	f7fd fc25 	bl	800023c <HAL_Delay>
	TIM1->PSC = 25;
 80029f2:	2319      	movs	r3, #25
 80029f4:	62a3      	str	r3, [r4, #40]	; 0x28
	HAL_Delay(100);
 80029f6:	2064      	movs	r0, #100	; 0x64
 80029f8:	f7fd fc20 	bl	800023c <HAL_Delay>
	allOff();
 80029fc:	f7ff fea4 	bl	8002748 <allOff>
	TIM1->PSC = 1;         // put the prescaler back to normal
 8002a00:	2301      	movs	r3, #1
 8002a02:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a04:	bd10      	pop	{r4, pc}
 8002a06:	bf00      	nop
 8002a08:	40012c00 	.word	0x40012c00

08002a0c <playInputTune>:
}

void playInputTune(){
 8002a0c:	b538      	push	{r3, r4, r5, lr}
	TIM1->PSC = 100;
 8002a0e:	4c0b      	ldr	r4, [pc, #44]	; (8002a3c <playInputTune+0x30>)
	TIM1->CCR1 = 5;
 8002a10:	2305      	movs	r3, #5
	TIM1->PSC = 100;
 8002a12:	2564      	movs	r5, #100	; 0x64
 8002a14:	62a5      	str	r5, [r4, #40]	; 0x28
	TIM1->CCR2 = 5;
	TIM1->CCR3 = 5;
	comStep(1);
 8002a16:	2001      	movs	r0, #1
	TIM1->CCR1 = 5;
 8002a18:	6363      	str	r3, [r4, #52]	; 0x34
	TIM1->CCR2 = 5;
 8002a1a:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM1->CCR3 = 5;
 8002a1c:	63e3      	str	r3, [r4, #60]	; 0x3c
	comStep(1);
 8002a1e:	f7ff fe3f 	bl	80026a0 <comStep>
	HAL_Delay(100);
 8002a22:	4628      	mov	r0, r5
 8002a24:	f7fd fc0a 	bl	800023c <HAL_Delay>
	TIM1->PSC = 50;
 8002a28:	2332      	movs	r3, #50	; 0x32
 8002a2a:	62a3      	str	r3, [r4, #40]	; 0x28
	HAL_Delay(100);
 8002a2c:	4628      	mov	r0, r5
 8002a2e:	f7fd fc05 	bl	800023c <HAL_Delay>
	allOff();
 8002a32:	f7ff fe89 	bl	8002748 <allOff>
	TIM1->PSC = 1;
 8002a36:	2301      	movs	r3, #1
 8002a38:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a3a:	bd38      	pop	{r3, r4, r5, pc}
 8002a3c:	40012c00 	.word	0x40012c00

08002a40 <detectInput>:
//{
//	getADCs();
//}

/* Checks the dma buffer for the smallest time increment to determine type of input */
void detectInput(){                         // legacy function, not needed unless using input capture to DMA buffer
 8002a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	smallestnumber = 20000;
	servoPwm = 0;
	int lastnumber = dma_buffer[0];
 8002a44:	4e1c      	ldr	r6, [pc, #112]	; (8002ab8 <detectInput+0x78>)
	for ( int j = 1 ; j < input_buffer_size; j++){
 8002a46:	4d1d      	ldr	r5, [pc, #116]	; (8002abc <detectInput+0x7c>)
	smallestnumber = 20000;
 8002a48:	4a1d      	ldr	r2, [pc, #116]	; (8002ac0 <detectInput+0x80>)
	servoPwm = 0;
 8002a4a:	4c1e      	ldr	r4, [pc, #120]	; (8002ac4 <detectInput+0x84>)
	int lastnumber = dma_buffer[0];
 8002a4c:	6830      	ldr	r0, [r6, #0]
	for ( int j = 1 ; j < input_buffer_size; j++){
 8002a4e:	f8d5 e000 	ldr.w	lr, [r5]
	smallestnumber = 20000;
 8002a52:	f644 6320 	movw	r3, #20000	; 0x4e20
	servoPwm = 0;
 8002a56:	2100      	movs	r1, #0
	smallestnumber = 20000;
 8002a58:	6013      	str	r3, [r2, #0]
	servoPwm = 0;
 8002a5a:	7021      	strb	r1, [r4, #0]
	for ( int j = 1 ; j < input_buffer_size; j++){
 8002a5c:	2501      	movs	r5, #1
 8002a5e:	4575      	cmp	r5, lr
 8002a60:	db15      	blt.n	8002a8e <detectInput+0x4e>
 8002a62:	b101      	cbz	r1, 8002a66 <detectInput+0x26>
 8002a64:	6013      	str	r3, [r2, #0]
			smallestnumber = dma_buffer[j] - lastnumber;

		}
		lastnumber = dma_buffer[j];
	}
	if (smallestnumber > 1000 ){
 8002a66:	6813      	ldr	r3, [r2, #0]
 8002a68:	4a17      	ldr	r2, [pc, #92]	; (8002ac8 <detectInput+0x88>)
 8002a6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a6e:	dd18      	ble.n	8002aa2 <detectInput+0x62>
		servoPwm = 1;
 8002a70:	2301      	movs	r3, #1
 8002a72:	7023      	strb	r3, [r4, #0]
		TIM2->PSC = 71;
 8002a74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a78:	2147      	movs	r1, #71	; 0x47
 8002a7a:	6299      	str	r1, [r3, #40]	; 0x28
		TIM2->CNT = 65536;
 8002a7c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002a80:	6259      	str	r1, [r3, #36]	; 0x24
	}

	if (smallestnumber == 0){
		inputSet = 0;
	}else{
		inputSet = 1;
 8002a82:	2301      	movs	r3, #1
		HAL_Delay(50);
 8002a84:	2032      	movs	r0, #50	; 0x32
		inputSet = 1;
 8002a86:	7013      	strb	r3, [r2, #0]
		HAL_Delay(50);
 8002a88:	f7fd fbd8 	bl	800023c <HAL_Delay>
 8002a8c:	e00c      	b.n	8002aa8 <detectInput+0x68>
		if((dma_buffer[j] - lastnumber) < smallestnumber){ // blank space
 8002a8e:	f856 7025 	ldr.w	r7, [r6, r5, lsl #2]
 8002a92:	1a38      	subs	r0, r7, r0
 8002a94:	4298      	cmp	r0, r3
			smallestnumber = dma_buffer[j] - lastnumber;
 8002a96:	bf3c      	itt	cc
 8002a98:	4603      	movcc	r3, r0
 8002a9a:	2101      	movcc	r1, #1
		lastnumber = dma_buffer[j];
 8002a9c:	4638      	mov	r0, r7
	for ( int j = 1 ; j < input_buffer_size; j++){
 8002a9e:	3501      	adds	r5, #1
 8002aa0:	e7dd      	b.n	8002a5e <detectInput+0x1e>
	if (smallestnumber == 0){
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1ed      	bne.n	8002a82 <detectInput+0x42>
		inputSet = 0;
 8002aa6:	7013      	strb	r3, [r2, #0]
	}
	HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_4, dma_buffer , 64);        // starts the input capture to DMA buffer of length 64
 8002aa8:	2340      	movs	r3, #64	; 0x40
 8002aaa:	4a03      	ldr	r2, [pc, #12]	; (8002ab8 <detectInput+0x78>)
 8002aac:	4807      	ldr	r0, [pc, #28]	; (8002acc <detectInput+0x8c>)
 8002aae:	210c      	movs	r1, #12
}
 8002ab0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_4, dma_buffer , 64);        // starts the input capture to DMA buffer of length 64
 8002ab4:	f7ff b9ee 	b.w	8001e94 <HAL_TIM_IC_Start_DMA>
 8002ab8:	200001fc 	.word	0x200001fc
 8002abc:	20000020 	.word	0x20000020
 8002ac0:	20000040 	.word	0x20000040
 8002ac4:	200000a8 	.word	0x200000a8
 8002ac8:	20000094 	.word	0x20000094
 8002acc:	20000344 	.word	0x20000344

08002ad0 <computeServoInput>:

void computeServoInput(){                   // maps the servo pulse length to newinput



   if((dma_buffer[1] - dma_buffer[0] > 1000 ) && ((dma_buffer[1] - dma_buffer[0]) < 2010)){ // servo zone
 8002ad0:	4b21      	ldr	r3, [pc, #132]	; (8002b58 <computeServoInput+0x88>)
void computeServoInput(){                   // maps the servo pulse length to newinput
 8002ad2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   if((dma_buffer[1] - dma_buffer[0] > 1000 ) && ((dma_buffer[1] - dma_buffer[0]) < 2010)){ // servo zone
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	681c      	ldr	r4, [r3, #0]
	   if((dma_buffer[2] - dma_buffer[1]) > 2500 ){          // blank space
 8002ad8:	6898      	ldr	r0, [r3, #8]
 8002ada:	4d20      	ldr	r5, [pc, #128]	; (8002b5c <computeServoInput+0x8c>)
   if((dma_buffer[1] - dma_buffer[0] > 1000 ) && ((dma_buffer[1] - dma_buffer[0]) < 2010)){ // servo zone
 8002adc:	1b14      	subs	r4, r2, r4
 8002ade:	f46f 717a 	mvn.w	r1, #1000	; 0x3e8
 8002ae2:	1861      	adds	r1, r4, r1
 8002ae4:	f5b1 7f7c 	cmp.w	r1, #1008	; 0x3f0
	   if((dma_buffer[2] - dma_buffer[1]) > 2500 ){          // blank space
 8002ae8:	eba0 0002 	sub.w	r0, r0, r2
   if((dma_buffer[1] - dma_buffer[0] > 1000 ) && ((dma_buffer[1] - dma_buffer[0]) < 2010)){ // servo zone
 8002aec:	d819      	bhi.n	8002b22 <computeServoInput+0x52>
	   if((dma_buffer[2] - dma_buffer[1]) > 2500 ){          // blank space
 8002aee:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002af2:	4298      	cmp	r0, r3
 8002af4:	d909      	bls.n	8002b0a <computeServoInput+0x3a>
		   servoraw = map((dma_buffer[1] - dma_buffer[0]), 1090, 2000, 0, 2000);
 8002af6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002afa:	9200      	str	r2, [sp, #0]
 8002afc:	2300      	movs	r3, #0
 8002afe:	f240 4142 	movw	r1, #1090	; 0x442
 8002b02:	4620      	mov	r0, r4
	   }
	} else if((dma_buffer[2] - dma_buffer[1] > 1000 ) && ((dma_buffer[2] - dma_buffer[1]) < 2010)){ // servo zone
  	   if((dma_buffer[1] - dma_buffer[0]) > 2500 ){          // blank space
  		   servoraw = map((dma_buffer[2] - dma_buffer[1]), 1090, 2000, 0, 2000);
 8002b04:	f7ff fcbc 	bl	8002480 <map>
 8002b08:	6028      	str	r0, [r5, #0]
  	   }
  	} else{
  		servoraw = 1;       // not enough to arm but and below motor start threshold
  	}
   if (servoraw - newinput > max_servo_deviation){
 8002b0a:	4a15      	ldr	r2, [pc, #84]	; (8002b60 <computeServoInput+0x90>)
 8002b0c:	4915      	ldr	r1, [pc, #84]	; (8002b64 <computeServoInput+0x94>)
 8002b0e:	6828      	ldr	r0, [r5, #0]
 8002b10:	6813      	ldr	r3, [r2, #0]
 8002b12:	6809      	ldr	r1, [r1, #0]
 8002b14:	1ac4      	subs	r4, r0, r3
 8002b16:	428c      	cmp	r4, r1
 8002b18:	dd17      	ble.n	8002b4a <computeServoInput+0x7a>
   		newinput += max_servo_deviation;
 8002b1a:	440b      	add	r3, r1
   	}else if(newinput - servoraw > max_servo_deviation){
   		newinput -= max_servo_deviation;
 8002b1c:	6013      	str	r3, [r2, #0]
   	}else{
   		newinput = servoraw;
   	}
}
 8002b1e:	b003      	add	sp, #12
 8002b20:	bd30      	pop	{r4, r5, pc}
	} else if((dma_buffer[2] - dma_buffer[1] > 1000 ) && ((dma_buffer[2] - dma_buffer[1]) < 2010)){ // servo zone
 8002b22:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8002b26:	18c3      	adds	r3, r0, r3
 8002b28:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 8002b2c:	d80a      	bhi.n	8002b44 <computeServoInput+0x74>
  	   if((dma_buffer[1] - dma_buffer[0]) > 2500 ){          // blank space
 8002b2e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002b32:	429c      	cmp	r4, r3
 8002b34:	d9e9      	bls.n	8002b0a <computeServoInput+0x3a>
  		   servoraw = map((dma_buffer[2] - dma_buffer[1]), 1090, 2000, 0, 2000);
 8002b36:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002b3a:	9200      	str	r2, [sp, #0]
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f240 4142 	movw	r1, #1090	; 0x442
 8002b42:	e7df      	b.n	8002b04 <computeServoInput+0x34>
  		servoraw = 1;       // not enough to arm but and below motor start threshold
 8002b44:	2301      	movs	r3, #1
 8002b46:	602b      	str	r3, [r5, #0]
 8002b48:	e7df      	b.n	8002b0a <computeServoInput+0x3a>
   	}else if(newinput - servoraw > max_servo_deviation){
 8002b4a:	1a1c      	subs	r4, r3, r0
 8002b4c:	42a1      	cmp	r1, r4
 8002b4e:	da01      	bge.n	8002b54 <computeServoInput+0x84>
   		newinput -= max_servo_deviation;
 8002b50:	1a5b      	subs	r3, r3, r1
 8002b52:	e7e3      	b.n	8002b1c <computeServoInput+0x4c>
   		newinput = servoraw;
 8002b54:	6010      	str	r0, [r2, #0]
}
 8002b56:	e7e2      	b.n	8002b1e <computeServoInput+0x4e>
 8002b58:	200001fc 	.word	0x200001fc
 8002b5c:	200000c8 	.word	0x200000c8
 8002b60:	2000009c 	.word	0x2000009c
 8002b64:	20000028 	.word	0x20000028

08002b68 <transferComplete>:

void transferComplete(){      // called when DMA buffer is full, starts DMA transfer with reduced buffer size
 8002b68:	b510      	push	{r4, lr}
	if (inputSet == 1){
 8002b6a:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <transferComplete+0x34>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d113      	bne.n	8002b9a <transferComplete+0x32>
		if  (servoPwm == 1){
 8002b72:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <transferComplete+0x38>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d10f      	bne.n	8002b9a <transferComplete+0x32>
			computeServoInput();
 8002b7a:	f7ff ffa9 	bl	8002ad0 <computeServoInput>
			signaltimeout = 0;
 8002b7e:	4a09      	ldr	r2, [pc, #36]	; (8002ba4 <transferComplete+0x3c>)
			TIM2->CNT = 0;
			HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_4, dma_buffer , 3);
 8002b80:	4809      	ldr	r0, [pc, #36]	; (8002ba8 <transferComplete+0x40>)
			signaltimeout = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	6013      	str	r3, [r2, #0]
			TIM2->CNT = 0;
 8002b86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
			HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_4, dma_buffer , 3);
 8002b8a:	210c      	movs	r1, #12
			TIM2->CNT = 0;
 8002b8c:	6253      	str	r3, [r2, #36]	; 0x24

		}
	}
}
 8002b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_4, dma_buffer , 3);
 8002b92:	2303      	movs	r3, #3
 8002b94:	4a05      	ldr	r2, [pc, #20]	; (8002bac <transferComplete+0x44>)
 8002b96:	f7ff b97d 	b.w	8001e94 <HAL_TIM_IC_Start_DMA>
 8002b9a:	bd10      	pop	{r4, pc}
 8002b9c:	20000094 	.word	0x20000094
 8002ba0:	200000a8 	.word	0x200000a8
 8002ba4:	200000ac 	.word	0x200000ac
 8002ba8:	20000344 	.word	0x20000344
 8002bac:	200001fc 	.word	0x200001fc

08002bb0 <startMotor>:
void startMotor() {
	commutate_count++;
 8002bb0:	4a1a      	ldr	r2, [pc, #104]	; (8002c1c <startMotor+0x6c>)
void startMotor() {
 8002bb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	commutate_count++;
 8002bb6:	6813      	ldr	r3, [r2, #0]
    char decaystate = slow_decay;
    sensorless = 0;
	if (running == 0){
 8002bb8:	4f19      	ldr	r7, [pc, #100]	; (8002c20 <startMotor+0x70>)
    char decaystate = slow_decay;
 8002bba:	4c1a      	ldr	r4, [pc, #104]	; (8002c24 <startMotor+0x74>)
    sensorless = 0;
 8002bbc:	4e1a      	ldr	r6, [pc, #104]	; (8002c28 <startMotor+0x78>)
	if (running == 0){
 8002bbe:	f8d7 8000 	ldr.w	r8, [r7]
    char decaystate = slow_decay;
 8002bc2:	f894 a000 	ldrb.w	sl, [r4]
	commutate_count++;
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	6013      	str	r3, [r2, #0]
    sensorless = 0;
 8002bca:	2200      	movs	r2, #0
 8002bcc:	6032      	str	r2, [r6, #0]
 8002bce:	46a1      	mov	r9, r4
	if (running == 0){
 8002bd0:	f1b8 0f00 	cmp.w	r8, #0
 8002bd4:	d116      	bne.n	8002c04 <startMotor+0x54>
		HAL_COMP_Stop_IT(&hcomp1);
		slow_decay = 1;
 8002bd6:	2501      	movs	r5, #1
		HAL_COMP_Stop_IT(&hcomp1);
 8002bd8:	4814      	ldr	r0, [pc, #80]	; (8002c2c <startMotor+0x7c>)
 8002bda:	f7fd fc3b 	bl	8000454 <HAL_COMP_Stop_IT>
		slow_decay = 1;
 8002bde:	7025      	strb	r5, [r4, #0]


	commutate();
 8002be0:	f7ff fdfc 	bl	80027dc <commutate>
	HAL_Delay(2);
 8002be4:	2002      	movs	r0, #2
 8002be6:	f7fd fb29 	bl	800023c <HAL_Delay>




//	commutate();
	commutation_interval = start_com_interval;
 8002bea:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <startMotor+0x80>)
	TIM3->CNT = 0;
//	TIM2->CNT = 0;
//	TIM2->ARR = commutation_interval * 2;
	running = 1;
	if (HAL_COMP_Start_IT(&hcomp1) != HAL_OK) {
 8002bec:	480f      	ldr	r0, [pc, #60]	; (8002c2c <startMotor+0x7c>)
	commutation_interval = start_com_interval;
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <startMotor+0x84>)
 8002bf2:	601a      	str	r2, [r3, #0]
	TIM3->CNT = 0;
 8002bf4:	4b10      	ldr	r3, [pc, #64]	; (8002c38 <startMotor+0x88>)
 8002bf6:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
	running = 1;
 8002bfa:	603d      	str	r5, [r7, #0]
	if (HAL_COMP_Start_IT(&hcomp1) != HAL_OK) {
 8002bfc:	f7fd fbc6 	bl	800038c <HAL_COMP_Start_IT>
 8002c00:	b100      	cbz	r0, 8002c04 <startMotor+0x54>
 8002c02:	e7fe      	b.n	8002c02 <startMotor+0x52>
			Error_Handler();
		}
	}

	slow_decay = decaystate;    // return to normal
	sensorless = 1;
 8002c04:	2301      	movs	r3, #1
	startupcountdown =0;
 8002c06:	4a0d      	ldr	r2, [pc, #52]	; (8002c3c <startMotor+0x8c>)
	sensorless = 1;
 8002c08:	6033      	str	r3, [r6, #0]
	startupcountdown =0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	6013      	str	r3, [r2, #0]
	bemf_counts = 0;
 8002c0e:	4a0c      	ldr	r2, [pc, #48]	; (8002c40 <startMotor+0x90>)
	slow_decay = decaystate;    // return to normal
 8002c10:	f889 a000 	strb.w	sl, [r9]
	bemf_counts = 0;
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20000080 	.word	0x20000080
 8002c20:	200000a0 	.word	0x200000a0
 8002c24:	2000003c 	.word	0x2000003c
 8002c28:	200000a4 	.word	0x200000a4
 8002c2c:	20000128 	.word	0x20000128
 8002c30:	20000044 	.word	0x20000044
 8002c34:	20000084 	.word	0x20000084
 8002c38:	40000400 	.word	0x40000400
 8002c3c:	200000b4 	.word	0x200000b4
 8002c40:	200001f8 	.word	0x200001f8

08002c44 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002c44:	b510      	push	{r4, lr}
 8002c46:	b0a2      	sub	sp, #136	; 0x88
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002c48:	230a      	movs	r3, #10
 8002c4a:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002c50:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c56:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002c58:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002c5c:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c5e:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002c60:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c62:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002c64:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002c66:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c68:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002c6a:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c6c:	f7fd fea0 	bl	80009b0 <HAL_RCC_OscConfig>
 8002c70:	b100      	cbz	r0, 8002c74 <SystemClock_Config+0x30>
 8002c72:	e7fe      	b.n	8002c72 <SystemClock_Config+0x2e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c74:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c76:	e88d 0018 	stmia.w	sp, {r3, r4}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c7a:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c80:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c82:	4621      	mov	r1, r4
 8002c84:	4668      	mov	r0, sp
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c86:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c88:	f7fe f93c 	bl	8000f04 <HAL_RCC_ClockConfig>
 8002c8c:	b100      	cbz	r0, 8002c90 <SystemClock_Config+0x4c>
 8002c8e:	e7fe      	b.n	8002c8e <SystemClock_Config+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM16
 8002c90:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <SystemClock_Config+0x8c>)
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002c92:	901b      	str	r0, [sp, #108]	; 0x6c
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8002c94:	901f      	str	r0, [sp, #124]	; 0x7c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8002c96:	901c      	str	r0, [sp, #112]	; 0x70
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8002c98:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c9a:	a80f      	add	r0, sp, #60	; 0x3c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM16
 8002c9c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c9e:	f7fe f9f9 	bl	8001094 <HAL_RCCEx_PeriphCLKConfig>
 8002ca2:	4604      	mov	r4, r0
 8002ca4:	b100      	cbz	r0, 8002ca8 <SystemClock_Config+0x64>
 8002ca6:	e7fe      	b.n	8002ca6 <SystemClock_Config+0x62>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002ca8:	f7fe f9ee 	bl	8001088 <HAL_RCC_GetHCLKFreq>
 8002cac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cb0:	fbb0 f0f3 	udiv	r0, r0, r3
 8002cb4:	f7fd fc80 	bl	80005b8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002cb8:	2004      	movs	r0, #4
 8002cba:	f7fd fc93 	bl	80005e4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002cbe:	4622      	mov	r2, r4
 8002cc0:	4621      	mov	r1, r4
 8002cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc6:	f7fd fc37 	bl	8000538 <HAL_NVIC_SetPriority>
}
 8002cca:	b022      	add	sp, #136	; 0x88
 8002ccc:	bd10      	pop	{r4, pc}
 8002cce:	bf00      	nop
 8002cd0:	00b01000 	.word	0x00b01000

08002cd4 <main>:
        {
 8002cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cd8:	b09f      	sub	sp, #124	; 0x7c
  HAL_Init();
 8002cda:	f7fd fa8f 	bl	80001fc <HAL_Init>
  SystemClock_Config();
 8002cde:	f7ff ffb1 	bl	8002c44 <SystemClock_Config>
{

  LL_GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002ce2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002ce6:	f7ff fb45 	bl	8002374 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002cea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002cee:	f7ff fb41 	bl	8002374 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002cf2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002cf6:	f7ff fb3d 	bl	8002374 <LL_AHB1_GRP1_EnableClock>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8002cfa:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 8002ff0 <main+0x31c>
 8002cfe:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 8002ff4 <main+0x320>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8002d02:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002d06:	f04f 4a90 	mov.w	sl, #1207959552	; 0x48000000
 8002d0a:	f7ff fb33 	bl	8002374 <LL_AHB1_GRP1_EnableClock>
 8002d0e:	f44f 4b00 	mov.w	fp, #32768	; 0x8000
 8002d12:	2320      	movs	r3, #32
 8002d14:	2504      	movs	r5, #4
  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_2);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002d16:	2400      	movs	r4, #0
 8002d18:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002d1c:	2601      	movs	r6, #1
 8002d1e:	9303      	str	r3, [sp, #12]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d20:	a913      	add	r1, sp, #76	; 0x4c
 8002d22:	f8ca b028 	str.w	fp, [sl, #40]	; 0x28
 8002d26:	4640      	mov	r0, r8
 8002d28:	f8c9 5028 	str.w	r5, [r9, #40]	; 0x28
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8002d2c:	2710      	movs	r7, #16
 8002d2e:	9713      	str	r7, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002d30:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002d32:	9617      	str	r6, [sp, #92]	; 0x5c
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d34:	f7ff fa7b 	bl	800222e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8002d38:	9b03      	ldr	r3, [sp, #12]
 8002d3a:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d3c:	a913      	add	r1, sp, #76	; 0x4c
 8002d3e:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002d40:	9614      	str	r6, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002d42:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d44:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d46:	9417      	str	r4, [sp, #92]	; 0x5c
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d48:	f7ff fa71 	bl	800222e <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d4c:	a913      	add	r1, sp, #76	; 0x4c
 8002d4e:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8002d50:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002d54:	9614      	str	r6, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002d56:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d58:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d5a:	9417      	str	r4, [sp, #92]	; 0x5c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5c:	f7ff fa67 	bl	800222e <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d60:	a913      	add	r1, sp, #76	; 0x4c
 8002d62:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8002d64:	9513      	str	r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002d66:	9614      	str	r6, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002d68:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d6a:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d6c:	9417      	str	r4, [sp, #92]	; 0x5c
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d6e:	f7ff fa5e 	bl	800222e <LL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d72:	4b91      	ldr	r3, [pc, #580]	; (8002fb8 <main+0x2e4>)
 8002d74:	695a      	ldr	r2, [r3, #20]
 8002d76:	4332      	orrs	r2, r6
 8002d78:	615a      	str	r2, [r3, #20]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	4033      	ands	r3, r6
 8002d7e:	9304      	str	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002d80:	4622      	mov	r2, r4
 8002d82:	4621      	mov	r1, r4
 8002d84:	2011      	movs	r0, #17
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d86:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002d88:	f7fd fbd6 	bl	8000538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002d8c:	2011      	movs	r0, #17
 8002d8e:	f7fd fc07 	bl	80005a0 <HAL_NVIC_EnableIRQ>
  hcomp1.Instance = COMP1;
 8002d92:	488a      	ldr	r0, [pc, #552]	; (8002fbc <main+0x2e8>)
  hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_IO1;
 8002d94:	4b8a      	ldr	r3, [pc, #552]	; (8002fc0 <main+0x2ec>)
  hcomp1.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8002d96:	6084      	str	r4, [r0, #8]
  hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_IO1;
 8002d98:	f04f 0860 	mov.w	r8, #96	; 0x60
 8002d9c:	e880 0108 	stmia.w	r0, {r3, r8}
  hcomp1.Init.Output = COMP_OUTPUT_NONE;
 8002da0:	232b      	movs	r3, #43	; 0x2b
 8002da2:	60c3      	str	r3, [r0, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRCE_TIM1OC5;
 8002da4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002da8:	6183      	str	r3, [r0, #24]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8002daa:	2303      	movs	r3, #3
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002dac:	6104      	str	r4, [r0, #16]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8002dae:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8002db0:	f7fd fa54 	bl	800025c <HAL_COMP_Init>
 8002db4:	b100      	cbz	r0, 8002db8 <main+0xe4>
 8002db6:	e7fe      	b.n	8002db6 <main+0xe2>
  htim1.Instance = TIM1;
 8002db8:	4c82      	ldr	r4, [pc, #520]	; (8002fc4 <main+0x2f0>)
 8002dba:	4b83      	ldr	r3, [pc, #524]	; (8002fc8 <main+0x2f4>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dbc:	60a0      	str	r0, [r4, #8]
  htim1.Init.Prescaler = 1;
 8002dbe:	e884 0048 	stmia.w	r4, {r3, r6}
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dc2:	6120      	str	r0, [r4, #16]
  htim1.Init.Period = 1499;
 8002dc4:	f240 53db 	movw	r3, #1499	; 0x5db
  htim1.Init.RepetitionCounter = 0;
 8002dc8:	6160      	str	r0, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dca:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002dcc:	4620      	mov	r0, r4
  htim1.Init.Period = 1499;
 8002dce:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002dd0:	f7fe fd68 	bl	80018a4 <HAL_TIM_Base_Init>
 8002dd4:	b100      	cbz	r0, 8002dd8 <main+0x104>
 8002dd6:	e7fe      	b.n	8002dd6 <main+0x102>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dd8:	ae1e      	add	r6, sp, #120	; 0x78
 8002dda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dde:	f846 3d58 	str.w	r3, [r6, #-88]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002de2:	4620      	mov	r0, r4
 8002de4:	4631      	mov	r1, r6
 8002de6:	f7fe ff71 	bl	8001ccc <HAL_TIM_ConfigClockSource>
 8002dea:	b100      	cbz	r0, 8002dee <main+0x11a>
 8002dec:	e7fe      	b.n	8002dec <main+0x118>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002dee:	4620      	mov	r0, r4
 8002df0:	f7fe fd8c 	bl	800190c <HAL_TIM_PWM_Init>
 8002df4:	b100      	cbz	r0, 8002df8 <main+0x124>
 8002df6:	e7fe      	b.n	8002df6 <main+0x122>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002df8:	4620      	mov	r0, r4
 8002dfa:	f7fe fd6d 	bl	80018d8 <HAL_TIM_OC_Init>
 8002dfe:	b100      	cbz	r0, 8002e02 <main+0x12e>
 8002e00:	e7fe      	b.n	8002e00 <main+0x12c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e02:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002e04:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e06:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e08:	a905      	add	r1, sp, #20
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	f7ff f9ac 	bl	8002168 <HAL_TIMEx_MasterConfigSynchronization>
 8002e10:	4602      	mov	r2, r0
 8002e12:	b100      	cbz	r0, 8002e16 <main+0x142>
 8002e14:	e7fe      	b.n	8002e14 <main+0x140>
  sConfigOC.Pulse = 0;
 8002e16:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e18:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e1a:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e1c:	9010      	str	r0, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e1e:	9011      	str	r0, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e20:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e22:	a90c      	add	r1, sp, #48	; 0x30
 8002e24:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e26:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e2a:	f7ff f916 	bl	800205a <HAL_TIM_PWM_ConfigChannel>
 8002e2e:	b100      	cbz	r0, 8002e32 <main+0x15e>
 8002e30:	e7fe      	b.n	8002e30 <main+0x15c>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e32:	462a      	mov	r2, r5
 8002e34:	a90c      	add	r1, sp, #48	; 0x30
 8002e36:	4620      	mov	r0, r4
 8002e38:	f7ff f90f 	bl	800205a <HAL_TIM_PWM_ConfigChannel>
 8002e3c:	b100      	cbz	r0, 8002e40 <main+0x16c>
 8002e3e:	e7fe      	b.n	8002e3e <main+0x16a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e40:	2208      	movs	r2, #8
 8002e42:	a90c      	add	r1, sp, #48	; 0x30
 8002e44:	4620      	mov	r0, r4
 8002e46:	f7ff f908 	bl	800205a <HAL_TIM_PWM_ConfigChannel>
 8002e4a:	b100      	cbz	r0, 8002e4e <main+0x17a>
 8002e4c:	e7fe      	b.n	8002e4c <main+0x178>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8002e4e:	463a      	mov	r2, r7
 8002e50:	a90c      	add	r1, sp, #48	; 0x30
 8002e52:	4620      	mov	r0, r4
 8002e54:	f7ff f901 	bl	800205a <HAL_TIM_PWM_ConfigChannel>
 8002e58:	b100      	cbz	r0, 8002e5c <main+0x188>
 8002e5a:	e7fe      	b.n	8002e5a <main+0x186>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e60:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e62:	9218      	str	r2, [sp, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e64:	a913      	add	r1, sp, #76	; 0x4c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002e66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e6a:	4856      	ldr	r0, [pc, #344]	; (8002fc4 <main+0x2f0>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e6c:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e6e:	9314      	str	r3, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e70:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e72:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e74:	9317      	str	r3, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002e76:	9319      	str	r3, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002e78:	931a      	str	r3, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002e7a:	921b      	str	r2, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002e7c:	931c      	str	r3, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e7e:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e80:	f7ff f994 	bl	80021ac <HAL_TIMEx_ConfigBreakDeadTime>
 8002e84:	4605      	mov	r5, r0
 8002e86:	b100      	cbz	r0, 8002e8a <main+0x1b6>
 8002e88:	e7fe      	b.n	8002e88 <main+0x1b4>
  htim2.Instance = TIM2;
 8002e8a:	4c50      	ldr	r4, [pc, #320]	; (8002fcc <main+0x2f8>)
  HAL_TIM_MspPostInit(&htim1);
 8002e8c:	484d      	ldr	r0, [pc, #308]	; (8002fc4 <main+0x2f0>)
 8002e8e:	f000 fb49 	bl	8003524 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8002e92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 0;
 8002e96:	e884 0028 	stmia.w	r4, {r3, r5}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e9a:	4620      	mov	r0, r4
  htim2.Init.Period = 65536;
 8002e9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ea0:	60a5      	str	r5, [r4, #8]
  htim2.Init.Period = 65536;
 8002ea2:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ea4:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ea6:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ea8:	f7fe fcfc 	bl	80018a4 <HAL_TIM_Base_Init>
 8002eac:	b100      	cbz	r0, 8002eb0 <main+0x1dc>
 8002eae:	e7fe      	b.n	8002eae <main+0x1da>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eb0:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002eb4:	a90c      	add	r1, sp, #48	; 0x30
 8002eb6:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eb8:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002eba:	f7fe ff07 	bl	8001ccc <HAL_TIM_ConfigClockSource>
 8002ebe:	b100      	cbz	r0, 8002ec2 <main+0x1ee>
 8002ec0:	e7fe      	b.n	8002ec0 <main+0x1ec>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002ec2:	4620      	mov	r0, r4
 8002ec4:	f7fe fd3c 	bl	8001940 <HAL_TIM_IC_Init>
 8002ec8:	b100      	cbz	r0, 8002ecc <main+0x1f8>
 8002eca:	e7fe      	b.n	8002eca <main+0x1f6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ecc:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ece:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ed0:	4631      	mov	r1, r6
 8002ed2:	4620      	mov	r0, r4
 8002ed4:	f7ff f948 	bl	8002168 <HAL_TIMEx_MasterConfigSynchronization>
 8002ed8:	b100      	cbz	r0, 8002edc <main+0x208>
 8002eda:	e7fe      	b.n	8002eda <main+0x206>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002edc:	230a      	movs	r3, #10
 8002ede:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002ee0:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002ee2:	2301      	movs	r3, #1
  sConfigIC.ICFilter = 0;
 8002ee4:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002ee6:	220c      	movs	r2, #12
 8002ee8:	a913      	add	r1, sp, #76	; 0x4c
 8002eea:	4620      	mov	r0, r4
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002eec:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002eee:	f7fe fe5b 	bl	8001ba8 <HAL_TIM_IC_ConfigChannel>
 8002ef2:	b100      	cbz	r0, 8002ef6 <main+0x222>
 8002ef4:	e7fe      	b.n	8002ef4 <main+0x220>
  htim3.Instance = TIM3;
 8002ef6:	4c36      	ldr	r4, [pc, #216]	; (8002fd0 <main+0x2fc>)
  htim3.Init.Prescaler = 20;
 8002ef8:	4b36      	ldr	r3, [pc, #216]	; (8002fd4 <main+0x300>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002efa:	60a0      	str	r0, [r4, #8]
  htim3.Init.Prescaler = 20;
 8002efc:	f04f 0a14 	mov.w	sl, #20
 8002f00:	e884 0408 	stmia.w	r4, {r3, sl}
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f04:	6120      	str	r0, [r4, #16]
  htim3.Init.Period = 65535;
 8002f06:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f0a:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f0c:	4620      	mov	r0, r4
  htim3.Init.Period = 65535;
 8002f0e:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f10:	f7fe fcc8 	bl	80018a4 <HAL_TIM_Base_Init>
 8002f14:	b100      	cbz	r0, 8002f18 <main+0x244>
 8002f16:	e7fe      	b.n	8002f16 <main+0x242>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f18:	a913      	add	r1, sp, #76	; 0x4c
 8002f1a:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f1c:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f1e:	f7fe fed5 	bl	8001ccc <HAL_TIM_ConfigClockSource>
 8002f22:	b100      	cbz	r0, 8002f26 <main+0x252>
 8002f24:	e7fe      	b.n	8002f24 <main+0x250>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f26:	900c      	str	r0, [sp, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f28:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f2a:	a90c      	add	r1, sp, #48	; 0x30
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	f7ff f91b 	bl	8002168 <HAL_TIMEx_MasterConfigSynchronization>
 8002f32:	b100      	cbz	r0, 8002f36 <main+0x262>
 8002f34:	e7fe      	b.n	8002f34 <main+0x260>
	hiwdg.Instance = IWDG;
 8002f36:	4828      	ldr	r0, [pc, #160]	; (8002fd8 <main+0x304>)
	hiwdg.Init.Reload = 2000;
 8002f38:	4b28      	ldr	r3, [pc, #160]	; (8002fdc <main+0x308>)
 8002f3a:	f04f 0802 	mov.w	r8, #2
 8002f3e:	f44f 69fa 	mov.w	r9, #2000	; 0x7d0
 8002f42:	f640 7cff 	movw	ip, #4095	; 0xfff
 8002f46:	e880 1308 	stmia.w	r0, {r3, r8, r9, ip}
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002f4a:	f7fd fd04 	bl	8000956 <HAL_IWDG_Init>
 8002f4e:	b100      	cbz	r0, 8002f52 <main+0x27e>
 8002f50:	e7fe      	b.n	8002f50 <main+0x27c>
  htim16.Instance = TIM16;
 8002f52:	4c23      	ldr	r4, [pc, #140]	; (8002fe0 <main+0x30c>)
  htim16.Init.Prescaler = 10;
 8002f54:	4b23      	ldr	r3, [pc, #140]	; (8002fe4 <main+0x310>)
 8002f56:	f04f 0e0a 	mov.w	lr, #10
 8002f5a:	e884 4008 	stmia.w	r4, {r3, lr}
  htim16.Init.Period = 5000;
 8002f5e:	f241 3288 	movw	r2, #5000	; 0x1388
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f62:	2300      	movs	r3, #0
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002f64:	4620      	mov	r0, r4
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f66:	60a3      	str	r3, [r4, #8]
  htim16.Init.Period = 5000;
 8002f68:	60e2      	str	r2, [r4, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f6a:	6123      	str	r3, [r4, #16]
  htim16.Init.RepetitionCounter = 0;
 8002f6c:	6163      	str	r3, [r4, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f6e:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002f70:	f7fe fc98 	bl	80018a4 <HAL_TIM_Base_Init>
 8002f74:	b100      	cbz	r0, 8002f78 <main+0x2a4>
 8002f76:	e7fe      	b.n	8002f76 <main+0x2a2>
  hspi3.Instance = SPI3;
 8002f78:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <main+0x314>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002f7a:	491c      	ldr	r1, [pc, #112]	; (8002fec <main+0x318>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002f7c:	6098      	str	r0, [r3, #8]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002f7e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f82:	e883 0006 	stmia.w	r3, {r1, r2}
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8002f86:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8002f8a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f94:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002f96:	2218      	movs	r2, #24
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f98:	6118      	str	r0, [r3, #16]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002f9a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f9c:	6218      	str	r0, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f9e:	6258      	str	r0, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fa0:	6298      	str	r0, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002fa2:	2207      	movs	r2, #7
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002fa4:	6318      	str	r0, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002fa6:	2508      	movs	r5, #8
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002fa8:	4618      	mov	r0, r3
  hspi3.Init.CRCPolynomial = 7;
 8002faa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002fac:	635d      	str	r5, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002fae:	f7fe fa1d 	bl	80013ec <HAL_SPI_Init>
 8002fb2:	4606      	mov	r6, r0
 8002fb4:	b300      	cbz	r0, 8002ff8 <main+0x324>
 8002fb6:	e7fe      	b.n	8002fb6 <main+0x2e2>
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	20000128 	.word	0x20000128
 8002fc0:	4001001c 	.word	0x4001001c
 8002fc4:	200002fc 	.word	0x200002fc
 8002fc8:	40012c00 	.word	0x40012c00
 8002fcc:	20000344 	.word	0x20000344
 8002fd0:	20000154 	.word	0x20000154
 8002fd4:	40000400 	.word	0x40000400
 8002fd8:	200000d0 	.word	0x200000d0
 8002fdc:	40003000 	.word	0x40003000
 8002fe0:	20000388 	.word	0x20000388
 8002fe4:	40014400 	.word	0x40014400
 8002fe8:	20000194 	.word	0x20000194
 8002fec:	40003c00 	.word	0x40003c00
 8002ff0:	48000800 	.word	0x48000800
 8002ff4:	48000c00 	.word	0x48000c00
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002ff8:	4601      	mov	r1, r0
 8002ffa:	48a9      	ldr	r0, [pc, #676]	; (80032a0 <main+0x5cc>)
 8002ffc:	f7fe ff28 	bl	8001e50 <HAL_TIM_PWM_Start>
  	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8003000:	4631      	mov	r1, r6
 8003002:	48a7      	ldr	r0, [pc, #668]	; (80032a0 <main+0x5cc>)
 8003004:	f7ff f818 	bl	8002038 <HAL_TIMEx_PWMN_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003008:	2104      	movs	r1, #4
 800300a:	48a5      	ldr	r0, [pc, #660]	; (80032a0 <main+0x5cc>)
 800300c:	f7fe ff20 	bl	8001e50 <HAL_TIM_PWM_Start>
  	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8003010:	2104      	movs	r1, #4
 8003012:	48a3      	ldr	r0, [pc, #652]	; (80032a0 <main+0x5cc>)
 8003014:	f7ff f810 	bl	8002038 <HAL_TIMEx_PWMN_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003018:	4629      	mov	r1, r5
 800301a:	48a1      	ldr	r0, [pc, #644]	; (80032a0 <main+0x5cc>)
 800301c:	f7fe ff18 	bl	8001e50 <HAL_TIM_PWM_Start>
  	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8003020:	4629      	mov	r1, r5
 8003022:	489f      	ldr	r0, [pc, #636]	; (80032a0 <main+0x5cc>)
 8003024:	f7ff f808 	bl	8002038 <HAL_TIMEx_PWMN_Start>
      HAL_TIM_Base_Start_IT(&htim16);
 8003028:	4620      	mov	r0, r4
 800302a:	f7fe faff 	bl	800162c <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start(&htim3);
 800302e:	489d      	ldr	r0, [pc, #628]	; (80032a4 <main+0x5d0>)
 8003030:	f7fe faef 	bl	8001612 <HAL_TIM_Base_Start>
	playStartupTune();        // plays a startup tune throught the motor
 8003034:	f7ff fcca 	bl	80029cc <playStartupTune>
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_5) != HAL_OK)
 8003038:	2110      	movs	r1, #16
 800303a:	4899      	ldr	r0, [pc, #612]	; (80032a0 <main+0x5cc>)
 800303c:	f7fe ff08 	bl	8001e50 <HAL_TIM_PWM_Start>
 8003040:	b100      	cbz	r0, 8003044 <main+0x370>
 8003042:	e7fe      	b.n	8003042 <main+0x36e>
	if(HAL_COMP_Start_IT(&hcomp1) != HAL_OK)            // start comparator in interrupt mode
 8003044:	4898      	ldr	r0, [pc, #608]	; (80032a8 <main+0x5d4>)
 8003046:	f7fd f9a1 	bl	800038c <HAL_COMP_Start_IT>
 800304a:	b100      	cbz	r0, 800304e <main+0x37a>
 800304c:	e7fe      	b.n	800304c <main+0x378>
	if(HAL_IWDG_Init(&hiwdg) != HAL_OK)          // start watch dog timer
 800304e:	4897      	ldr	r0, [pc, #604]	; (80032ac <main+0x5d8>)
 8003050:	f7fd fc81 	bl	8000956 <HAL_IWDG_Init>
 8003054:	4604      	mov	r4, r0
 8003056:	b100      	cbz	r0, 800305a <main+0x386>
 8003058:	e7fe      	b.n	8003058 <main+0x384>
  	DRV8323_setupSpi();
 800305a:	f7ff f9d1 	bl	8002400 <DRV8323_setupSpi>
  	TIM1->CCR5 = pwm_settle;
 800305e:	4a94      	ldr	r2, [pc, #592]	; (80032b0 <main+0x5dc>)
  	TIM1->CCR1 = 0;												// set duty cycle to low start amount
 8003060:	4b94      	ldr	r3, [pc, #592]	; (80032b4 <main+0x5e0>)
  	TIM1->CCR5 = pwm_settle;
 8003062:	6812      	ldr	r2, [r2, #0]
	  if(HAL_IWDG_Refresh(&hiwdg) != HAL_OK)                   // watchdog refresh
 8003064:	f8df b244 	ldr.w	fp, [pc, #580]	; 80032ac <main+0x5d8>
	  count++;
 8003068:	4e93      	ldr	r6, [pc, #588]	; (80032b8 <main+0x5e4>)
  	TIM1->CCR1 = 0;												// set duty cycle to low start amount
 800306a:	635c      	str	r4, [r3, #52]	; 0x34
  	TIM1->CCR2 = 0;
 800306c:	639c      	str	r4, [r3, #56]	; 0x38
  	TIM1->CCR3 = 0;
 800306e:	63dc      	str	r4, [r3, #60]	; 0x3c
  	TIM1->CCR5 = pwm_settle;
 8003070:	659a      	str	r2, [r3, #88]	; 0x58
	  if(HAL_IWDG_Refresh(&hiwdg) != HAL_OK)                   // watchdog refresh
 8003072:	4658      	mov	r0, fp
 8003074:	f7fd fc95 	bl	80009a2 <HAL_IWDG_Refresh>
 8003078:	b100      	cbz	r0, 800307c <main+0x3a8>
 800307a:	e7fe      	b.n	800307a <main+0x3a6>
	  compit = 0;
 800307c:	4b8f      	ldr	r3, [pc, #572]	; (80032bc <main+0x5e8>)
 800307e:	4d90      	ldr	r5, [pc, #576]	; (80032c0 <main+0x5ec>)
 8003080:	6018      	str	r0, [r3, #0]
	  count++;
 8003082:	6833      	ldr	r3, [r6, #0]
	  if ( count > 50000) {
 8003084:	f24c 3250 	movw	r2, #50000	; 0xc350
	  count++;
 8003088:	3301      	adds	r3, #1
	  if ( count > 50000) {
 800308a:	4293      	cmp	r3, r2
	if (newinput > 100){
 800308c:	4a8d      	ldr	r2, [pc, #564]	; (80032c4 <main+0x5f0>)
	  count++;
 800308e:	6033      	str	r3, [r6, #0]
	if (newinput > 100){
 8003090:	6813      	ldr	r3, [r2, #0]
		  count = 0;
 8003092:	bfc8      	it	gt
 8003094:	6030      	strgt	r0, [r6, #0]
	if (newinput > 100){
 8003096:	2b64      	cmp	r3, #100	; 0x64
 8003098:	dd1c      	ble.n	80030d4 <main+0x400>
		if (newinput > 2000){
 800309a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
			newinput = 2000;
 800309e:	bfc4      	itt	gt
 80030a0:	f44f 63fa 	movgt.w	r3, #2000	; 0x7d0
 80030a4:	6013      	strgt	r3, [r2, #0]
		if (newinput >= input){
 80030a6:	6812      	ldr	r2, [r2, #0]
 80030a8:	682b      	ldr	r3, [r5, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	db0e      	blt.n	80030cc <main+0x3f8>
			if (newinput - input > 50){
 80030ae:	1ad1      	subs	r1, r2, r3
 80030b0:	2932      	cmp	r1, #50	; 0x32
 80030b2:	dd11      	ble.n	80030d8 <main+0x404>
				count++;
 80030b4:	6831      	ldr	r1, [r6, #0]
 80030b6:	3101      	adds	r1, #1
				if (count > 10){
 80030b8:	290a      	cmp	r1, #10
				count++;
 80030ba:	6031      	str	r1, [r6, #0]
				if (count > 10){
 80030bc:	dd0f      	ble.n	80030de <main+0x40a>
					input += 10;
 80030be:	330a      	adds	r3, #10
 80030c0:	602b      	str	r3, [r5, #0]
					count = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	6033      	str	r3, [r6, #0]
		if (newinput < input){
 80030c6:	682b      	ldr	r3, [r5, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	da08      	bge.n	80030de <main+0x40a>
			if (input - newinput > 50){
 80030cc:	1a99      	subs	r1, r3, r2
 80030ce:	2932      	cmp	r1, #50	; 0x32
 80030d0:	dd04      	ble.n	80030dc <main+0x408>
				input--;
 80030d2:	3b01      	subs	r3, #1
		input = newinput;
 80030d4:	602b      	str	r3, [r5, #0]
 80030d6:	e002      	b.n	80030de <main+0x40a>
				input = newinput;
 80030d8:	602a      	str	r2, [r5, #0]
 80030da:	e7f4      	b.n	80030c6 <main+0x3f2>
				input = newinput;
 80030dc:	602a      	str	r2, [r5, #0]
	if (inputSet == 0){
 80030de:	f8df a230 	ldr.w	sl, [pc, #560]	; 8003310 <main+0x63c>
 80030e2:	f89a 3000 	ldrb.w	r3, [sl]
 80030e6:	b923      	cbnz	r3, 80030f2 <main+0x41e>
		HAL_Delay(10);                             //        set back to 10 after testing
 80030e8:	200a      	movs	r0, #10
 80030ea:	f7fd f8a7 	bl	800023c <HAL_Delay>
		detectInput();
 80030ee:	f7ff fca7 	bl	8002a40 <detectInput>
	if (bemf_counts < 50 || commutation_interval > 2000 ) {
 80030f2:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8003314 <main+0x640>
 80030f6:	4f74      	ldr	r7, [pc, #464]	; (80032c8 <main+0x5f4>)
 80030f8:	f8d9 3000 	ldr.w	r3, [r9]
 80030fc:	4a73      	ldr	r2, [pc, #460]	; (80032cc <main+0x5f8>)
 80030fe:	2b31      	cmp	r3, #49	; 0x31
 8003100:	4b73      	ldr	r3, [pc, #460]	; (80032d0 <main+0x5fc>)
 8003102:	dd04      	ble.n	800310e <main+0x43a>
 8003104:	6839      	ldr	r1, [r7, #0]
 8003106:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
 800310a:	f340 80ba 	ble.w	8003282 <main+0x5ae>
				filter_delay = 5;
 800310e:	2105      	movs	r1, #5
 8003110:	6011      	str	r1, [r2, #0]
				filter_level = 10;
 8003112:	220a      	movs	r2, #10
				filter_level = 4;
 8003114:	601a      	str	r2, [r3, #0]
	advancedivisor = map((commutation_interval), 100, 8000, 4, 10);
 8003116:	230a      	movs	r3, #10
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800311e:	2304      	movs	r3, #4
 8003120:	2164      	movs	r1, #100	; 0x64
 8003122:	6838      	ldr	r0, [r7, #0]
 8003124:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 8003318 <main+0x644>
 8003128:	f7ff f9aa 	bl	8002480 <map>
	signaltimeout++;
 800312c:	4a69      	ldr	r2, [pc, #420]	; (80032d4 <main+0x600>)
	advancedivisor = map((commutation_interval), 100, 8000, 4, 10);
 800312e:	4b6a      	ldr	r3, [pc, #424]	; (80032d8 <main+0x604>)
 8003130:	7018      	strb	r0, [r3, #0]
	signaltimeout++;
 8003132:	6813      	ldr	r3, [r2, #0]
 8003134:	3301      	adds	r3, #1
 8003136:	6013      	str	r3, [r2, #0]
	if (signaltimeout > signal_timeout_threshold) {
 8003138:	4a68      	ldr	r2, [pc, #416]	; (80032dc <main+0x608>)
 800313a:	6812      	ldr	r2, [r2, #0]
 800313c:	4293      	cmp	r3, r2
 800313e:	dd20      	ble.n	8003182 <main+0x4ae>
		armedcount = 0;
 8003140:	4b67      	ldr	r3, [pc, #412]	; (80032e0 <main+0x60c>)
		HAL_TIM_Base_Start_IT(&htim16);
 8003142:	4868      	ldr	r0, [pc, #416]	; (80032e4 <main+0x610>)
		input = 0;
 8003144:	2400      	movs	r4, #0
		armedcount = 0;
 8003146:	601c      	str	r4, [r3, #0]
		error = 1;
 8003148:	4b67      	ldr	r3, [pc, #412]	; (80032e8 <main+0x614>)
		input = 0;
 800314a:	602c      	str	r4, [r5, #0]
		error = 1;
 800314c:	2201      	movs	r2, #1
 800314e:	701a      	strb	r2, [r3, #0]
		TIM15->PSC=0;
 8003150:	4b66      	ldr	r3, [pc, #408]	; (80032ec <main+0x618>)
		armed = 0;
 8003152:	f888 4000 	strb.w	r4, [r8]
		inputSet = 0;
 8003156:	f88a 4000 	strb.w	r4, [sl]
		TIM15->PSC=0;
 800315a:	629c      	str	r4, [r3, #40]	; 0x28
		TIM16->PSC=0;
 800315c:	f8c3 4428 	str.w	r4, [r3, #1064]	; 0x428
		servoPwm = 0;
 8003160:	4b63      	ldr	r3, [pc, #396]	; (80032f0 <main+0x61c>)
 8003162:	701c      	strb	r4, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim16);
 8003164:	f7fe fa62 	bl	800162c <HAL_TIM_Base_Start_IT>
			dma_buffer[i] = 0;
 8003168:	4a62      	ldr	r2, [pc, #392]	; (80032f4 <main+0x620>)
		for (int i=0; i < 64; i++){
 800316a:	4623      	mov	r3, r4
			dma_buffer[i] = 0;
 800316c:	4621      	mov	r1, r4
 800316e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i=0; i < 64; i++){
 8003172:	3301      	adds	r3, #1
 8003174:	2b40      	cmp	r3, #64	; 0x40
 8003176:	d1fa      	bne.n	800316e <main+0x49a>
		HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, dma_buffer , 64);
 8003178:	4a5e      	ldr	r2, [pc, #376]	; (80032f4 <main+0x620>)
 800317a:	485f      	ldr	r0, [pc, #380]	; (80032f8 <main+0x624>)
 800317c:	2100      	movs	r1, #0
 800317e:	f7fe fe89 	bl	8001e94 <HAL_TIM_IC_Start_DMA>
	if (!armed){                   // if not armed
 8003182:	f898 3000 	ldrb.w	r3, [r8]
 8003186:	bb0b      	cbnz	r3, 80031cc <main+0x4f8>
		if ((inputSet == 1)&&(input == 0)){
 8003188:	f89a 4000 	ldrb.w	r4, [sl]
 800318c:	2c01      	cmp	r4, #1
 800318e:	d117      	bne.n	80031c0 <main+0x4ec>
 8003190:	682a      	ldr	r2, [r5, #0]
 8003192:	b9aa      	cbnz	r2, 80031c0 <main+0x4ec>
			armedcount++;
 8003194:	f8df a148 	ldr.w	sl, [pc, #328]	; 80032e0 <main+0x60c>
 8003198:	9203      	str	r2, [sp, #12]
 800319a:	f8da 3000 	ldr.w	r3, [sl]
			HAL_Delay(1);
 800319e:	4620      	mov	r0, r4
			armedcount++;
 80031a0:	3301      	adds	r3, #1
 80031a2:	f8ca 3000 	str.w	r3, [sl]
			HAL_Delay(1);
 80031a6:	f7fd f849 	bl	800023c <HAL_Delay>
			if (armedcount > 500){            // require a input to be stable at 0 for 500 ms
 80031aa:	f8da 3000 	ldr.w	r3, [sl]
 80031ae:	9a03      	ldr	r2, [sp, #12]
 80031b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80031b4:	dd04      	ble.n	80031c0 <main+0x4ec>
				commutation_interval = 0;
 80031b6:	603a      	str	r2, [r7, #0]
				armed = 1;
 80031b8:	f888 4000 	strb.w	r4, [r8]
				playInputTune();
 80031bc:	f7ff fc26 	bl	8002a0c <playInputTune>
		if (input > 1){            // if the input goes over 1 reset armed count
 80031c0:	682b      	ldr	r3, [r5, #0]
 80031c2:	2b01      	cmp	r3, #1
			armedcount = 0;
 80031c4:	bfc2      	ittt	gt
 80031c6:	4b46      	ldrgt	r3, [pc, #280]	; (80032e0 <main+0x60c>)
 80031c8:	2200      	movgt	r2, #0
 80031ca:	601a      	strgt	r2, [r3, #0]
	if (duty_cycle < 500 && commutation_interval < 200){         // stuck commutation at pwm speed
 80031cc:	4a4b      	ldr	r2, [pc, #300]	; (80032fc <main+0x628>)
 80031ce:	4c4c      	ldr	r4, [pc, #304]	; (8003300 <main+0x62c>)
 80031d0:	6813      	ldr	r3, [r2, #0]
 80031d2:	f8df a148 	ldr.w	sl, [pc, #328]	; 800331c <main+0x648>
 80031d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80031da:	da05      	bge.n	80031e8 <main+0x514>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	2bc7      	cmp	r3, #199	; 0xc7
		zctimeout = zc_timeout_threshold;
 80031e0:	bfdc      	itt	le
 80031e2:	f8da 3000 	ldrle.w	r3, [sl]
 80031e6:	6023      	strle	r3, [r4, #0]
	if ((input > 100)&&(armed == 1)) {             // minimum input amount to start motor
 80031e8:	682b      	ldr	r3, [r5, #0]
 80031ea:	4d46      	ldr	r5, [pc, #280]	; (8003304 <main+0x630>)
 80031ec:	2b64      	cmp	r3, #100	; 0x64
 80031ee:	dd4c      	ble.n	800328a <main+0x5b6>
 80031f0:	f898 1000 	ldrb.w	r1, [r8]
 80031f4:	2901      	cmp	r1, #1
 80031f6:	d11f      	bne.n	8003238 <main+0x564>
		duty_cycle = input - 15;                   // sets duty cycle, PWM
 80031f8:	3b0f      	subs	r3, #15
		started = 1;
 80031fa:	6029      	str	r1, [r5, #0]
		if (duty_cycle > 1498){                      //  limit to 1400 for testing out of 1499
 80031fc:	f240 51da 	movw	r1, #1498	; 0x5da
 8003200:	428b      	cmp	r3, r1
		duty_cycle = input - 15;                   // sets duty cycle, PWM
 8003202:	6013      	str	r3, [r2, #0]
		if (bemf_counts < 15 ){
 8003204:	f8d9 3000 	ldr.w	r3, [r9]
			duty_cycle = 1498;
 8003208:	bfc8      	it	gt
 800320a:	6011      	strgt	r1, [r2, #0]
		if (bemf_counts < 15 ){
 800320c:	2b0e      	cmp	r3, #14
 800320e:	dc0b      	bgt.n	8003228 <main+0x554>
			if (duty_cycle > 500){
 8003210:	6813      	ldr	r3, [r2, #0]
 8003212:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
				duty_cycle = 500;
 8003216:	bfc4      	itt	gt
 8003218:	f44f 73fa 	movgt.w	r3, #500	; 0x1f4
 800321c:	6013      	strgt	r3, [r2, #0]
			if (duty_cycle < 200){
 800321e:	6813      	ldr	r3, [r2, #0]
 8003220:	2bc7      	cmp	r3, #199	; 0xc7
				duty_cycle = 200;
 8003222:	bfdc      	itt	le
 8003224:	23c8      	movle	r3, #200	; 0xc8
 8003226:	6013      	strle	r3, [r2, #0]
		if (running){
 8003228:	4b37      	ldr	r3, [pc, #220]	; (8003308 <main+0x634>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	b123      	cbz	r3, 8003238 <main+0x564>
			TIM1->CCR1 = duty_cycle;                // sets duty cycle for PWM output
 800322e:	6812      	ldr	r2, [r2, #0]
 8003230:	4b20      	ldr	r3, [pc, #128]	; (80032b4 <main+0x5e0>)
		TIM1->CCR1 = 1;
 8003232:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 1;
 8003234:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 1;
 8003236:	63da      	str	r2, [r3, #60]	; 0x3c
	zctimeout++;                                    // increments zero cross timeout counter
 8003238:	6823      	ldr	r3, [r4, #0]
	if (zctimeout > zc_timeout_threshold) {               // if over threshold
 800323a:	f8da 2000 	ldr.w	r2, [sl]
	zctimeout++;                                    // increments zero cross timeout counter
 800323e:	3301      	adds	r3, #1
	if (zctimeout > zc_timeout_threshold) {               // if over threshold
 8003240:	4293      	cmp	r3, r2
	zctimeout++;                                    // increments zero cross timeout counter
 8003242:	6023      	str	r3, [r4, #0]
	if (zctimeout > zc_timeout_threshold) {               // if over threshold
 8003244:	dd0f      	ble.n	8003266 <main+0x592>
		bemf_counts = 0;
 8003246:	f04f 0800 	mov.w	r8, #0
		HAL_COMP_Stop_IT(&hcomp1);
 800324a:	4817      	ldr	r0, [pc, #92]	; (80032a8 <main+0x5d4>)
		bemf_counts = 0;
 800324c:	f8c9 8000 	str.w	r8, [r9]
		HAL_COMP_Stop_IT(&hcomp1);
 8003250:	f7fd f900 	bl	8000454 <HAL_COMP_Stop_IT>
		allOff();                                         // stop motor and restart
 8003254:	f7ff fa78 	bl	8002748 <allOff>
		running = 0;
 8003258:	4b2b      	ldr	r3, [pc, #172]	; (8003308 <main+0x634>)
		commutation_interval = 0;
 800325a:	f8c7 8000 	str.w	r8, [r7]
		running = 0;
 800325e:	f8c3 8000 	str.w	r8, [r3]
		zctimeout = 0;
 8003262:	f8c4 8000 	str.w	r8, [r4]
	if (started == 1) {                           // Start the motor
 8003266:	682b      	ldr	r3, [r5, #0]
 8003268:	2b01      	cmp	r3, #1
 800326a:	f47f af02 	bne.w	8003072 <main+0x39e>
		if (running == 0) {
 800326e:	4b26      	ldr	r3, [pc, #152]	; (8003308 <main+0x634>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	f47f aefd 	bne.w	8003072 <main+0x39e>
			allOff();
 8003278:	f7ff fa66 	bl	8002748 <allOff>
			startMotor();  // safety on for input testing   ************************************************
 800327c:	f7ff fc98 	bl	8002bb0 <startMotor>
 8003280:	e6f7      	b.n	8003072 <main+0x39e>
				filter_delay = 0;
 8003282:	2100      	movs	r1, #0
 8003284:	6011      	str	r1, [r2, #0]
				filter_level = 4;
 8003286:	2204      	movs	r2, #4
 8003288:	e744      	b.n	8003114 <main+0x440>
		started = 0;
 800328a:	2300      	movs	r3, #0
 800328c:	602b      	str	r3, [r5, #0]
		if (!brake){
 800328e:	4b1f      	ldr	r3, [pc, #124]	; (800330c <main+0x638>)
		if(brake){
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	b10b      	cbz	r3, 8003298 <main+0x5c4>
			fullBrake();
 8003294:	f7ff fa68 	bl	8002768 <fullBrake>
		TIM1->CCR1 = 1;
 8003298:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <main+0x5e0>)
 800329a:	2201      	movs	r2, #1
 800329c:	e7c9      	b.n	8003232 <main+0x55e>
 800329e:	bf00      	nop
 80032a0:	200002fc 	.word	0x200002fc
 80032a4:	20000154 	.word	0x20000154
 80032a8:	20000128 	.word	0x20000128
 80032ac:	200000d0 	.word	0x200000d0
 80032b0:	20000030 	.word	0x20000030
 80032b4:	40012c00 	.word	0x40012c00
 80032b8:	20000014 	.word	0x20000014
 80032bc:	2000033c 	.word	0x2000033c
 80032c0:	20000090 	.word	0x20000090
 80032c4:	2000009c 	.word	0x2000009c
 80032c8:	20000084 	.word	0x20000084
 80032cc:	20000340 	.word	0x20000340
 80032d0:	20000124 	.word	0x20000124
 80032d4:	200000ac 	.word	0x200000ac
 80032d8:	20000008 	.word	0x20000008
 80032dc:	20000038 	.word	0x20000038
 80032e0:	2000007c 	.word	0x2000007c
 80032e4:	20000388 	.word	0x20000388
 80032e8:	2000008c 	.word	0x2000008c
 80032ec:	40014000 	.word	0x40014000
 80032f0:	200000a8 	.word	0x200000a8
 80032f4:	200001fc 	.word	0x200001fc
 80032f8:	20000344 	.word	0x20000344
 80032fc:	20000088 	.word	0x20000088
 8003300:	200000c0 	.word	0x200000c0
 8003304:	200000b0 	.word	0x200000b0
 8003308:	200000a0 	.word	0x200000a0
 800330c:	20000010 	.word	0x20000010
 8003310:	20000094 	.word	0x20000094
 8003314:	200001f8 	.word	0x200001f8
 8003318:	20000078 	.word	0x20000078
 800331c:	2000004c 	.word	0x2000004c

08003320 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8003320:	e7fe      	b.n	8003320 <_Error_Handler>
	...

08003324 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003324:	4b1d      	ldr	r3, [pc, #116]	; (800339c <HAL_MspInit+0x78>)
{
 8003326:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003328:	699a      	ldr	r2, [r3, #24]
 800332a:	f042 0201 	orr.w	r2, r2, #1
 800332e:	619a      	str	r2, [r3, #24]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003338:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800333a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800333c:	f7fd f8ea 	bl	8000514 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003340:	2200      	movs	r2, #0
 8003342:	4611      	mov	r1, r2
 8003344:	f06f 000b 	mvn.w	r0, #11
 8003348:	f7fd f8f6 	bl	8000538 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800334c:	2200      	movs	r2, #0
 800334e:	4611      	mov	r1, r2
 8003350:	f06f 000a 	mvn.w	r0, #10
 8003354:	f7fd f8f0 	bl	8000538 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003358:	2200      	movs	r2, #0
 800335a:	4611      	mov	r1, r2
 800335c:	f06f 0009 	mvn.w	r0, #9
 8003360:	f7fd f8ea 	bl	8000538 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003364:	2200      	movs	r2, #0
 8003366:	4611      	mov	r1, r2
 8003368:	f06f 0004 	mvn.w	r0, #4
 800336c:	f7fd f8e4 	bl	8000538 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003370:	2200      	movs	r2, #0
 8003372:	4611      	mov	r1, r2
 8003374:	f06f 0003 	mvn.w	r0, #3
 8003378:	f7fd f8de 	bl	8000538 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800337c:	2200      	movs	r2, #0
 800337e:	4611      	mov	r1, r2
 8003380:	f06f 0001 	mvn.w	r0, #1
 8003384:	f7fd f8d8 	bl	8000538 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003388:	2200      	movs	r2, #0
 800338a:	4611      	mov	r1, r2
 800338c:	f04f 30ff 	mov.w	r0, #4294967295
 8003390:	f7fd f8d2 	bl	8000538 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003394:	b003      	add	sp, #12
 8003396:	f85d fb04 	ldr.w	pc, [sp], #4
 800339a:	bf00      	nop
 800339c:	40021000 	.word	0x40021000

080033a0 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80033a0:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcomp->Instance==COMP1)
 80033a2:	6802      	ldr	r2, [r0, #0]
 80033a4:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <HAL_COMP_MspInit+0x34>)
 80033a6:	429a      	cmp	r2, r3
{
 80033a8:	b086      	sub	sp, #24
  if(hcomp->Instance==COMP1)
 80033aa:	d111      	bne.n	80033d0 <HAL_COMP_MspInit+0x30>
  
    /**COMP1 GPIO Configuration    
    PA0     ------> COMP1_INM
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80033ac:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ae:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b0:	a901      	add	r1, sp, #4
 80033b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80033b6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033b8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ba:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033bc:	f7fd f9f6 	bl	80007ac <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_IRQn, 0, 0);
 80033c0:	2040      	movs	r0, #64	; 0x40
 80033c2:	4622      	mov	r2, r4
 80033c4:	4621      	mov	r1, r4
 80033c6:	f7fd f8b7 	bl	8000538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_IRQn);
 80033ca:	2040      	movs	r0, #64	; 0x40
 80033cc:	f7fd f8e8 	bl	80005a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 80033d0:	b006      	add	sp, #24
 80033d2:	bd10      	pop	{r4, pc}
 80033d4:	4001001c 	.word	0x4001001c

080033d8 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI3)
 80033da:	6802      	ldr	r2, [r0, #0]
 80033dc:	4b0f      	ldr	r3, [pc, #60]	; (800341c <HAL_SPI_MspInit+0x44>)
 80033de:	429a      	cmp	r2, r3
 80033e0:	d119      	bne.n	8003416 <HAL_SPI_MspInit+0x3e>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80033e2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033e6:	a901      	add	r1, sp, #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 80033e8:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033ea:	480d      	ldr	r0, [pc, #52]	; (8003420 <HAL_SPI_MspInit+0x48>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80033ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033f0:	61da      	str	r2, [r3, #28]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80033fc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003400:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003402:	2302      	movs	r3, #2
 8003404:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003406:	2300      	movs	r3, #0
 8003408:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800340a:	2303      	movs	r3, #3
 800340c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800340e:	2306      	movs	r3, #6
 8003410:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003412:	f7fd f9cb 	bl	80007ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003416:	b007      	add	sp, #28
 8003418:	f85d fb04 	ldr.w	pc, [sp], #4
 800341c:	40003c00 	.word	0x40003c00
 8003420:	48000800 	.word	0x48000800

08003424 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003424:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM1)
 8003426:	6803      	ldr	r3, [r0, #0]
 8003428:	4a37      	ldr	r2, [pc, #220]	; (8003508 <HAL_TIM_Base_MspInit+0xe4>)
 800342a:	4293      	cmp	r3, r2
{
 800342c:	b088      	sub	sp, #32
 800342e:	4606      	mov	r6, r0
  if(htim_base->Instance==TIM1)
 8003430:	d112      	bne.n	8003458 <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003432:	4b36      	ldr	r3, [pc, #216]	; (800350c <HAL_TIM_Base_MspInit+0xe8>)
 8003434:	699a      	ldr	r2, [r3, #24]
 8003436:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800343a:	619a      	str	r2, [r3, #24]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	9b00      	ldr	r3, [sp, #0]

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003446:	2200      	movs	r2, #0
 8003448:	4611      	mov	r1, r2
 800344a:	2019      	movs	r0, #25
 800344c:	f7fd f874 	bl	8000538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003450:	2019      	movs	r0, #25
 8003452:	f7fd f8a5 	bl	80005a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003456:	e038      	b.n	80034ca <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8003458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800345c:	d137      	bne.n	80034ce <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800345e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003462:	2500      	movs	r5, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003464:	69da      	ldr	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8003466:	4c2a      	ldr	r4, [pc, #168]	; (8003510 <HAL_TIM_Base_MspInit+0xec>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003468:	f042 0201 	orr.w	r2, r2, #1
 800346c:	61da      	str	r2, [r3, #28]
 800346e:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003470:	9505      	str	r5, [sp, #20]
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800347c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003480:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003482:	2302      	movs	r3, #2
 8003484:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 800348a:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800348c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 800348e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003490:	f7fd f98c 	bl	80007ac <HAL_GPIO_Init>
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8003494:	4b1f      	ldr	r3, [pc, #124]	; (8003514 <HAL_TIM_Base_MspInit+0xf0>)
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003496:	60a5      	str	r5, [r4, #8]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003498:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800349c:	2380      	movs	r3, #128	; 0x80
 800349e:	60e3      	str	r3, [r4, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80034a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034a4:	6123      	str	r3, [r4, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80034a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034aa:	6163      	str	r3, [r4, #20]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 80034ac:	4620      	mov	r0, r4
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 80034ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 80034b2:	61a5      	str	r5, [r4, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 80034b4:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 80034b6:	f7fd f8c9 	bl	800064c <HAL_DMA_Init>
 80034ba:	b118      	cbz	r0, 80034c4 <HAL_TIM_Base_MspInit+0xa0>
      _Error_Handler(__FILE__, __LINE__);
 80034bc:	21ef      	movs	r1, #239	; 0xef
 80034be:	4816      	ldr	r0, [pc, #88]	; (8003518 <HAL_TIM_Base_MspInit+0xf4>)
 80034c0:	f7ff ff2e 	bl	8003320 <_Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 80034c4:	62b4      	str	r4, [r6, #40]	; 0x28
 80034c6:	6266      	str	r6, [r4, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 80034c8:	6334      	str	r4, [r6, #48]	; 0x30
}
 80034ca:	b008      	add	sp, #32
 80034cc:	bd70      	pop	{r4, r5, r6, pc}
  else if(htim_base->Instance==TIM3)
 80034ce:	4a13      	ldr	r2, [pc, #76]	; (800351c <HAL_TIM_Base_MspInit+0xf8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d10a      	bne.n	80034ea <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034d4:	4b0d      	ldr	r3, [pc, #52]	; (800350c <HAL_TIM_Base_MspInit+0xe8>)
 80034d6:	69da      	ldr	r2, [r3, #28]
 80034d8:	f042 0202 	orr.w	r2, r2, #2
 80034dc:	61da      	str	r2, [r3, #28]
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	9302      	str	r3, [sp, #8]
 80034e6:	9b02      	ldr	r3, [sp, #8]
 80034e8:	e7ef      	b.n	80034ca <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM16)
 80034ea:	4a0d      	ldr	r2, [pc, #52]	; (8003520 <HAL_TIM_Base_MspInit+0xfc>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d1ec      	bne.n	80034ca <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80034f0:	4b06      	ldr	r3, [pc, #24]	; (800350c <HAL_TIM_Base_MspInit+0xe8>)
 80034f2:	699a      	ldr	r2, [r3, #24]
 80034f4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80034f8:	619a      	str	r2, [r3, #24]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003500:	9303      	str	r3, [sp, #12]
 8003502:	9b03      	ldr	r3, [sp, #12]
 8003504:	e79f      	b.n	8003446 <HAL_TIM_Base_MspInit+0x22>
 8003506:	bf00      	nop
 8003508:	40012c00 	.word	0x40012c00
 800350c:	40021000 	.word	0x40021000
 8003510:	200000e0 	.word	0x200000e0
 8003514:	40020080 	.word	0x40020080
 8003518:	0800371c 	.word	0x0800371c
 800351c:	40000400 	.word	0x40000400
 8003520:	40014400 	.word	0x40014400

08003524 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003524:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8003526:	6802      	ldr	r2, [r0, #0]
 8003528:	4b13      	ldr	r3, [pc, #76]	; (8003578 <HAL_TIM_MspPostInit+0x54>)
 800352a:	429a      	cmp	r2, r3
{
 800352c:	b086      	sub	sp, #24
  if(htim->Instance==TIM1)
 800352e:	d121      	bne.n	8003574 <HAL_TIM_MspPostInit+0x50>
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003530:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003532:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003534:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003536:	a901      	add	r1, sp, #4
 8003538:	4810      	ldr	r0, [pc, #64]	; (800357c <HAL_TIM_MspPostInit+0x58>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800353a:	9301      	str	r3, [sp, #4]

    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800353c:	2606      	movs	r6, #6
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800353e:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003540:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003542:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003544:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003546:	f7fd f931 	bl	80007ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800354a:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800354c:	a901      	add	r1, sp, #4
 800354e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003552:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003554:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003556:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003558:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800355a:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800355c:	f7fd f926 	bl	80007ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003560:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003562:	a901      	add	r1, sp, #4
 8003564:	4806      	ldr	r0, [pc, #24]	; (8003580 <HAL_TIM_MspPostInit+0x5c>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003566:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003568:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800356e:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003570:	f7fd f91c 	bl	80007ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003574:	b006      	add	sp, #24
 8003576:	bd70      	pop	{r4, r5, r6, pc}
 8003578:	40012c00 	.word	0x40012c00
 800357c:	48000800 	.word	0x48000800
 8003580:	48000400 	.word	0x48000400

08003584 <NMI_Handler>:
 8003584:	4770      	bx	lr

08003586 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003586:	e7fe      	b.n	8003586 <HardFault_Handler>

08003588 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003588:	e7fe      	b.n	8003588 <MemManage_Handler>

0800358a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800358a:	e7fe      	b.n	800358a <BusFault_Handler>

0800358c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800358c:	e7fe      	b.n	800358c <UsageFault_Handler>

0800358e <SVC_Handler>:
 800358e:	4770      	bx	lr

08003590 <DebugMon_Handler>:
 8003590:	4770      	bx	lr

08003592 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003592:	4770      	bx	lr

08003594 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003594:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003596:	f7fc fe43 	bl	8000220 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800359a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800359e:	f7fd b82e 	b.w	80005fe <HAL_SYSTICK_IRQHandler>
	...

080035a4 <DMA1_Channel7_IRQHandler>:

/**
* @brief This function handles DMA1 channel7 global interrupt.
*/
void DMA1_Channel7_IRQHandler(void)
{
 80035a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 80035a6:	4803      	ldr	r0, [pc, #12]	; (80035b4 <DMA1_Channel7_IRQHandler+0x10>)
 80035a8:	f7fd f8b8 	bl	800071c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */
  transferComplete();
  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80035ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  transferComplete();
 80035b0:	f7ff bada 	b.w	8002b68 <transferComplete>
 80035b4:	200000e0 	.word	0x200000e0

080035b8 <TIM1_UP_TIM16_IRQHandler>:

/**
* @brief This function handles TIM1 update and TIM16 interrupts.
*/
void TIM1_UP_TIM16_IRQHandler(void)
{
 80035b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80035ba:	4804      	ldr	r0, [pc, #16]	; (80035cc <TIM1_UP_TIM16_IRQHandler+0x14>)
 80035bc:	f7fe f867 	bl	800168e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80035c0:	4803      	ldr	r0, [pc, #12]	; (80035d0 <TIM1_UP_TIM16_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80035c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim16);
 80035c6:	f7fe b862 	b.w	800168e <HAL_TIM_IRQHandler>
 80035ca:	bf00      	nop
 80035cc:	200002fc 	.word	0x200002fc
 80035d0:	20000388 	.word	0x20000388

080035d4 <COMP1_2_IRQHandler>:
void COMP1_2_IRQHandler(void)
{
  /* USER CODE BEGIN COMP1_2_IRQn 0 */

  /* USER CODE END COMP1_2_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 80035d4:	4801      	ldr	r0, [pc, #4]	; (80035dc <COMP1_2_IRQHandler+0x8>)
 80035d6:	f7fc bf6d 	b.w	80004b4 <HAL_COMP_IRQHandler>
 80035da:	bf00      	nop
 80035dc:	20000128 	.word	0x20000128

080035e0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035e0:	4915      	ldr	r1, [pc, #84]	; (8003638 <SystemInit+0x58>)
 80035e2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80035e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80035ee:	4b13      	ldr	r3, [pc, #76]	; (800363c <SystemInit+0x5c>)
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80035f8:	6858      	ldr	r0, [r3, #4]
 80035fa:	4a11      	ldr	r2, [pc, #68]	; (8003640 <SystemInit+0x60>)
 80035fc:	4002      	ands	r2, r0
 80035fe:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003606:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800360a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003612:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800361a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800361c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800361e:	f022 020f 	bic.w	r2, r2, #15
 8003622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003624:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003626:	4a07      	ldr	r2, [pc, #28]	; (8003644 <SystemInit+0x64>)
 8003628:	4002      	ands	r2, r0
 800362a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800362c:	2200      	movs	r2, #0
 800362e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003630:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003634:	608b      	str	r3, [r1, #8]
 8003636:	4770      	bx	lr
 8003638:	e000ed00 	.word	0xe000ed00
 800363c:	40021000 	.word	0x40021000
 8003640:	f87fc00c 	.word	0xf87fc00c
 8003644:	ff00fccc 	.word	0xff00fccc

08003648 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003680 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800364c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800364e:	e003      	b.n	8003658 <LoopCopyDataInit>

08003650 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003650:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003652:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003654:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003656:	3104      	adds	r1, #4

08003658 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003658:	480b      	ldr	r0, [pc, #44]	; (8003688 <LoopForever+0xa>)
	ldr	r3, =_edata
 800365a:	4b0c      	ldr	r3, [pc, #48]	; (800368c <LoopForever+0xe>)
	adds	r2, r0, r1
 800365c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800365e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003660:	d3f6      	bcc.n	8003650 <CopyDataInit>
	ldr	r2, =_sbss
 8003662:	4a0b      	ldr	r2, [pc, #44]	; (8003690 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003664:	e002      	b.n	800366c <LoopFillZerobss>

08003666 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003666:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003668:	f842 3b04 	str.w	r3, [r2], #4

0800366c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800366c:	4b09      	ldr	r3, [pc, #36]	; (8003694 <LoopForever+0x16>)
	cmp	r2, r3
 800366e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003670:	d3f9      	bcc.n	8003666 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003672:	f7ff ffb5 	bl	80035e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003676:	f000 f811 	bl	800369c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800367a:	f7ff fb2b 	bl	8002cd4 <main>

0800367e <LoopForever>:

LoopForever:
    b LoopForever
 800367e:	e7fe      	b.n	800367e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003680:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8003684:	08003750 	.word	0x08003750
	ldr	r0, =_sdata
 8003688:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800368c:	20000054 	.word	0x20000054
	ldr	r2, =_sbss
 8003690:	20000054 	.word	0x20000054
	ldr	r3, = _ebss
 8003694:	200003c8 	.word	0x200003c8

08003698 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003698:	e7fe      	b.n	8003698 <ADC1_2_IRQHandler>
	...

0800369c <__libc_init_array>:
 800369c:	b570      	push	{r4, r5, r6, lr}
 800369e:	4e0d      	ldr	r6, [pc, #52]	; (80036d4 <__libc_init_array+0x38>)
 80036a0:	4c0d      	ldr	r4, [pc, #52]	; (80036d8 <__libc_init_array+0x3c>)
 80036a2:	1ba4      	subs	r4, r4, r6
 80036a4:	10a4      	asrs	r4, r4, #2
 80036a6:	2500      	movs	r5, #0
 80036a8:	42a5      	cmp	r5, r4
 80036aa:	d109      	bne.n	80036c0 <__libc_init_array+0x24>
 80036ac:	4e0b      	ldr	r6, [pc, #44]	; (80036dc <__libc_init_array+0x40>)
 80036ae:	4c0c      	ldr	r4, [pc, #48]	; (80036e0 <__libc_init_array+0x44>)
 80036b0:	f000 f818 	bl	80036e4 <_init>
 80036b4:	1ba4      	subs	r4, r4, r6
 80036b6:	10a4      	asrs	r4, r4, #2
 80036b8:	2500      	movs	r5, #0
 80036ba:	42a5      	cmp	r5, r4
 80036bc:	d105      	bne.n	80036ca <__libc_init_array+0x2e>
 80036be:	bd70      	pop	{r4, r5, r6, pc}
 80036c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036c4:	4798      	blx	r3
 80036c6:	3501      	adds	r5, #1
 80036c8:	e7ee      	b.n	80036a8 <__libc_init_array+0xc>
 80036ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036ce:	4798      	blx	r3
 80036d0:	3501      	adds	r5, #1
 80036d2:	e7f2      	b.n	80036ba <__libc_init_array+0x1e>
 80036d4:	08003748 	.word	0x08003748
 80036d8:	08003748 	.word	0x08003748
 80036dc:	08003748 	.word	0x08003748
 80036e0:	0800374c 	.word	0x0800374c

080036e4 <_init>:
 80036e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e6:	bf00      	nop
 80036e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ea:	bc08      	pop	{r3}
 80036ec:	469e      	mov	lr, r3
 80036ee:	4770      	bx	lr

080036f0 <_fini>:
 80036f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f2:	bf00      	nop
 80036f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036f6:	bc08      	pop	{r3}
 80036f8:	469e      	mov	lr, r3
 80036fa:	4770      	bx	lr
